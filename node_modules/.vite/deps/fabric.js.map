{
  "version": 3,
  "sources": ["../../fabric/src/config.ts", "../../fabric/src/util/internals/console.ts", "../../fabric/src/filters/GLProbes/GLProbe.ts", "../../fabric/src/filters/GLProbes/WebGLProbe.ts", "../../fabric/src/env/browser.ts", "../../fabric/src/env/index.ts", "../../fabric/src/cache.ts", "../../fabric/src/constants.ts", "../../fabric/src/ClassRegistry.ts", "../../fabric/src/util/animation/AnimationRegistry.ts", "../../fabric/src/Observable.ts", "../../fabric/src/util/internals/removeFromArray.ts", "../../fabric/src/util/misc/cos.ts", "../../fabric/src/util/misc/sin.ts", "../../fabric/src/Point.ts", "../../fabric/src/Collection.ts", "../../fabric/src/CommonMethods.ts", "../../fabric/src/util/animation/AnimationFrameProvider.ts", "../../fabric/src/util/internals/uid.ts", "../../fabric/src/util/misc/dom.ts", "../../fabric/src/util/misc/radiansDegreesConversion.ts", "../../fabric/src/util/misc/matrix.ts", "../../fabric/src/util/misc/objectEnlive.ts", "../../fabric/src/util/misc/pick.ts", "../../fabric/src/color/color_map.ts", "../../fabric/src/color/util.ts", "../../fabric/src/color/Color.ts", "../../fabric/src/color/constants.ts", "../../fabric/src/util/misc/toFixed.ts", "../../fabric/src/util/misc/svgParsing.ts", "../../fabric/src/util/typeAssertions.ts", "../../fabric/src/util/dom_misc.ts", "../../fabric/src/canvas/DOMManagers/util.ts", "../../fabric/src/canvas/DOMManagers/StaticCanvasDOMManager.ts", "../../fabric/src/canvas/StaticCanvasOptions.ts", "../../fabric/src/canvas/StaticCanvas.ts", "../../fabric/src/util/dom_event.ts", "../../fabric/src/util/misc/boundingBoxFromPoints.ts", "../../fabric/src/util/misc/objectTransforms.ts", "../../fabric/src/util/misc/planeChange.ts", "../../fabric/src/controls/fireEvent.ts", "../../fabric/src/util/misc/resolveOrigin.ts", "../../fabric/src/controls/util.ts", "../../fabric/src/controls/drag.ts", "../../fabric/src/shapes/Object/FabricObjectSVGExportMixin.ts", "../../fabric/src/parser/getSvgRegex.ts", "../../fabric/src/parser/constants.ts", "../../fabric/src/util/misc/vectors.ts", "../../fabric/src/Shadow.ts", "../../fabric/src/util/misc/capValue.ts", "../../fabric/src/shapes/Object/defaultValues.ts", "../../fabric/src/util/animation/easing.ts", "../../fabric/src/util/animation/AnimationBase.ts", "../../fabric/src/util/animation/ValueAnimation.ts", "../../fabric/src/util/animation/ArrayAnimation.ts", "../../fabric/src/util/animation/ColorAnimation.ts", "../../fabric/src/util/animation/animate.ts", "../../fabric/src/Intersection.ts", "../../fabric/src/shapes/Object/ObjectGeometry.ts", "../../fabric/src/shapes/Object/Object.ts", "../../fabric/src/controls/wrapWithFireEvent.ts", "../../fabric/src/controls/wrapWithFixedAnchor.ts", "../../fabric/src/controls/changeWidth.ts", "../../fabric/src/controls/controlRendering.ts", "../../fabric/src/controls/Control.ts", "../../fabric/src/controls/rotate.ts", "../../fabric/src/controls/scale.ts", "../../fabric/src/controls/skew.ts", "../../fabric/src/controls/scaleSkew.ts", "../../fabric/src/controls/commonControls.ts", "../../fabric/src/shapes/Object/InteractiveObject.ts", "../../fabric/src/util/applyMixins.ts", "../../fabric/src/shapes/Object/FabricObject.ts", "../../fabric/src/util/misc/isTransparent.ts", "../../fabric/src/util/misc/projectStroke/StrokeProjectionsBase.ts", "../../fabric/src/util/misc/projectStroke/StrokeLineJoinProjections.ts", "../../fabric/src/util/misc/projectStroke/StrokeLineCapProjections.ts", "../../fabric/src/util/misc/projectStroke/index.ts", "../../fabric/src/util/internals/findRight.ts", "../../fabric/src/util/internals/cloneStyles.ts", "../../fabric/src/util/lang_string.ts", "../../fabric/src/util/misc/textStyles.ts", "../../fabric/src/parser/attributes.ts", "../../fabric/src/parser/selectorMatches.ts", "../../fabric/src/parser/elementMatchesRule.ts", "../../fabric/src/parser/doesSomeParentMatch.ts", "../../fabric/src/parser/normalizeAttr.ts", "../../fabric/src/util/internals/cleanupSvgAttribute.ts", "../../fabric/src/parser/parseTransformAttribute.ts", "../../fabric/src/parser/normalizeValue.ts", "../../fabric/src/parser/parseFontDeclaration.ts", "../../fabric/src/parser/parseStyleString.ts", "../../fabric/src/parser/parseStyleAttribute.ts", "../../fabric/src/parser/parseStyleObject.ts", "../../fabric/src/parser/setStrokeFillOpacity.ts", "../../fabric/src/parser/parseAttributes.ts", "../../fabric/src/parser/getGlobalStylesForElement.ts", "../../fabric/src/shapes/Rect.ts", "../../fabric/src/LayoutManager/constants.ts", "../../fabric/src/LayoutManager/LayoutStrategies/utils.ts", "../../fabric/src/LayoutManager/LayoutStrategies/LayoutStrategy.ts", "../../fabric/src/LayoutManager/LayoutStrategies/FitContentLayout.ts", "../../fabric/src/LayoutManager/LayoutManager.ts", "../../fabric/src/shapes/Group.ts", "../../fabric/src/util/misc/groupSVGElements.ts", "../../fabric/src/util/misc/findScaleTo.ts", "../../fabric/src/util/path/regex.ts", "../../fabric/src/util/path/index.ts", "../../fabric/src/util/dom_style.ts", "../../fabric/src/util/misc/mergeClipPaths.ts", "../../fabric/src/util/internals/getRandomInt.ts", "../../fabric/src/util/internals/dom_request.ts", "../../fabric/src/util/transform_matrix_removal.ts", "../../fabric/src/util/misc/rotatePoint.ts", "../../fabric/src/canvas/DOMManagers/CanvasDOMManager.ts", "../../fabric/src/canvas/SelectableCanvas.ts", "../../fabric/src/canvas/CanvasOptions.ts", "../../fabric/src/canvas/TextEditingManager.ts", "../../fabric/src/canvas/Canvas.ts", "../../fabric/src/gradient/constants.ts", "../../fabric/src/util/internals/ifNaN.ts", "../../fabric/src/parser/percent.ts", "../../fabric/src/gradient/parser/parseColorStops.ts", "../../fabric/src/gradient/parser/misc.ts", "../../fabric/src/gradient/parser/parseCoords.ts", "../../fabric/src/gradient/Gradient.ts", "../../fabric/src/Pattern/Pattern.ts", "../../fabric/src/brushes/BaseBrush.ts", "../../fabric/src/shapes/Path.ts", "../../fabric/src/brushes/PencilBrush.ts", "../../fabric/src/shapes/Circle.ts", "../../fabric/src/brushes/CircleBrush.ts", "../../fabric/src/brushes/SprayBrush.ts", "../../fabric/src/brushes/PatternBrush.ts", "../../fabric/src/shapes/Line.ts", "../../fabric/src/shapes/Triangle.ts", "../../fabric/src/shapes/Ellipse.ts", "../../fabric/src/parser/parsePointsAttribute.ts", "../../fabric/src/shapes/Polyline.ts", "../../fabric/src/shapes/Polygon.ts", "../../fabric/src/shapes/Text/constants.ts", "../../fabric/src/shapes/Text/StyledText.ts", "../../fabric/src/shapes/Text/TextSVGExportMixin.ts", "../../fabric/src/shapes/Text/Text.ts", "../../fabric/src/shapes/IText/DraggableTextDelegate.ts", "../../fabric/src/shapes/IText/ITextBehavior.ts", "../../fabric/src/shapes/IText/ITextKeyBehavior.ts", "../../fabric/src/shapes/IText/ITextClickBehavior.ts", "../../fabric/src/shapes/IText/constants.ts", "../../fabric/src/shapes/IText/IText.ts", "../../fabric/src/shapes/Textbox.ts", "../../fabric/src/LayoutManager/LayoutStrategies/ClipPathLayout.ts", "../../fabric/src/LayoutManager/LayoutStrategies/FixedLayout.ts", "../../fabric/src/LayoutManager/ActiveSelectionLayoutManager.ts", "../../fabric/src/shapes/ActiveSelection.ts", "../../fabric/src/filters/Canvas2dFilterBackend.ts", "../../fabric/src/filters/WebGLFilterBackend.ts", "../../fabric/src/filters/FilterBackend.ts", "../../fabric/src/shapes/Image.ts", "../../fabric/src/parser/applyViewboxTransform.ts", "../../fabric/src/parser/getTagName.ts", "../../fabric/src/parser/hasInvalidAncestor.ts", "../../fabric/src/parser/getMultipleNodes.ts", "../../fabric/src/parser/recursivelyParseGradientsXlink.ts", "../../fabric/src/parser/getGradientDefs.ts", "../../fabric/src/parser/getCSSRules.ts", "../../fabric/src/parser/elements_parser.ts", "../../fabric/src/parser/parseSVGDocument.ts", "../../fabric/src/parser/parseUseDirectives.ts", "../../fabric/src/parser/loadSVGFromString.ts", "../../fabric/src/parser/loadSVGFromURL.ts", "../../fabric/src/controls/polyControl.ts", "../../fabric/src/controls/pathControl.ts", "../../fabric/src/filters/utils.ts", "../../fabric/src/filters/shaders/baseFilter.ts", "../../fabric/src/filters/BaseFilter.ts", "../../fabric/src/filters/shaders/blendColor.ts", "../../fabric/src/filters/BlendColor.ts", "../../fabric/src/filters/shaders/blendImage.ts", "../../fabric/src/filters/BlendImage.ts", "../../fabric/src/filters/Blur.ts", "../../fabric/src/filters/shaders/blur.ts", "../../fabric/src/filters/Brightness.ts", "../../fabric/src/filters/shaders/brightness.ts", "../../fabric/src/filters/ColorMatrix.ts", "../../fabric/src/filters/shaders/colorMatrix.ts", "../../fabric/src/filters/ColorMatrixFilters.ts", "../../fabric/src/filters/Composed.ts", "../../fabric/src/filters/Contrast.ts", "../../fabric/src/filters/shaders/constrast.ts", "../../fabric/src/filters/shaders/convolute.ts", "../../fabric/src/filters/Convolute.ts", "../../fabric/src/filters/shaders/gamma.ts", "../../fabric/src/filters/Gamma.ts", "../../fabric/src/filters/shaders/grayscale.ts", "../../fabric/src/filters/Grayscale.ts", "../../fabric/src/filters/HueRotation.ts", "../../fabric/src/filters/Invert.ts", "../../fabric/src/filters/shaders/invert.ts", "../../fabric/src/filters/Noise.ts", "../../fabric/src/filters/shaders/noise.ts", "../../fabric/src/filters/Pixelate.ts", "../../fabric/src/filters/shaders/pixelate.ts", "../../fabric/src/filters/RemoveColor.ts", "../../fabric/src/filters/shaders/removeColor.ts", "../../fabric/src/filters/Resize.ts", "../../fabric/src/filters/Saturation.ts", "../../fabric/src/filters/shaders/saturation.ts", "../../fabric/src/filters/Vibrance.ts", "../../fabric/src/filters/shaders/vibrance.ts"],
  "sourcesContent": ["export type TConfiguration = Partial<BaseConfiguration>;\n\nclass BaseConfiguration {\n  /**\n   * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n   * which is unitless and not rendered equally across browsers.\n   *\n   * Values that work quite well (as of October 2017) are:\n   * - Chrome: 1.5\n   * - Edge: 1.75\n   * - Firefox: 0.9\n   * - Safari: 0.95\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default 1\n   */\n  browserShadowBlurConstant = 1;\n\n  /**\n   * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n   */\n  DPI = 96;\n\n  /**\n   * Device Pixel Ratio\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   */\n  devicePixelRatio =\n    typeof window !== 'undefined' ? window.devicePixelRatio : 1; // eslint-disable-line no-restricted-globals\n\n  /**\n   * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  perfLimitSizeTotal = 2097152;\n\n  /**\n   * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  maxCacheSideLimit = 4096;\n\n  /**\n   * Lowest pixel limit for cache canvases, set at 256PX\n   * @since 1.7.14\n   * @type Number\n   * @default\n   */\n  minCacheSideLimit = 256;\n\n  /**\n   * When 'true', style information is not retained when copy/pasting text, making\n   * pasted text use destination style.\n   * Defaults to 'false'.\n   * @type Boolean\n   * @default\n   * @deprecated\n   */\n  disableStyleCopyPaste = false;\n\n  /**\n   * Enable webgl for filtering picture is available\n   * A filtering backend will be initialized, this will both take memory and\n   * time since a default 2048x2048 canvas will be created for the gl context\n   * @since 2.0.0\n   * @type Boolean\n   * @default\n   */\n  enableGLFiltering = true;\n\n  /**\n   * if webgl is enabled and available, textureSize will determine the size\n   * of the canvas backend\n   *\n   * In order to support old hardware set to `2048` to avoid OOM\n   *\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  textureSize = 4096;\n\n  /**\n   * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n   * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n   * this has to be set before instantiating the filtering backend ( before filtering the first image )\n   * @type Boolean\n   * @default false\n   */\n  forceGLPutImageData = false;\n\n  /**\n   * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n   * With the standard behaviour of fabric to translate all curves in absolute commands and by not subtracting the starting point from\n   * the curve is very hard to hit any cache.\n   * Enable only if you know why it could be useful.\n   * Candidate for removal/simplification\n   * @default false\n   */\n  cachesBoundsOfCurve = false;\n\n  /**\n   * Map of font files\n   * Map<fontFamily, pathToFile> of font files\n   */\n  fontPaths: Record</** fontFamily */ string, /** pathToFile */ string> = {};\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * Used in exporting methods (`toObject`, `toJSON`, `toSVG`)\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   */\n  NUM_FRACTION_DIGITS = 4;\n}\n\nexport class Configuration extends BaseConfiguration {\n  constructor(config?: TConfiguration) {\n    super();\n    this.configure(config);\n  }\n\n  configure(config: TConfiguration = {}) {\n    Object.assign(this, config);\n  }\n\n  /**\n   * Map<fontFamily, pathToFile> of font files\n   */\n  addFonts(\n    paths: Record</** fontFamily */ string, /** pathToFile */ string> = {},\n  ) {\n    this.fontPaths = {\n      ...this.fontPaths,\n      ...paths,\n    };\n  }\n\n  removeFonts(fontFamilys: string[] = []) {\n    fontFamilys.forEach((fontFamily) => {\n      delete this.fontPaths[fontFamily];\n    });\n  }\n\n  clearFonts() {\n    this.fontPaths = {};\n  }\n\n  restoreDefaults<T extends BaseConfiguration>(keys?: (keyof T)[]) {\n    const defaults = new BaseConfiguration() as T;\n    const config =\n      keys?.reduce((acc, key) => {\n        acc[key] = defaults[key];\n        return acc;\n      }, {} as T) || defaults;\n    this.configure(config);\n  }\n}\n\nexport const config = new Configuration();\n", "export const log = (\n  severity: 'log' | 'warn' | 'error',\n  ...optionalParams: any[]\n) =>\n  // eslint-disable-next-line no-restricted-syntax\n  console[severity]('fabric', ...optionalParams);\n\nexport class FabricError extends Error {\n  constructor(message?: string, options?: ErrorOptions) {\n    super(`fabric: ${message}`, options);\n  }\n}\n\nexport class SignalAbortedError extends FabricError {\n  constructor(context: string) {\n    super(`${context} 'options.signal' is in 'aborted' state`);\n  }\n}\n", "export type GLPrecision = 'lowp' | 'mediump' | 'highp';\n\nexport abstract class GLProbe {\n  declare GLPrecision: GLPrecision | undefined;\n  abstract queryWebGL(canvas: HTMLCanvasElement): void;\n  abstract isSupported(textureSize: number): boolean;\n}\n", "import { log } from '../../util/internals/console';\nimport { GLProbe } from './GLProbe';\nimport type { GLPrecision } from './GLProbe';\n\n/**\n * Lazy initialize WebGL constants\n */\nexport class WebGLProbe extends GLProbe {\n  declare maxTextureSize?: number;\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {GLPrecision} Precision to test can be any of following\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  private testPrecision(\n    gl: WebGLRenderingContext,\n    precision: GLPrecision,\n  ): boolean {\n    const fragmentSource = `precision ${precision} float;\\nvoid main(){}`;\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    if (!fragmentShader) {\n      return false;\n    }\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    return !!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\n  }\n\n  /**\n   * query browser for WebGL\n   */\n  queryWebGL(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext('webgl');\n    if (gl) {\n      this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      this.GLPrecision = (['highp', 'mediump', 'lowp'] as const).find(\n        (precision) => this.testPrecision(gl, precision),\n      );\n      gl.getExtension('WEBGL_lose_context')!.loseContext();\n      log('log', `WebGL: max texture size ${this.maxTextureSize}`);\n    }\n  }\n\n  isSupported(textureSize: number) {\n    return !!this.maxTextureSize && this.maxTextureSize >= textureSize;\n  }\n}\n", "/* eslint-disable no-restricted-globals */\nimport { WebGLProbe } from '../filters/GLProbes/WebGLProbe';\nimport type { TCopyPasteData, TFabricEnv } from './types';\n\nconst copyPasteData: TCopyPasteData = {};\n\nexport const getEnv = (): TFabricEnv => {\n  return {\n    document,\n    window,\n    isTouchSupported:\n      'ontouchstart' in window ||\n      'ontouchstart' in document ||\n      (window && window.navigator && window.navigator.maxTouchPoints > 0),\n    WebGLProbe: new WebGLProbe(),\n    dispose() {\n      // noop\n    },\n    copyPasteData,\n  };\n};\n", "/**\n * This file is consumed by fabric.\n * The `./node` and `./browser` files define the env variable that is used by this module.\n * The `./browser` module is defined to be the default env and doesn't set the env at all.\n * This is done in order to support isomorphic usage for browser and node applications\n * since window and document aren't defined at time of import in SSR, we can't set env so we avoid it by deferring to the default env.\n */\n\nimport { config } from '../config';\nimport { getEnv as getBrowserEnv } from './browser';\nimport type { TFabricEnv } from './types';\nimport type { DOMWindow } from 'jsdom';\n\nlet env: TFabricEnv;\n\n/**\n * Sets the environment variables used by fabric.\\\n * This is exposed for special cases, such as configuring a test environment, and should be used with care.\n *\n * **CAUTION**: Must be called before using the package.\n *\n * @example\n * <caption>Passing `window` and `document` objects to fabric (in case they are mocked or something)</caption>\n * import { getEnv, setEnv } from 'fabric';\n * // we want fabric to use the `window` and `document` objects exposed by the environment we are running in.\n * setEnv({ ...getEnv(), window, document });\n * // done with setup, using fabric is now safe\n */\nexport const setEnv = (value: TFabricEnv) => {\n  env = value;\n};\n\n/**\n * In order to support SSR we **MUST** access the browser env only after the window has loaded\n */\nexport const getEnv = () => env || (env = getBrowserEnv());\n\nexport const getFabricDocument = (): Document => getEnv().document;\n\nexport const getFabricWindow = (): (Window & typeof globalThis) | DOMWindow =>\n  getEnv().window;\n\n/**\n * @returns the config value if defined, fallbacks to the environment value\n */\nexport const getDevicePixelRatio = () =>\n  Math.max(config.devicePixelRatio ?? getFabricWindow().devicePixelRatio, 1);\n", "import { config } from './config';\nimport type { TRectBounds } from './typedefs';\n\nexport class Cache {\n  /**\n   * Cache of widths of chars in text rendering.\n   */\n  charWidthsCache: Record<\n    /** fontFamily */ string,\n    Record<\n      /** fontStyleCacheKey */ string,\n      Record</** char */ string, /** width */ number>\n    >\n  > = {};\n\n  /**\n   * @return {Object} reference to cache\n   */\n  getFontCache({\n    fontFamily,\n    fontStyle,\n    fontWeight,\n  }: {\n    fontFamily: string;\n    fontStyle: string;\n    fontWeight: string | number;\n  }) {\n    fontFamily = fontFamily.toLowerCase();\n    if (!this.charWidthsCache[fontFamily]) {\n      this.charWidthsCache[fontFamily] = {};\n    }\n    const fontCache = this.charWidthsCache[fontFamily];\n    const cacheKey = `${fontStyle.toLowerCase()}_${(\n      fontWeight + ''\n    ).toLowerCase()}`;\n    if (!fontCache[cacheKey]) {\n      fontCache[cacheKey] = {};\n    }\n    return fontCache[cacheKey];\n  }\n\n  /**\n   * Clear char widths cache for the given font family or all the cache if no\n   * fontFamily is specified.\n   * Use it if you know you are loading fonts in a lazy way and you are not waiting\n   * for custom fonts to load properly when adding text objects to the canvas.\n   * If a text object is added when its own font is not loaded yet, you will get wrong\n   * measurement and so wrong bounding boxes.\n   * After the font cache is cleared, either change the textObject text content or call\n   * initDimensions() to trigger a recalculation\n   * @param {String} [fontFamily] font family to clear\n   */\n  clearFontCache(fontFamily?: string) {\n    fontFamily = (fontFamily || '').toLowerCase();\n    if (!fontFamily) {\n      this.charWidthsCache = {};\n    } else if (this.charWidthsCache[fontFamily]) {\n      delete this.charWidthsCache[fontFamily];\n    }\n  }\n\n  /**\n   * Given current aspect ratio, determines the max width and height that can\n   * respect the total allowed area for the cache.\n   * @param {number} ar aspect ratio\n   * @return {number[]} Limited dimensions X and Y\n   */\n  limitDimsByArea(ar: number) {\n    const { perfLimitSizeTotal } = config;\n    const roughWidth = Math.sqrt(perfLimitSizeTotal * ar);\n    // we are not returning a point on purpose, to avoid circular dependencies\n    // this is an internal utility\n    return [\n      Math.floor(roughWidth),\n      Math.floor(perfLimitSizeTotal / roughWidth),\n    ];\n  }\n\n  /**\n   * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n   * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n   * you do not get any speed benefit and you get a big object in memory.\n   * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n   * can eventually clear it.\n   * It was an internal variable, is accessible since version 2.3.4\n   */\n  boundsOfCurveCache: Record<string, TRectBounds> = {};\n}\n\nexport const cache = new Cache();\n", "import type { TMat2D } from './typedefs';\n// use this syntax so babel plugin see this import here\nimport { version } from '../package.json';\n\nexport const VERSION = version;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nexport const halfPI = Math.PI / 2;\nexport const twoMathPi = Math.PI * 2;\nexport const PiBy180 = Math.PI / 180;\n\nexport const iMatrix = Object.freeze([1, 0, 0, 1, 0, 0]) as TMat2D;\nexport const DEFAULT_SVG_FONT_SIZE = 16;\nexport const ALIASING_LIMIT = 2;\n\n/* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\nexport const kRect = 1 - 0.5522847498;\n\nexport const CENTER = 'center';\nexport const LEFT = 'left';\nexport const TOP = 'top';\nexport const BOTTOM = 'bottom';\nexport const RIGHT = 'right';\nexport const NONE = 'none';\n\nexport const reNewline = /\\r?\\n/;\n\nexport const MOVING = 'moving';\nexport const SCALING = 'scaling';\nexport const ROTATING = 'rotating';\nexport const ROTATE = 'rotate';\nexport const SKEWING = 'skewing';\nexport const RESIZING = 'resizing';\nexport const MODIFY_POLY = 'modifyPoly';\nexport const MODIFY_PATH = 'modifyPath';\nexport const CHANGED = 'changed';\nexport const SCALE = 'scale';\nexport const SCALE_X = 'scaleX';\nexport const SCALE_Y = 'scaleY';\nexport const SKEW_X = 'skewX';\nexport const SKEW_Y = 'skewY';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const MODIFIED = 'modified';\n", "import { FabricError } from './util/internals/console';\n\n/*\n * This Map connects the objects type value with their\n * class implementation. It used from any object to understand which are\n * the classes to enlive when requesting a object.type = 'path' for example.\n * Objects uses it for clipPath, Canvas uses it for everything.\n * This is necessary for generic code to run and enlive instances from serialized representation.\n * You can customize which classes get enlived from SVG parsing using this classRegistry.\n * The Registry start empty and gets filled in depending which files you import.\n * If you want to be able to parse arbitrary SVGs or JSON representation of canvases, coming from\n * different sources you will need to import all fabric because you may need all classes.\n */\n\nexport const JSON = 'json';\nexport const SVG = 'svg';\n\nexport class ClassRegistry {\n  declare [JSON]: Map<string, any>;\n  declare [SVG]: Map<string, any>;\n\n  constructor() {\n    this[JSON] = new Map();\n    this[SVG] = new Map();\n  }\n\n  has(classType: string): boolean {\n    return this[JSON].has(classType);\n  }\n\n  getClass<T>(classType: string): T {\n    const constructor = this[JSON].get(classType);\n    if (!constructor) {\n      throw new FabricError(`No class registered for ${classType}`);\n    }\n    return constructor;\n  }\n\n  setClass(classConstructor: any, classType?: string) {\n    if (classType) {\n      this[JSON].set(classType, classConstructor);\n    } else {\n      this[JSON].set(classConstructor.type, classConstructor);\n      // legacy\n      // @TODO: needs to be removed in fabric 7 or 8\n      this[JSON].set(classConstructor.type.toLowerCase(), classConstructor);\n    }\n  }\n\n  getSVGClass(SVGTagName: string): any {\n    return this[SVG].get(SVGTagName);\n  }\n\n  setSVGClass(classConstructor: any, SVGTagName?: string) {\n    this[SVG].set(\n      SVGTagName ?? classConstructor.type.toLowerCase(),\n      classConstructor,\n    );\n  }\n}\n\nexport const classRegistry = new ClassRegistry();\n", "import type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type { AnimationBase } from './AnimationBase';\n\n/**\n * Array holding all running animations\n */\nclass AnimationRegistry extends Array<AnimationBase> {\n  /**\n   * Remove a single animation using an animation context\n   * @param {AnimationBase} context\n   */\n  remove(context: AnimationBase) {\n    const index = this.indexOf(context);\n    index > -1 && this.splice(index, 1);\n  }\n\n  /**\n   * Cancel all running animations on the next frame\n   */\n  cancelAll() {\n    const animations = this.splice(0);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations attached to a canvas on the next frame\n   * @param {StaticCanvas} canvas\n   */\n  cancelByCanvas(canvas: StaticCanvas) {\n    if (!canvas) {\n      return [];\n    }\n    const animations = this.filter(\n      (animation) =>\n        animation.target === canvas ||\n        (typeof animation.target === 'object' &&\n          (animation.target as FabricObject)?.canvas === canvas),\n    );\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n\n  /**\n   * Cancel all running animations for target on the next frame\n   * @param target\n   */\n  cancelByTarget(target: AnimationBase['target']) {\n    if (!target) {\n      return [];\n    }\n    const animations = this.filter((animation) => animation.target === target);\n    animations.forEach((animation) => animation.abort());\n    return animations;\n  }\n}\n\nexport const runningAnimations = new AnimationRegistry();\n", "export type TEventCallback<T = any> = (options: T) => any;\n\ntype EventRegistryObject<E> = {\n  [K in keyof E]?: TEventCallback<E[K]>;\n};\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n * @see {@link http://fabricjs.com/events|Events demo}\n */\nexport class Observable<EventSpec> {\n  private __eventListeners: Record<keyof EventSpec, TEventCallback[]> =\n    {} as Record<keyof EventSpec, TEventCallback[]>;\n\n  /**\n   * Observes specified event\n   * @alias on\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  on(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  on<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (!this.__eventListeners) {\n      this.__eventListeners = {} as Record<keyof EventSpec, TEventCallback[]>;\n    }\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this.on(eventName as K, handler as TEventCallback);\n      });\n      return () => this.off(arg0);\n    } else if (handler) {\n      const eventName = arg0;\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n      return () => this.off(eventName, handler);\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * Observes specified event **once**\n   * @alias once\n   * @param {string} eventName Event name (eg. 'after:render')\n   * @param {EventRegistryObject} handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Function} disposer\n   */\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    eventName: K,\n    handler: TEventCallback<E>,\n  ): VoidFunction;\n  once(handlers: EventRegistryObject<EventSpec>): VoidFunction;\n  once<K extends keyof EventSpec, E extends EventSpec[K]>(\n    arg0: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback<E>,\n  ): VoidFunction {\n    if (typeof arg0 === 'object') {\n      // one object with key/value pairs was passed\n      const disposers: VoidFunction[] = [];\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        disposers.push(this.once(eventName as K, handler as TEventCallback));\n      });\n      return () => disposers.forEach((d) => d());\n    } else if (handler) {\n      const disposer = this.on<K, E>(\n        arg0,\n        function onceHandler(this: Observable<EventSpec>, ...args) {\n          handler.call(this, ...args);\n          disposer();\n        },\n      );\n      return disposer;\n    } else {\n      // noop\n      return () => false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} eventName\n   * @param {Function} [handler]\n   */\n  private _removeEventListener<K extends keyof EventSpec>(\n    eventName: K,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n\n    if (handler) {\n      const eventListener = this.__eventListeners[eventName];\n      const index = eventListener.indexOf(handler);\n      index > -1 && eventListener.splice(index, 1);\n    } else {\n      this.__eventListeners[eventName] = [];\n    }\n  }\n\n  /**\n   * Unsubscribe all event listeners for eventname.\n   * Do not use this pattern. You could kill internal fabricJS events.\n   * We know we should have protected events for internal flows, but we don't have yet\n   * @deprecated\n   * @param {string} eventName event name (eg. 'after:render')\n   */\n  off<K extends keyof EventSpec>(eventName: K): void;\n  /**\n   * unsubscribe an event listener\n   * @param {string} eventName event name (eg. 'after:render')\n   * @param {TEventCallback} handler event listener to unsubscribe\n   */\n  off<K extends keyof EventSpec>(eventName: K, handler: TEventCallback): void;\n  /**\n   * unsubscribe event listeners\n   * @param handlers handlers key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   */\n  off(handlers: EventRegistryObject<EventSpec>): void;\n  /**\n   * unsubscribe all event listeners\n   */\n  off(): void;\n  off<K extends keyof EventSpec>(\n    arg0?: K | EventRegistryObject<EventSpec>,\n    handler?: TEventCallback,\n  ) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (typeof arg0 === 'undefined') {\n      for (const eventName in this.__eventListeners) {\n        this._removeEventListener(eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (typeof arg0 === 'object') {\n      Object.entries(arg0).forEach(([eventName, handler]) => {\n        this._removeEventListener(eventName as K, handler as TEventCallback);\n      });\n    } else {\n      this._removeEventListener(arg0, handler);\n    }\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   */\n  fire<K extends keyof EventSpec>(eventName: K, options?: EventSpec[K]) {\n    if (!this.__eventListeners) {\n      return;\n    }\n\n    const listenersForEvent = this.__eventListeners[eventName]?.concat();\n    if (listenersForEvent) {\n      for (let i = 0; i < listenersForEvent.length; i++) {\n        listenersForEvent[i].call(this, options || {});\n      }\n    }\n  }\n}\n", "/**\n * Removes value from an array.\n * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n * @param {Array} array\n * @param {*} value\n * @return {Array} original array\n */\nexport const removeFromArray = <T>(array: T[], value: T): T[] => {\n  const idx = array.indexOf(value);\n  if (idx !== -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the cosin value for angle.\n */\nexport const cos = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 1;\n  }\n  const angleSlice = Math.abs(angle) / halfPI;\n  switch (angleSlice) {\n    case 1:\n    case 3:\n      return 0;\n    case 2:\n      return -1;\n  }\n  return Math.cos(angle);\n};\n", "import type { TRadian } from '../../typedefs';\nimport { halfPI } from '../../constants';\n\n/**\n * Calculate the cos of an angle, avoiding returning floats for known results\n * This function is here just to avoid getting 0.999999999999999 when dealing\n * with numbers that are really 1 or 0.\n * @param {TRadian} angle the angle\n * @return {Number} the sin value for angle.\n */\nexport const sin = (angle: TRadian): number => {\n  if (angle === 0) {\n    return 0;\n  }\n  const angleSlice = angle / halfPI;\n  const value = Math.sign(angle);\n  switch (angleSlice) {\n    case 1:\n      return value;\n    case 2:\n      return 0;\n    case 3:\n      return -value;\n  }\n  return Math.sin(angle);\n};\n", "import type { TMat2D, TRadian } from './typedefs';\nimport { cos } from './util/misc/cos';\nimport { sin } from './util/misc/sin';\n\nexport interface XY {\n  x: number;\n  y: number;\n}\n\n/**\n * Adaptation of work of Kevin Lindsey(kevin@kevlindev.com)\n */\nexport class Point implements XY {\n  declare x: number;\n\n  declare y: number;\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(point?: XY);\n  constructor(arg0: number | XY = 0, y = 0) {\n    if (typeof arg0 === 'object') {\n      this.x = arg0.x;\n      this.y = arg0.y;\n    } else {\n      this.x = arg0;\n      this.y = y;\n    }\n  }\n\n  /**\n   * Adds another point to this one and returns another one\n   * @param {XY} that\n   * @return {Point} new Point instance with added values\n   */\n  add(that: XY): Point {\n    return new Point(this.x + that.x, this.y + that.y);\n  }\n\n  /**\n   * Adds another point to this one\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  addEquals(that: XY): Point {\n    this.x += that.x;\n    this.y += that.y;\n    return this;\n  }\n\n  /**\n   * Adds value to this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point} new Point with added value\n   */\n  scalarAdd(scalar: number): Point {\n    return new Point(this.x + scalar, this.y + scalar);\n  }\n\n  /**\n   * Adds value to this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarAddEquals(scalar: number): Point {\n    this.x += scalar;\n    this.y += scalar;\n    return this;\n  }\n\n  /**\n   * Subtracts another point from this point and returns a new one\n   * @param {XY} that\n   * @return {Point} new Point object with subtracted values\n   */\n  subtract(that: XY): Point {\n    return new Point(this.x - that.x, this.y - that.y);\n  }\n\n  /**\n   * Subtracts another point from this point\n   * @param {XY} that\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  subtractEquals(that: XY): Point {\n    this.x -= that.x;\n    this.y -= that.y;\n    return this;\n  }\n\n  /**\n   * Subtracts value from this point and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarSubtract(scalar: number): Point {\n    return new Point(this.x - scalar, this.y - scalar);\n  }\n\n  /**\n   * Subtracts value from this point\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarSubtractEquals(scalar: number): Point {\n    this.x -= scalar;\n    this.y -= scalar;\n    return this;\n  }\n\n  /**\n   * Multiplies this point by another value and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  multiply(that: XY): Point {\n    return new Point(this.x * that.x, this.y * that.y);\n  }\n\n  /**\n   * Multiplies this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarMultiply(scalar: number): Point {\n    return new Point(this.x * scalar, this.y * scalar);\n  }\n\n  /**\n   * Multiplies this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarMultiplyEquals(scalar: number): Point {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n\n  /**\n   * Divides this point by another and returns a new one\n   * @param {XY} that\n   * @return {Point}\n   */\n  divide(that: XY): Point {\n    return new Point(this.x / that.x, this.y / that.y);\n  }\n\n  /**\n   * Divides this point by a value and returns a new one\n   * @param {Number} scalar\n   * @return {Point}\n   */\n  scalarDivide(scalar: number): Point {\n    return new Point(this.x / scalar, this.y / scalar);\n  }\n\n  /**\n   * Divides this point by a value\n   * @param {Number} scalar\n   * @return {Point} thisArg\n   * @chainable\n   * @deprecated\n   */\n  scalarDivideEquals(scalar: number): Point {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n\n  /**\n   * Returns true if this point is equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  eq(that: XY): boolean {\n    return this.x === that.x && this.y === that.y;\n  }\n\n  /**\n   * Returns true if this point is less than another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lt(that: XY): boolean {\n    return this.x < that.x && this.y < that.y;\n  }\n\n  /**\n   * Returns true if this point is less than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  lte(that: XY): boolean {\n    return this.x <= that.x && this.y <= that.y;\n  }\n\n  /**\n\n   * Returns true if this point is greater another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gt(that: XY): boolean {\n    return this.x > that.x && this.y > that.y;\n  }\n\n  /**\n   * Returns true if this point is greater than or equal to another one\n   * @param {XY} that\n   * @return {Boolean}\n   */\n  gte(that: XY): boolean {\n    return this.x >= that.x && this.y >= that.y;\n  }\n\n  /**\n   * Returns new point which is the result of linear interpolation with this one and another one\n   * @param {XY} that\n   * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n   * @return {Point}\n   */\n  lerp(that: XY, t = 0.5): Point {\n    t = Math.max(Math.min(1, t), 0);\n    return new Point(\n      this.x + (that.x - this.x) * t,\n      this.y + (that.y - this.y) * t,\n    );\n  }\n\n  /**\n   * Returns distance from this point and another one\n   * @param {XY} that\n   * @return {Number}\n   */\n  distanceFrom(that: XY): number {\n    const dx = this.x - that.x,\n      dy = this.y - that.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Returns the point between this point and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  midPointFrom(that: XY): Point {\n    return this.lerp(that);\n  }\n\n  /**\n   * Returns a new point which is the min of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  min(that: XY): Point {\n    return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n  }\n\n  /**\n   * Returns a new point which is the max of this and another one\n   * @param {XY} that\n   * @return {Point}\n   */\n  max(that: XY): Point {\n    return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n  }\n\n  /**\n   * Returns string representation of this point\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.x},${this.y}`;\n  }\n\n  /**\n   * Sets x/y of this point\n   * @param {Number} x\n   * @param {Number} y\n   * @chainable\n   */\n  setXY(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x of this point\n   * @param {Number} x\n   * @chainable\n   */\n  setX(x: number) {\n    this.x = x;\n    return this;\n  }\n\n  /**\n   * Sets y of this point\n   * @param {Number} y\n   * @chainable\n   */\n  setY(y: number) {\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * Sets x/y of this point from another point\n   * @param {XY} that\n   * @chainable\n   */\n  setFromPoint(that: XY) {\n    this.x = that.x;\n    this.y = that.y;\n    return this;\n  }\n\n  /**\n   * Swaps x/y of this point and another point\n   * @param {XY} that\n   */\n  swap(that: XY) {\n    const x = this.x,\n      y = this.y;\n    this.x = that.x;\n    this.y = that.y;\n    that.x = x;\n    that.y = y;\n  }\n\n  /**\n   * return a cloned instance of the point\n   * @return {Point}\n   */\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Rotates `point` around `origin` with `radians`\n   * @static\n   * @memberOf fabric.util\n   * @param {XY} origin The origin of the rotation\n   * @param {TRadian} radians The radians of the angle for the rotation\n   * @return {Point} The new rotated point\n   */\n  rotate(radians: TRadian, origin: XY = ZERO): Point {\n    // TODO benchmark and verify the add and subtract how much cost\n    // and then in case early return if no origin is passed\n    const sinus = sin(radians),\n      cosinus = cos(radians);\n    const p = this.subtract(origin);\n    const rotated = new Point(\n      p.x * cosinus - p.y * sinus,\n      p.x * sinus + p.y * cosinus,\n    );\n    return rotated.add(origin);\n  }\n\n  /**\n   * Apply transform t to point p\n   * @static\n   * @memberOf fabric.util\n   * @param  {TMat2D} t The transform\n   * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n   * @return {Point} The transformed point\n   */\n  transform(t: TMat2D, ignoreOffset = false): Point {\n    return new Point(\n      t[0] * this.x + t[2] * this.y + (ignoreOffset ? 0 : t[4]),\n      t[1] * this.x + t[3] * this.y + (ignoreOffset ? 0 : t[5]),\n    );\n  }\n}\n\nexport const ZERO = new Point(0, 0);\n", "import type { Constructor, TBBox } from './typedefs';\nimport { removeFromArray } from './util/internals/removeFromArray';\nimport { Point } from './Point';\nimport type { ActiveSelection } from './shapes/ActiveSelection';\nimport type { Group } from './shapes/Group';\nimport type { InteractiveFabricObject } from './shapes/Object/InteractiveObject';\nimport type { FabricObject } from './shapes/Object/FabricObject';\n\nexport const isCollection = (\n  fabricObject?: FabricObject,\n): fabricObject is Group | ActiveSelection => {\n  return !!fabricObject && Array.isArray((fabricObject as Group)._objects);\n};\n\nexport function createCollectionMixin<TBase extends Constructor>(Base: TBase) {\n  class Collection extends Base {\n    /**\n     * @type {FabricObject[]}\n     * @TODO needs to end up in the constructor too\n     */\n    _objects: FabricObject[] = [];\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectAdded(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onObjectRemoved(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _onStackOrderChanged(object: FabricObject) {\n      // subclasses should override this method\n    }\n\n    /**\n     * Adds objects to collection\n     * Objects should be instances of (or inherit from) FabricObject\n     * @param {...FabricObject[]} objects to add\n     * @returns {number} new array length\n     */\n    add(...objects: FabricObject[]): number {\n      const size = this._objects.push(...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return size;\n    }\n\n    /**\n     * Inserts an object into collection at specified index\n     * @param {number} index Index to insert object at\n     * @param {...FabricObject[]} objects Object(s) to insert\n     * @returns {number} new array length\n     */\n    insertAt(index: number, ...objects: FabricObject[]) {\n      this._objects.splice(index, 0, ...objects);\n      objects.forEach((object) => this._onObjectAdded(object));\n      return this._objects.length;\n    }\n\n    /**\n     * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n     * @private\n     * @param {...FabricObject[]} objects objects to remove\n     * @returns {FabricObject[]} removed objects\n     */\n    remove(...objects: FabricObject[]) {\n      const array = this._objects,\n        removed: FabricObject[] = [];\n      objects.forEach((object) => {\n        const index = array.indexOf(object);\n        // only call onObjectRemoved if an object was actually removed\n        if (index !== -1) {\n          array.splice(index, 1);\n          removed.push(object);\n          this._onObjectRemoved(object);\n        }\n      });\n      return removed;\n    }\n\n    /**\n     * Executes given function for each object in this group\n     * A simple shortcut for getObjects().forEach, before es6 was more complicated,\n     * now is just a shortcut.\n     * @param {Function} callback\n     *                   Callback invoked with current object as first argument,\n     *                   index - as second and an array of all objects - as third.\n     */\n    forEachObject(\n      callback: (\n        object: FabricObject,\n        index: number,\n        array: FabricObject[],\n      ) => any,\n    ) {\n      this.getObjects().forEach((object, index, objects) =>\n        callback(object, index, objects),\n      );\n    }\n\n    /**\n     * Returns an array of children objects of this instance\n     * @param {...String} [types] When specified, only objects of these types are returned\n     * @return {Array}\n     */\n    getObjects(...types: string[]) {\n      if (types.length === 0) {\n        return [...this._objects];\n      }\n      return this._objects.filter((o) => o.isType(...types));\n    }\n\n    /**\n     * Returns object at specified index\n     * @param {Number} index\n     * @return {Object} object at index\n     */\n    item(index: number) {\n      return this._objects[index];\n    }\n\n    /**\n     * Returns true if collection contains no objects\n     * @return {Boolean} true if collection is empty\n     */\n    isEmpty() {\n      return this._objects.length === 0;\n    }\n\n    /**\n     * Returns a size of a collection (i.e: length of an array containing its objects)\n     * @return {Number} Collection size\n     */\n    size() {\n      return this._objects.length;\n    }\n\n    /**\n     * Returns true if collection contains an object.\\\n     * **Prefer using {@link FabricObject#isDescendantOf} for performance reasons**\n     * instead of `a.contains(b)` use `b.isDescendantOf(a)`\n     * @param {Object} object Object to check against\n     * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n     * @return {Boolean} `true` if collection contains an object\n     */\n    contains(object: FabricObject, deep?: boolean): boolean {\n      if (this._objects.includes(object)) {\n        return true;\n      } else if (deep) {\n        return this._objects.some(\n          (obj) =>\n            obj instanceof Collection &&\n            (obj as unknown as Collection).contains(object, true),\n        );\n      }\n      return false;\n    }\n\n    /**\n     * Returns number representation of a collection complexity\n     * @return {Number} complexity\n     */\n    complexity() {\n      return this._objects.reduce((memo, current) => {\n        memo += current.complexity ? current.complexity() : 0;\n        return memo;\n      }, 0);\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectToBack(object: FabricObject) {\n      if (!object || object === this._objects[0]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.unshift(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectToFront(object: FabricObject) {\n      if (!object || object === this._objects[this._objects.length - 1]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.push(object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, `intersecting` allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    sendObjectBackwards(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== 0) {\n        // if object is not on the bottom of stack\n        const newIdx = this.findNewLowerIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @returns {boolean} true if change occurred\n     */\n    bringObjectForward(object: FabricObject, intersecting?: boolean) {\n      if (!object) {\n        return false;\n      }\n      const idx = this._objects.indexOf(object);\n      if (idx !== this._objects.length - 1) {\n        // if object is not on top of stack (last item in an array)\n        const newIdx = this.findNewUpperIndex(object, idx, intersecting);\n        removeFromArray(this._objects, object);\n        this._objects.splice(newIdx, 0, object);\n        this._onStackOrderChanged(object);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {number} index Position to move to\n     * @returns {boolean} true if change occurred\n     */\n    moveObjectTo(object: FabricObject, index: number) {\n      if (object === this._objects[index]) {\n        return false;\n      }\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      this._onStackOrderChanged(object);\n      return true;\n    }\n\n    findNewLowerIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse down the stack looking for the nearest intersecting object\n        for (let i = idx - 1; i >= 0; --i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    }\n\n    findNewUpperIndex(\n      object: FabricObject,\n      idx: number,\n      intersecting?: boolean,\n    ) {\n      let newIdx;\n\n      if (intersecting) {\n        newIdx = idx;\n        // traverse up the stack looking for the nearest intersecting object\n        for (let i = idx + 1; i < this._objects.length; ++i) {\n          if (object.isOverlapping(this._objects[i])) {\n            newIdx = i;\n            break;\n          }\n        }\n      } else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    }\n\n    /**\n     * Given a bounding box, return all the objects of the collection that are contained in the bounding box.\n     * If `includeIntersecting` is true, return also the objects that intersect the bounding box as well.\n     * This is meant to work with selection. Is not a generic method.\n     * @param {TBBox} bbox a bounding box in scene coordinates\n     * @param {{ includeIntersecting?: boolean }} options an object with includeIntersecting\n     * @returns array of objects contained in the bounding box, ordered from top to bottom stacking wise\n     */\n    collectObjects(\n      { left, top, width, height }: TBBox,\n      { includeIntersecting = true }: { includeIntersecting?: boolean } = {},\n    ) {\n      const objects: InteractiveFabricObject[] = [],\n        tl = new Point(left, top),\n        br = tl.add(new Point(width, height));\n\n      // we iterate reverse order to collect top first in case of click.\n      for (let i = this._objects.length - 1; i >= 0; i--) {\n        const object = this._objects[i] as unknown as InteractiveFabricObject;\n        if (\n          object.selectable &&\n          object.visible &&\n          ((includeIntersecting && object.intersectsWithRect(tl, br)) ||\n            object.isContainedWithinRect(tl, br) ||\n            (includeIntersecting && object.containsPoint(tl)) ||\n            (includeIntersecting && object.containsPoint(br)))\n        ) {\n          objects.push(object);\n        }\n      }\n\n      return objects;\n    }\n  }\n\n  // https://github.com/microsoft/TypeScript/issues/32080\n  return Collection as typeof Collection & TBase;\n}\n", "import { Observable } from './Observable';\n\nexport class CommonMethods<EventSpec> extends Observable<EventSpec> {\n  /**\n   * Sets object's properties from options, for initialization only\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected _setOptions(options: any = {}) {\n    for (const prop in options) {\n      this.set(prop, options[prop]);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setObject(obj: Record<string, any>) {\n    for (const prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  }\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   */\n  set(key: string | Record<string, any>, value?: any) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n\n  _set(key: string, value: any) {\n    this[key as keyof this] = value;\n  }\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   */\n  toggle(property: string) {\n    const value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  }\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get(property: string): any {\n    return this[property as keyof this];\n  }\n}\n", "import { getFabricWindow } from '../../env';\n\nexport function requestAnimFrame(callback: FrameRequestCallback): number {\n  return getFabricWindow().requestAnimationFrame(callback);\n}\n\nexport function cancelAnimFrame(handle: number): void {\n  return getFabricWindow().cancelAnimationFrame(handle);\n}\n", "let id = 0;\n\nexport const uid = () => id++;\n", "import { getFabricDocument } from '../../env';\nimport type { ImageFormat, TSize } from '../../typedefs';\nimport { FabricError } from '../internals/console';\n/**\n * Creates canvas element\n * @return {CanvasElement} initialized canvas element\n */\nexport const createCanvasElement = (): HTMLCanvasElement => {\n  const element = getFabricDocument().createElement('canvas');\n  if (!element || typeof element.getContext === 'undefined') {\n    throw new FabricError('Failed to create `canvas` element');\n  }\n  return element;\n};\n\n/**\n * Creates image element (works on client and node)\n * @return {HTMLImageElement} HTML image element\n */\nexport const createImage = (): HTMLImageElement =>\n  getFabricDocument().createElement('img');\n\n/**\n * Creates a canvas element that is a copy of another and is also painted\n * @param {CanvasElement} canvas to copy size and content of\n * @return {CanvasElement} initialized canvas element\n */\nexport const copyCanvasElement = (\n  canvas: HTMLCanvasElement,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElementFor(canvas);\n  newCanvas.getContext('2d')?.drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\nexport const createCanvasElementFor = (\n  canvas: HTMLCanvasElement | ImageData | HTMLImageElement | TSize,\n): HTMLCanvasElement => {\n  const newCanvas = createCanvasElement();\n  newCanvas.width = canvas.width;\n  newCanvas.height = canvas.height;\n  return newCanvas;\n};\n\n/**\n * since 2.6.0 moved from canvas instance to utility.\n * possibly useless\n * @param {CanvasElement} canvasEl to copy size and content of\n * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n * @param {Number} quality <= 1 and > 0\n * @return {String} data url\n */\nexport const toDataURL = (\n  canvasEl: HTMLCanvasElement,\n  format: ImageFormat,\n  quality: number,\n) => canvasEl.toDataURL(`image/${format}`, quality);\n\nexport const isHTMLCanvas = (\n  canvas?: HTMLCanvasElement | string,\n): canvas is HTMLCanvasElement => {\n  return !!canvas && (canvas as HTMLCanvasElement).getContext !== undefined;\n};\n", "import type { TRadian, TDegree } from '../../typedefs';\nimport { PiBy180 } from '../../constants';\n\n/**\n * Transforms degrees to radians.\n * @param {TDegree} degrees value in degrees\n * @return {TRadian} value in radians\n */\nexport const degreesToRadians = (degrees: TDegree): TRadian =>\n  (degrees * PiBy180) as TRadian;\n\n/**\n * Transforms radians to degrees.\n * @param {TRadian} radians value in radians\n * @return {TDegree} value in degrees\n */\nexport const radiansToDegrees = (radians: TRadian): TDegree =>\n  (radians / PiBy180) as TDegree;\n", "import { iMatrix } from '../../constants';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TDegree, TRadian, TMat2D } from '../../typedefs';\nimport { cos } from './cos';\nimport { degreesToRadians, radiansToDegrees } from './radiansDegreesConversion';\nimport { sin } from './sin';\n\nexport type TRotateMatrixArgs = {\n  angle?: TDegree;\n};\n\nexport type TTranslateMatrixArgs = {\n  translateX?: number;\n  translateY?: number;\n};\n\nexport type TScaleMatrixArgs = {\n  scaleX?: number;\n  scaleY?: number;\n  flipX?: boolean;\n  flipY?: boolean;\n  skewX?: TDegree;\n  skewY?: TDegree;\n};\n\nexport type TComposeMatrixArgs = TTranslateMatrixArgs &\n  TRotateMatrixArgs &\n  TScaleMatrixArgs;\n\nexport type TQrDecomposeOut = Required<\n  Omit<TComposeMatrixArgs, 'flipX' | 'flipY'>\n>;\n\nexport const isIdentityMatrix = (mat: TMat2D) =>\n  mat.every((value, index) => value === iMatrix[index]);\n\n/**\n * Apply transform t to point p\n * @deprecated use {@link Point#transform}\n * @param  {Point | XY} p The point to transform\n * @param  {Array} t The transform\n * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n * @return {Point} The transformed point\n */\nexport const transformPoint = (\n  p: XY,\n  t: TMat2D,\n  ignoreOffset?: boolean,\n): Point => new Point(p).transform(t, ignoreOffset);\n\n/**\n * Invert transformation t\n * @param {Array} t The transform\n * @return {Array} The inverted transform\n */\nexport const invertTransform = (t: TMat2D): TMat2D => {\n  const a = 1 / (t[0] * t[3] - t[1] * t[2]),\n    r = [a * t[3], -a * t[1], -a * t[2], a * t[0], 0, 0] as TMat2D,\n    { x, y } = new Point(t[4], t[5]).transform(r, true);\n  r[4] = -x;\n  r[5] = -y;\n  return r;\n};\n\n/**\n * Multiply matrix A by matrix B to nest transformations\n * @param  {TMat2D} a First transformMatrix\n * @param  {TMat2D} b Second transformMatrix\n * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n * @return {TMat2D} The product of the two transform matrices\n */\nexport const multiplyTransformMatrices = (\n  a: TMat2D,\n  b: TMat2D,\n  is2x2?: boolean,\n): TMat2D =>\n  [\n    a[0] * b[0] + a[2] * b[1],\n    a[1] * b[0] + a[3] * b[1],\n    a[0] * b[2] + a[2] * b[3],\n    a[1] * b[2] + a[3] * b[3],\n    is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n    is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5],\n  ] as TMat2D;\n\n/**\n * Multiplies {@link matrices} such that a matrix defines the plane for the rest of the matrices **after** it\n *\n * `multiplyTransformMatrixArray([A, B, C, D])` is equivalent to `A(B(C(D)))`\n *\n * @param matrices an array of matrices\n * @param [is2x2] flag to multiply matrices as 2x2 matrices\n * @returns the multiplication product\n */\nexport const multiplyTransformMatrixArray = (\n  matrices: (TMat2D | undefined | null | false)[],\n  is2x2?: boolean,\n) =>\n  matrices.reduceRight(\n    (product: TMat2D, curr) =>\n      curr && product\n        ? multiplyTransformMatrices(curr, product, is2x2)\n        : curr || product,\n    undefined as unknown as TMat2D,\n  ) || iMatrix.concat();\n\nexport const calcPlaneRotation = ([a, b]: TMat2D) =>\n  Math.atan2(b, a) as TRadian;\n\n/**\n * Decomposes standard 2x3 matrix into transform components\n * @param  {TMat2D} a transformMatrix\n * @return {Object} Components of transform\n */\nexport const qrDecompose = (a: TMat2D): TQrDecomposeOut => {\n  const angle = calcPlaneRotation(a),\n    denom = Math.pow(a[0], 2) + Math.pow(a[1], 2),\n    scaleX = Math.sqrt(denom),\n    scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n    skewX = Math.atan2(a[0] * a[2] + a[1] * a[3], denom);\n  return {\n    angle: radiansToDegrees(angle),\n    scaleX,\n    scaleY,\n    skewX: radiansToDegrees(skewX),\n    skewY: 0 as TDegree,\n    translateX: a[4] || 0,\n    translateY: a[5] || 0,\n  };\n};\n\n/**\n * Generate a translation matrix\n *\n * A translation matrix in the form of\n * [ 1 0 x ]\n * [ 0 1 y ]\n * [ 0 0 1 ]\n *\n * See @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#translate for more details\n *\n * @param {number} x translation on X axis\n * @param {number} [y] translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createTranslateMatrix = (x: number, y = 0): TMat2D => [\n  1,\n  0,\n  0,\n  1,\n  x,\n  y,\n];\n\n/**\n * Generate a rotation matrix around around a point (x,y), defaulting to (0,0)\n *\n * A matrix in the form of\n * [cos(a) -sin(a) -x*cos(a)+y*sin(a)+x]\n * [sin(a)  cos(a) -x*sin(a)-y*cos(a)+y]\n * [0       0      1                 ]\n *\n *\n * @param {TDegree} angle rotation in degrees\n * @param {XY} [pivotPoint] pivot point to rotate around\n * @returns {TMat2D} matrix\n */\nexport function createRotateMatrix(\n  { angle = 0 }: TRotateMatrixArgs = {},\n  { x = 0, y = 0 }: Partial<XY> = {},\n): TMat2D {\n  const angleRadiant = degreesToRadians(angle),\n    cosValue = cos(angleRadiant),\n    sinValue = sin(angleRadiant);\n  return [\n    cosValue,\n    sinValue,\n    -sinValue,\n    cosValue,\n    x ? x - (cosValue * x - sinValue * y) : 0,\n    y ? y - (sinValue * x + cosValue * y) : 0,\n  ];\n}\n\n/**\n * Generate a scale matrix around the point (0,0)\n *\n * A matrix in the form of\n * [x 0 0]\n * [0 y 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#scale\n *\n * @param {number} x scale on X axis\n * @param {number} [y] scale on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createScaleMatrix = (x: number, y: number = x): TMat2D => [\n  x,\n  0,\n  0,\n  y,\n  0,\n  0,\n];\n\nexport const angleToSkew = (angle: TDegree) =>\n  Math.tan(degreesToRadians(angle));\n\nexport const skewToAngle = (value: TRadian) =>\n  radiansToDegrees(Math.atan(value));\n\n/**\n * Generate a skew matrix for the X axis\n *\n * A matrix in the form of\n * [1 x 0]\n * [0 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewx\n *\n * @param {TDegree} skewValue translation on X axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewXMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  0,\n  angleToSkew(skewValue),\n  1,\n  0,\n  0,\n];\n\n/**\n * Generate a skew matrix for the Y axis\n *\n * A matrix in the form of\n * [1 0 0]\n * [y 1 0]\n * [0 0 1]\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform#skewy\n *\n * @param {TDegree} skewValue translation on Y axis\n * @returns {TMat2D} matrix\n */\nexport const createSkewYMatrix = (skewValue: TDegree): TMat2D => [\n  1,\n  angleToSkew(skewValue),\n  0,\n  1,\n  0,\n  0,\n];\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet.\n * is called DimensionsTransformMatrix because those properties are the one that influence\n * the size of the resulting box of the object.\n * @param  {Object} options\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @return {Number[]} transform matrix\n */\nexport const calcDimensionsMatrix = ({\n  scaleX = 1,\n  scaleY = 1,\n  flipX = false,\n  flipY = false,\n  skewX = 0 as TDegree,\n  skewY = 0 as TDegree,\n}: TScaleMatrixArgs) => {\n  let matrix = createScaleMatrix(\n    flipX ? -scaleX : scaleX,\n    flipY ? -scaleY : scaleY,\n  );\n  if (skewX) {\n    matrix = multiplyTransformMatrices(matrix, createSkewXMatrix(skewX), true);\n  }\n  if (skewY) {\n    matrix = multiplyTransformMatrices(matrix, createSkewYMatrix(skewY), true);\n  }\n  return matrix;\n};\n\n/**\n * Returns a transform matrix starting from an object of the same kind of\n * the one returned from qrDecompose, useful also if you want to calculate some\n * transformations from an object that is not enlived yet\n * Before changing this function look at: src/benchmarks/calcTransformMatrix.mjs\n * @param  {Object} options\n * @param  {Number} [options.angle]\n * @param  {Number} [options.scaleX]\n * @param  {Number} [options.scaleY]\n * @param  {Boolean} [options.flipX]\n * @param  {Boolean} [options.flipY]\n * @param  {Number} [options.skewX]\n * @param  {Number} [options.skewY]\n * @param  {Number} [options.translateX]\n * @param  {Number} [options.translateY]\n * @return {Number[]} transform matrix\n */\nexport const composeMatrix = (options: TComposeMatrixArgs): TMat2D => {\n  const { translateX = 0, translateY = 0, angle = 0 as TDegree } = options;\n  let matrix = createTranslateMatrix(translateX, translateY);\n  if (angle) {\n    matrix = multiplyTransformMatrices(matrix, createRotateMatrix({ angle }));\n  }\n  const scaleMatrix = calcDimensionsMatrix(options);\n  if (!isIdentityMatrix(scaleMatrix)) {\n    matrix = multiplyTransformMatrices(matrix, scaleMatrix);\n  }\n  return matrix;\n};\n", "import { noop } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport type {\n  Abortable,\n  Constructor,\n  TCrossOrigin,\n  TFiller,\n} from '../../typedefs';\nimport { createImage } from './dom';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { BaseFilter } from '../../filters/BaseFilter';\nimport type { FabricObject as BaseFabricObject } from '../../shapes/Object/Object';\nimport { FabricError, SignalAbortedError } from '../internals/console';\nimport type { Shadow } from '../../Shadow';\n\nexport type LoadImageOptions = Abortable & {\n  /**\n   * cors value for the image loading, default to anonymous\n   */\n  crossOrigin?: TCrossOrigin;\n};\n\n/**\n * Loads image element from given url and resolve it, or catch.\n * @param {String} url URL representing an image\n * @param {LoadImageOptions} [options] image loading options\n * @returns {Promise<HTMLImageElement>} the loaded image.\n */\nexport const loadImage = (\n  url: string,\n  { signal, crossOrigin = null }: LoadImageOptions = {},\n) =>\n  new Promise<HTMLImageElement>(function (resolve, reject) {\n    if (signal && signal.aborted) {\n      return reject(new SignalAbortedError('loadImage'));\n    }\n    const img = createImage();\n    let abort: EventListenerOrEventListenerObject;\n    if (signal) {\n      abort = function (err: Event) {\n        img.src = '';\n        reject(err);\n      };\n      signal.addEventListener('abort', abort, { once: true });\n    }\n    const done = function () {\n      img.onload = img.onerror = null;\n      abort && signal?.removeEventListener('abort', abort);\n      resolve(img);\n    };\n    if (!url) {\n      done();\n      return;\n    }\n    img.onload = done;\n    img.onerror = function () {\n      abort && signal?.removeEventListener('abort', abort);\n      reject(new FabricError(`Error loading ${img.src}`));\n    };\n    crossOrigin && (img.crossOrigin = crossOrigin);\n    img.src = url;\n  });\n\nexport type EnlivenObjectOptions = Abortable & {\n  /**\n   * Method for further parsing of object elements,\n   * called after each fabric object created.\n   */\n  reviver?: <\n    T extends\n      | BaseFabricObject\n      | FabricObject\n      | BaseFilter<string>\n      | Shadow\n      | TFiller,\n  >(\n    serializedObj: Record<string, any>,\n    instance: T,\n  ) => void;\n};\n\n/**\n * @TODO type this correctly.\n * Creates corresponding fabric instances from their object representations\n * @param {Object[]} objects Objects to enliven\n * @param {EnlivenObjectOptions} [options]\n * @param {(serializedObj: object, instance: FabricObject) => any} [options.reviver] Method for further parsing of object elements,\n * called after each fabric object created.\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<FabricObject[]>}\n */\nexport const enlivenObjects = <\n  T extends\n    | BaseFabricObject\n    | FabricObject\n    | BaseFilter<string>\n    | Shadow\n    | TFiller,\n>(\n  objects: any[],\n  { signal, reviver = noop }: EnlivenObjectOptions = {},\n) =>\n  new Promise<T[]>((resolve, reject) => {\n    const instances: T[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    Promise.all(\n      objects.map((obj) =>\n        classRegistry\n          .getClass<\n            Constructor<T> & {\n              fromObject(options: any, context: Abortable): Promise<T>;\n            }\n          >(obj.type)\n          .fromObject(obj, { signal })\n          .then((fabricInstance) => {\n            reviver(obj, fabricInstance);\n            instances.push(fabricInstance);\n            return fabricInstance;\n          }),\n      ),\n    )\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance) => {\n          (instance as FabricObject).dispose &&\n            (instance as FabricObject).dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n\n/**\n * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n * @param {Object} object with properties to enlive ( fill, stroke, clipPath, path )\n * @param {object} [options]\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @returns {Promise<Record<string, FabricObject | TFiller | null>>} the input object with enlived values\n */\nexport const enlivenObjectEnlivables = <\n  R = Record<string, FabricObject | TFiller | null>,\n>(\n  serializedObject: any,\n  { signal }: Abortable = {},\n) =>\n  new Promise<R>((resolve, reject) => {\n    const instances: (FabricObject | TFiller | Shadow)[] = [];\n    signal && signal.addEventListener('abort', reject, { once: true });\n    // enlive every possible property\n    const promises = Object.values(serializedObject).map((value: any) => {\n      if (!value) {\n        return value;\n      }\n      /**\n       * clipPath or shadow or gradient or text on a path or a pattern,\n       * or the backgroundImage or overlayImage of canvas\n       * If we have a type and there is a classe registered for it, we enlive it.\n       * If there is no class registered for it we return the value as is\n       * */\n      if (value.type && classRegistry.has(value.type)) {\n        return enlivenObjects<FabricObject | Shadow | TFiller>([value], {\n          signal,\n        }).then(([enlived]) => {\n          instances.push(enlived);\n          return enlived;\n        });\n      }\n      return value;\n    });\n    const keys = Object.keys(serializedObject);\n    Promise.all(promises)\n      .then((enlived) => {\n        return enlived.reduce((acc, instance, index) => {\n          acc[keys[index]] = instance;\n          return acc;\n        }, {});\n      })\n      .then(resolve)\n      .catch((error) => {\n        // cleanup\n        instances.forEach((instance: any) => {\n          instance.dispose && instance.dispose();\n        });\n        reject(error);\n      })\n      .finally(() => {\n        signal && signal.removeEventListener('abort', reject);\n      });\n  });\n", "/**\n * Populates an object with properties of another object\n * @param {Object} source Source object\n * @param {string[]} properties Properties names to include\n * @returns object populated with the picked keys\n */\nexport const pick = <T extends Record<string, any>>(\n  source: T,\n  keys: (keyof T)[] = [],\n) => {\n  return keys.reduce((o, key) => {\n    if (key in source) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n\nexport const pickBy = <T extends Record<string, any>>(\n  source: T,\n  predicate: <K extends keyof T>(value: T[K], key: K, collection: T) => boolean,\n) => {\n  return (Object.keys(source) as (keyof T)[]).reduce((o, key) => {\n    if (predicate(source[key], key, source)) {\n      o[key] = source[key];\n    }\n    return o;\n  }, {} as Partial<T>);\n};\n", "/**\n * Map of the 148 color names with HEX code\n * @see: https://www.w3.org/TR/css3-color/#svg-color\n */\nexport const ColorNameMap = {\n  aliceblue: '#F0F8FF',\n  antiquewhite: '#FAEBD7',\n  aqua: '#0FF',\n  aquamarine: '#7FFFD4',\n  azure: '#F0FFFF',\n  beige: '#F5F5DC',\n  bisque: '#FFE4C4',\n  black: '#000',\n  blanchedalmond: '#FFEBCD',\n  blue: '#00F',\n  blueviolet: '#8A2BE2',\n  brown: '#A52A2A',\n  burlywood: '#DEB887',\n  cadetblue: '#5F9EA0',\n  chartreuse: '#7FFF00',\n  chocolate: '#D2691E',\n  coral: '#FF7F50',\n  cornflowerblue: '#6495ED',\n  cornsilk: '#FFF8DC',\n  crimson: '#DC143C',\n  cyan: '#0FF',\n  darkblue: '#00008B',\n  darkcyan: '#008B8B',\n  darkgoldenrod: '#B8860B',\n  darkgray: '#A9A9A9',\n  darkgrey: '#A9A9A9',\n  darkgreen: '#006400',\n  darkkhaki: '#BDB76B',\n  darkmagenta: '#8B008B',\n  darkolivegreen: '#556B2F',\n  darkorange: '#FF8C00',\n  darkorchid: '#9932CC',\n  darkred: '#8B0000',\n  darksalmon: '#E9967A',\n  darkseagreen: '#8FBC8F',\n  darkslateblue: '#483D8B',\n  darkslategray: '#2F4F4F',\n  darkslategrey: '#2F4F4F',\n  darkturquoise: '#00CED1',\n  darkviolet: '#9400D3',\n  deeppink: '#FF1493',\n  deepskyblue: '#00BFFF',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1E90FF',\n  firebrick: '#B22222',\n  floralwhite: '#FFFAF0',\n  forestgreen: '#228B22',\n  fuchsia: '#F0F',\n  gainsboro: '#DCDCDC',\n  ghostwhite: '#F8F8FF',\n  gold: '#FFD700',\n  goldenrod: '#DAA520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#ADFF2F',\n  honeydew: '#F0FFF0',\n  hotpink: '#FF69B4',\n  indianred: '#CD5C5C',\n  indigo: '#4B0082',\n  ivory: '#FFFFF0',\n  khaki: '#F0E68C',\n  lavender: '#E6E6FA',\n  lavenderblush: '#FFF0F5',\n  lawngreen: '#7CFC00',\n  lemonchiffon: '#FFFACD',\n  lightblue: '#ADD8E6',\n  lightcoral: '#F08080',\n  lightcyan: '#E0FFFF',\n  lightgoldenrodyellow: '#FAFAD2',\n  lightgray: '#D3D3D3',\n  lightgrey: '#D3D3D3',\n  lightgreen: '#90EE90',\n  lightpink: '#FFB6C1',\n  lightsalmon: '#FFA07A',\n  lightseagreen: '#20B2AA',\n  lightskyblue: '#87CEFA',\n  lightslategray: '#789',\n  lightslategrey: '#789',\n  lightsteelblue: '#B0C4DE',\n  lightyellow: '#FFFFE0',\n  lime: '#0F0',\n  limegreen: '#32CD32',\n  linen: '#FAF0E6',\n  magenta: '#F0F',\n  maroon: '#800000',\n  mediumaquamarine: '#66CDAA',\n  mediumblue: '#0000CD',\n  mediumorchid: '#BA55D3',\n  mediumpurple: '#9370DB',\n  mediumseagreen: '#3CB371',\n  mediumslateblue: '#7B68EE',\n  mediumspringgreen: '#00FA9A',\n  mediumturquoise: '#48D1CC',\n  mediumvioletred: '#C71585',\n  midnightblue: '#191970',\n  mintcream: '#F5FFFA',\n  mistyrose: '#FFE4E1',\n  moccasin: '#FFE4B5',\n  navajowhite: '#FFDEAD',\n  navy: '#000080',\n  oldlace: '#FDF5E6',\n  olive: '#808000',\n  olivedrab: '#6B8E23',\n  orange: '#FFA500',\n  orangered: '#FF4500',\n  orchid: '#DA70D6',\n  palegoldenrod: '#EEE8AA',\n  palegreen: '#98FB98',\n  paleturquoise: '#AFEEEE',\n  palevioletred: '#DB7093',\n  papayawhip: '#FFEFD5',\n  peachpuff: '#FFDAB9',\n  peru: '#CD853F',\n  pink: '#FFC0CB',\n  plum: '#DDA0DD',\n  powderblue: '#B0E0E6',\n  purple: '#800080',\n  rebeccapurple: '#639',\n  red: '#F00',\n  rosybrown: '#BC8F8F',\n  royalblue: '#4169E1',\n  saddlebrown: '#8B4513',\n  salmon: '#FA8072',\n  sandybrown: '#F4A460',\n  seagreen: '#2E8B57',\n  seashell: '#FFF5EE',\n  sienna: '#A0522D',\n  silver: '#C0C0C0',\n  skyblue: '#87CEEB',\n  slateblue: '#6A5ACD',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#FFFAFA',\n  springgreen: '#00FF7F',\n  steelblue: '#4682B4',\n  tan: '#D2B48C',\n  teal: '#008080',\n  thistle: '#D8BFD8',\n  tomato: '#FF6347',\n  turquoise: '#40E0D0',\n  violet: '#EE82EE',\n  wheat: '#F5DEB3',\n  white: '#FFF',\n  whitesmoke: '#F5F5F5',\n  yellow: '#FF0',\n  yellowgreen: '#9ACD32',\n};\n", "import type { TRGBAColorSource } from './typedefs';\n\n/**\n * @param {Number} p\n * @param {Number} q\n * @param {Number} t\n * @return {Number}\n */\nexport const hue2rgb = (p: number, q: number, t: number): number => {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n};\n\n/**\n * Adapted from {@link https://gist.github.com/mjackson/5311256 https://gist.github.com/mjackson}\n * @param {Number} r Red color value\n * @param {Number} g Green color value\n * @param {Number} b Blue color value\n * @param {Number} a Alpha color value pass through\n * @return {TRGBColorSource} Hsl color\n */\nexport const rgb2Hsl = (\n  r: number,\n  g: number,\n  b: number,\n  a: number,\n): TRGBAColorSource => {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const maxValue = Math.max(r, g, b),\n    minValue = Math.min(r, g, b);\n\n  let h!: number, s: number;\n  const l = (maxValue + minValue) / 2;\n\n  if (maxValue === minValue) {\n    h = s = 0; // achromatic\n  } else {\n    const d = maxValue - minValue;\n    s = l > 0.5 ? d / (2 - maxValue - minValue) : d / (maxValue + minValue);\n    switch (maxValue) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), a];\n};\n\nexport const fromAlphaToFloat = (value = '1') =>\n  parseFloat(value) / (value.endsWith('%') ? 100 : 1);\n\n/**\n * Convert a value in the inclusive range [0, 255] to hex\n */\nexport const hexify = (value: number) =>\n  Math.min(Math.round(value), 255).toString(16).toUpperCase().padStart(2, '0');\n\n/**\n * Calculate the grey average value for rgb and pass through alpha\n */\nexport const greyAverage = ([\n  r,\n  g,\n  b,\n  a = 1,\n]: TRGBAColorSource): TRGBAColorSource => {\n  const avg = Math.round(r * 0.3 + g * 0.59 + b * 0.11);\n  return [avg, avg, avg, a];\n};\n", "import { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { ColorNameMap } from './color_map';\nimport { reHSLa, reHex, reRGBa } from './constants';\nimport type { TRGBAColorSource, TColorArg } from './typedefs';\nimport {\n  hue2rgb,\n  hexify,\n  rgb2Hsl,\n  fromAlphaToFloat,\n  greyAverage,\n} from './util';\n\n/**\n * @class Color common color operations\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors colors}\n */\nexport class Color {\n  private declare _source: TRGBAColorSource;\n  isUnrecognised = false;\n\n  /**\n   *\n   * @param {string} [color] optional in hex or rgb(a) or hsl format or from known color list\n   */\n  constructor(color?: TColorArg) {\n    if (!color) {\n      // we default to black as canvas does\n      this.setSource([0, 0, 0, 1]);\n    } else if (color instanceof Color) {\n      this.setSource([...color._source]);\n    } else if (Array.isArray(color)) {\n      const [r, g, b, a = 1] = color;\n      this.setSource([r, g, b, a]);\n    } else {\n      this.setSource(this._tryParsingColor(color));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string} [color] Color value to parse\n   * @returns {TRGBAColorSource}\n   */\n  protected _tryParsingColor(color: string) {\n    if (color in ColorNameMap) {\n      color = ColorNameMap[color as keyof typeof ColorNameMap];\n    }\n    return color === 'transparent'\n      ? ([255, 255, 255, 0] as TRGBAColorSource)\n      : Color.sourceFromHex(color) ||\n          Color.sourceFromRgb(color) ||\n          Color.sourceFromHsl(color) ||\n          // color is not recognized\n          // we default to black as canvas does\n          // eslint-disable-next-line no-constant-binary-expression\n          ((this.isUnrecognised = true) && ([0, 0, 0, 1] as TRGBAColorSource));\n  }\n\n  /**\n   * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @return {TRGBAColorSource}\n   */\n  getSource() {\n    return this._source;\n  }\n\n  /**\n   * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n   * @param {TRGBAColorSource} source\n   */\n  setSource(source: TRGBAColorSource) {\n    this._source = source;\n  }\n\n  /**\n   * Returns color representation in RGB format\n   * @return {String} ex: rgb(0-255,0-255,0-255)\n   */\n  toRgb() {\n    const [r, g, b] = this.getSource();\n    return `rgb(${r},${g},${b})`;\n  }\n\n  /**\n   * Returns color representation in RGBA format\n   * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n   */\n  toRgba() {\n    return `rgba(${this.getSource().join(',')})`;\n  }\n\n  /**\n   * Returns color representation in HSL format\n   * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n   */\n  toHsl() {\n    const [h, s, l] = rgb2Hsl(...this.getSource());\n    return `hsl(${h},${s}%,${l}%)`;\n  }\n\n  /**\n   * Returns color representation in HSLA format\n   * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n   */\n  toHsla() {\n    const [h, s, l, a] = rgb2Hsl(...this.getSource());\n    return `hsla(${h},${s}%,${l}%,${a})`;\n  }\n\n  /**\n   * Returns color representation in HEX format\n   * @return {String} ex: FF5555\n   */\n  toHex() {\n    const fullHex = this.toHexa();\n    return fullHex.slice(0, 6);\n  }\n\n  /**\n   * Returns color representation in HEXA format\n   * @return {String} ex: FF5555CC\n   */\n  toHexa() {\n    const [r, g, b, a] = this.getSource();\n    return `${hexify(r)}${hexify(g)}${hexify(b)}${hexify(Math.round(a * 255))}`;\n  }\n\n  /**\n   * Gets value of alpha channel for this color\n   * @return {Number} 0-1\n   */\n  getAlpha() {\n    return this.getSource()[3];\n  }\n\n  /**\n   * Sets value of alpha channel for this color\n   * @param {Number} alpha Alpha value 0-1\n   * @return {Color} thisArg\n   */\n  setAlpha(alpha: number) {\n    this._source[3] = alpha;\n    return this;\n  }\n\n  /**\n   * Transforms color to its grayscale representation\n   * @return {Color} thisArg\n   */\n  toGrayscale() {\n    this.setSource(greyAverage(this.getSource()));\n    return this;\n  }\n\n  /**\n   * Transforms color to its black and white representation\n   * @param {Number} threshold\n   * @return {Color} thisArg\n   */\n  toBlackWhite(threshold: number) {\n    const [average, , , a] = greyAverage(this.getSource()),\n      bOrW = average < (threshold || 127) ? 0 : 255;\n    this.setSource([bOrW, bOrW, bOrW, a]);\n    return this;\n  }\n\n  /**\n   * Overlays color with another color\n   * @param {String|Color} otherColor\n   * @return {Color} thisArg\n   */\n  overlayWith(otherColor: string | Color) {\n    if (!(otherColor instanceof Color)) {\n      otherColor = new Color(otherColor);\n    }\n\n    const source = this.getSource(),\n      otherAlpha = 0.5,\n      otherSource = otherColor.getSource(),\n      [R, G, B] = source.map((value, index) =>\n        Math.round(value * (1 - otherAlpha) + otherSource[index] * otherAlpha),\n      );\n\n    this.setSource([R, G, B, source[3]]);\n    return this;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {Color}\n   */\n  static fromRgb(color: string): Color {\n    return Color.fromRgba(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromRgba(color: string): Color {\n    return new Color(Color.sourceFromRgb(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromRgb(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reRGBa());\n    if (match) {\n      const [r, g, b] = match.slice(1, 4).map((value) => {\n        const parsedValue = parseFloat(value);\n        return value.endsWith('%')\n          ? Math.round(parsedValue * 2.55)\n          : parsedValue;\n      });\n      return [r, g, b, fromAlphaToFloat(match[4])];\n    }\n  }\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf Color\n   * @return {Color}\n   */\n  static fromHsl(color: string): Color {\n    return Color.fromHsla(color);\n  }\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf Color\n   * @param {String} color\n   * @return {Color}\n   */\n  static fromHsla(color: string): Color {\n    return new Color(Color.sourceFromHsl(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {TRGBAColorSource | undefined} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  static sourceFromHsl(color: string): TRGBAColorSource | undefined {\n    const match = color.match(reHSLa());\n    if (!match) {\n      return;\n    }\n    const match1degrees = Color.parseAngletoDegrees(match[1]);\n\n    const h = (((match1degrees % 360) + 360) % 360) / 360,\n      s = parseFloat(match[2]) / 100,\n      l = parseFloat(match[3]) / 100;\n    let r: number, g: number, b: number;\n\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      const q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n        p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      fromAlphaToFloat(match[4]),\n    ];\n  }\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color Color value ex: FF5555\n   * @return {Color}\n   */\n  static fromHex(color: string): Color {\n    return new Color(Color.sourceFromHex(color));\n  }\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {TRGBAColorSource | undefined} source\n   */\n  static sourceFromHex(color: string): TRGBAColorSource | undefined {\n    if (color.match(reHex())) {\n      const value = color.slice(color.indexOf('#') + 1),\n        isShortNotation = value.length <= 4;\n      let expandedValue: string[];\n      if (isShortNotation) {\n        expandedValue = value.split('').map((hex) => hex + hex);\n      } else {\n        expandedValue = value.match(/.{2}/g)!;\n      }\n      const [r, g, b, a = 255] = expandedValue.map((hexCouple) =>\n        parseInt(hexCouple, 16),\n      );\n      return [r, g, b, a / 255];\n    }\n  }\n\n  /**\n   * Converts a string that could be any angle notation (50deg, 0.5turn, 2rad)\n   * into degrees without the 'deg' suffix\n   * @static\n   * @memberOf Color\n   * @param {String} value ex: 0deg, 0.5turn, 2rad\n   * @return {Number} number in degrees or NaN if inputs are invalid\n   */\n  static parseAngletoDegrees(value: string): number {\n    const lowercase = value.toLowerCase();\n    const numeric = parseFloat(lowercase);\n\n    if (lowercase.includes('rad')) {\n      return radiansToDegrees(numeric);\n    }\n\n    if (lowercase.includes('turn')) {\n      return numeric * 360;\n    }\n\n    // Value is probably just a number already in degrees eg '50'\n    return numeric;\n  }\n}\n", "/**\n * Regex matching color in RGB or RGBA formats (ex: `rgb(0, 0, 0)`, `rgba(255, 100, 10, 0.5)`, `rgba( 255 , 100 , 10 , 0.5 )`, `rgb(1,1,1)`, `rgba(100%, 60%, 10%, 0.5)`)\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb\n * Formal syntax at the time of writing:\n * <rgb()> =\n *  rgb( [ <percentage> | none ]{3} [ / [ <alpha-value> | none ] ]? )  |\n *  rgb( [ <number> | none ]{3} [ / [ <alpha-value> | none ] ]? )\n * <alpha-value> = <number> | <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an rgba or rgb CSS color value\n *\n * /^          # Beginning of the string\n * rgba?       # \"rgb\" or \"rgba\"\n * \\(\\s*       # Opening parenthesis and optional whitespace\n * (\\d{0,3}    # 0 to three digits R channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the first color component\n * %?          # Optional percent sign after the first color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits G channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the second color component\n * %?          # Optional percent sign after the second color component\n * \\s*         # Optional whitespace\n * [\\s|,]      # Separator between color components can be a space or comma\n * \\s*         # Optional whitespace\n * (\\d{0,3}    # 0 to three digits B channel\n *  (?:\\.\\d+)? # Optional decimal with one or more digits\n * )           # End of capturing group for the third color component\n * %?          # Optional percent sign after the third color component\n * \\s*         # Optional whitespace\n * (?:         # Beginning of non-capturing group for alpha value\n *  \\s*        # Optional whitespace\n *  [,/]       # Comma or slash separator for alpha value\n *  \\s*        # Optional whitespace\n *  (\\d{0,3}   # Zero to three digits\n *    (?:\\.\\d+)? # Optional decimal with one or more digits\n *  )          # End of capturing group for alpha value\n *  %?         # Optional percent sign after alpha value\n *  \\s*        # Optional whitespace\n * )?          # End of non-capturing group for alpha value (optional)\n * \\)          # Closing parenthesis\n * $           # End of the string\n *\n * The alpha channel can be in the format 0.4 .7 or 1 or 73%\n *\n * WARNING this regex doesn't fail on off spec colors. it matches everything that could be a color.\n * So the spec does not allow for `rgba(30 , 45%  35, 49%)` but this will work anyways for us\n */\nexport const reRGBa = () =>\n  /^rgba?\\(\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HSL or HSLA formats (ex: hsl(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n * Also matching rgba(r g b / a) as per new specs\n * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl\n * Formal syntax at the time of writing:\n * <hsl()> =\n *   hsl( [ <hue> | none ] [ <percentage> | none ] [ <percentage> | none ] [ / [ <alpha-value> | none ] ]? )\n *\n * <hue> =\n *   <number>  |\n *   <angle>\n *\n * <alpha-value> =\n *   <number>      |\n *   <percentage>\n *\n * For learners this is how you can read this regex\n * Regular expression for matching an hsla or hsl CSS color value\n *\n * /^hsla?\\(         // Matches the beginning of the string and the opening parenthesis of \"hsl\" or \"hsla\"\n * \\s*               // Matches any whitespace characters (space, tab, etc.) zero or more times\n * (\\d{0,3}          // Hue: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Hue: Optional (non capture group) decimal with one or more digits.\n * (?:deg|turn|rad)? // Hue: Optionally include suffix deg or turn or rad\n * )                 // Hue: End capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Saturation: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Saturation: Optional decimal with one or more digits in a non-capturing group\n * %?)               // Saturation: match optional % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * [\\s|,]            // Matches a space, tab or comma\n * \\s*               // Matches any whitespace characters zero or more times\n * (\\d{0,3}          // Lightness: 0 to three digits - start capture in a group\n * (?:\\.\\d+)?        // Lightness: Optional decimal with one or more digits in a non-capturing group\n * %?)                // Lightness: match % character and end capture group\n * \\s*               // Matches any whitespace characters zero or more times\n * (?:               // Alpha: Begins a non-capturing group for the alpha value\n *   \\s*             // Matches any whitespace characters zero or more times\n *   [,/]            // Matches a comma or forward slash\n *   \\s*             // Matches any whitespace characters zero or more times\n *   (\\d*(?:\\.\\d+)?%?) // Matches zero or more digits, optionally followed by a decimal point and one or more digits, followed by an optional percentage sign and captures it in a group\n *   \\s*             // Matches any whitespace characters zero or more times\n * )?                // Makes the alpha value group optional\n * \\)                // Matches the closing parenthesis\n * $/i               // Matches the end of the string and sets the regular expression to case-insensitive mode\n *\n * WARNING this regex doesn't fail on off spec colors. It matches everything that could be a color.\n * So the spec does not allow `hsl(30 , 45%  35, 49%)` but this will work anyways for us.\n */\nexport const reHSLa = () =>\n  /^hsla?\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?(?:deg|turn|rad)?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*[\\s|,]\\s*(\\d{0,3}(?:\\.\\d+)?%?)\\s*(?:\\s*[,/]\\s*(\\d*(?:\\.\\d+)?%?)\\s*)?\\)$/i;\n\n/**\n * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n */\nexport const reHex = () => /^#?(([0-9a-f]){3,4}|([0-9a-f]{2}){3,4})$/i;\n", "/**\n * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n * @param {number|string} number number to operate on\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {number}\n */\nexport const toFixed = (number: number | string, fractionDigits: number) =>\n  parseFloat(Number(number).toFixed(fractionDigits));\n", "import { Color } from '../../color/Color';\nimport { config } from '../../config';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, NONE } from '../../constants';\nimport type {\n  TBBox,\n  TMat2D,\n  SVGElementName,\n  SupportedSVGUnit,\n} from '../../typedefs';\nimport { toFixed } from './toFixed';\n\n/**\n * Returns array of attributes for given svg that fabric parses\n * @param {SVGElementName} type Type of svg element (eg. 'circle')\n * @return {Array} string names of supported attributes\n */\nexport const getSvgAttributes = (type: SVGElementName) => {\n  const commonAttributes = ['instantiated_by_use', 'style', 'id', 'class'];\n  switch (type) {\n    case 'linearGradient':\n      return commonAttributes.concat([\n        'x1',\n        'y1',\n        'x2',\n        'y2',\n        'gradientUnits',\n        'gradientTransform',\n      ]);\n    case 'radialGradient':\n      return commonAttributes.concat([\n        'gradientUnits',\n        'gradientTransform',\n        'cx',\n        'cy',\n        'r',\n        'fx',\n        'fy',\n        'fr',\n      ]);\n    case 'stop':\n      return commonAttributes.concat(['offset', 'stop-color', 'stop-opacity']);\n  }\n  return commonAttributes;\n};\n\n/**\n * Converts from attribute value to pixel value if applicable.\n * Returns converted pixels or original value not converted.\n * @param {string} value number to operate on\n * @param {number} fontSize\n * @return {number}\n */\nexport const parseUnit = (value: string, fontSize = DEFAULT_SVG_FONT_SIZE) => {\n  const unit = /\\D{0,2}$/.exec(value),\n    number = parseFloat(value);\n  const dpi = config.DPI;\n  switch (unit?.[0] as SupportedSVGUnit) {\n    case 'mm':\n      return (number * dpi) / 25.4;\n\n    case 'cm':\n      return (number * dpi) / 2.54;\n\n    case 'in':\n      return number * dpi;\n\n    case 'pt':\n      return (number * dpi) / 72; // or * 4 / 3\n\n    case 'pc':\n      return ((number * dpi) / 72) * 12; // or * 16\n\n    case 'em':\n      return number * fontSize;\n\n    default:\n      return number;\n  }\n};\n\nexport type MeetOrSlice = 'meet' | 'slice';\n\nexport type MinMidMax = 'Min' | 'Mid' | 'Max' | 'none';\n\nexport type TPreserveArParsed = {\n  meetOrSlice: MeetOrSlice;\n  alignX: MinMidMax;\n  alignY: MinMidMax;\n};\n\n// align can be either none or undefined or a combination of mid/max\nconst parseAlign = (align: string): MinMidMax[] => {\n  //divide align in alignX and alignY\n  if (align && align !== NONE) {\n    return [align.slice(1, 4) as MinMidMax, align.slice(5, 8) as MinMidMax];\n  } else if (align === NONE) {\n    return [align, align];\n  }\n  return ['Mid', 'Mid'];\n};\n\n/**\n * Parse preserveAspectRatio attribute from element\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n * @param {string} attribute to be parsed\n * @return {Object} an object containing align and meetOrSlice attribute\n */\nexport const parsePreserveAspectRatioAttribute = (\n  attribute: string,\n): TPreserveArParsed => {\n  const [firstPart, secondPart] = attribute.trim().split(' ') as [\n    MinMidMax,\n    MeetOrSlice | undefined,\n  ];\n  const [alignX, alignY] = parseAlign(firstPart);\n  return {\n    meetOrSlice: secondPart || 'meet',\n    alignX,\n    alignY,\n  };\n};\n\n/**\n * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n * @param {TMat2D} transform an array with 6 numbers\n * @return {String} transform matrix for svg\n */\nexport const matrixToSVG = (transform: TMat2D) =>\n  'matrix(' +\n  transform\n    .map((value) => toFixed(value, config.NUM_FRACTION_DIGITS))\n    .join(' ') +\n  ')';\n\n/**\n * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values\n * we work around it by \"moving\" alpha channel into opacity attribute and setting fill's alpha to 1\n * @param prop\n * @param value\n * @param {boolean} inlineStyle The default is inline style, the separator used is \":\", The other is \"=\"\n * @returns\n */\nexport const colorPropToSVG = (\n  prop: string,\n  value?: any,\n  inlineStyle = true,\n) => {\n  let colorValue;\n  let opacityValue;\n  if (!value) {\n    colorValue = 'none';\n  } else if (value.toLive) {\n    colorValue = `url(#SVGID_${value.id})`;\n  } else {\n    const color = new Color(value),\n      opacity = color.getAlpha();\n\n    colorValue = color.toRgb();\n    if (opacity !== 1) {\n      opacityValue = opacity.toString();\n    }\n  }\n  if (inlineStyle) {\n    return `${prop}: ${colorValue}; ${\n      opacityValue ? `${prop}-opacity: ${opacityValue}; ` : ''\n    }`;\n  } else {\n    return `${prop}=\"${colorValue}\" ${\n      opacityValue ? `${prop}-opacity=\"${opacityValue}\" ` : ''\n    }`;\n  }\n};\n\nexport const createSVGRect = (\n  color: string,\n  { left, top, width, height }: TBBox,\n  precision = config.NUM_FRACTION_DIGITS,\n) => {\n  const svgColor = colorPropToSVG(FILL, color, false);\n  const [x, y, w, h] = [left, top, width, height].map((value) =>\n    toFixed(value, precision),\n  );\n  return `<rect ${svgColor} x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\"></rect>`;\n};\n", "import type { FabricObject } from '../shapes/Object/Object';\nimport type { TFiller } from '../typedefs';\nimport type { FabricText } from '../shapes/Text/Text';\nimport type { Pattern } from '../Pattern';\nimport type { Path } from '../shapes/Path';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\n\nexport const isFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && (filler as TFiller).toLive !== undefined;\n};\n\nexport const isSerializableFiller = (\n  filler: TFiller | string | null,\n): filler is TFiller => {\n  return !!filler && typeof (filler as TFiller).toObject === 'function';\n};\n\nexport const isPattern = (filler: TFiller): filler is Pattern => {\n  return (\n    !!filler && (filler as Pattern).offsetX !== undefined && 'source' in filler\n  );\n};\n\nexport const isTextObject = (\n  fabricObject?: FabricObject,\n): fabricObject is FabricText => {\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as FabricText)._renderText === 'function'\n  );\n};\n\nexport const isPath = (fabricObject?: FabricObject): fabricObject is Path => {\n  // we could use instanceof but that would mean pulling in Text code for a simple check\n  // @todo discuss what to do and how to do\n  return (\n    !!fabricObject &&\n    typeof (fabricObject as Path)._renderPathCommands === 'function'\n  );\n};\n\nexport const isActiveSelection = (\n  fabricObject?: FabricObject,\n): fabricObject is ActiveSelection =>\n  !!fabricObject && 'multiSelectionStacking' in fabricObject;\n", "/**\n * Returns element scroll offsets\n * @param {HTMLElement} element Element to operate on\n * @return {Object} Object with left/top values\n */\nexport function getScrollLeftTop(element: HTMLElement | null) {\n  const doc = element && getDocumentFromElement(element);\n  let left = 0,\n    top = 0;\n  if (!element || !doc) {\n    return { left, top };\n  }\n  let elementLoop: HTMLElement | Document | ShadowRoot = element;\n  const docElement = doc.documentElement,\n    body = doc.body || {\n      scrollLeft: 0,\n      scrollTop: 0,\n    };\n  // While loop checks (and then sets element to) .parentNode OR .host\n  //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n  //  but the .parentNode of a root ShadowDOM node will always be null, instead\n  //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n  while (\n    elementLoop &&\n    (elementLoop.parentNode || (elementLoop as unknown as ShadowRoot).host)\n  ) {\n    elementLoop = (elementLoop.parentNode ||\n      (elementLoop as unknown as ShadowRoot).host) as\n      | HTMLElement\n      | Document\n      | ShadowRoot;\n    if (elementLoop === doc) {\n      left = body.scrollLeft || docElement.scrollLeft || 0;\n      top = body.scrollTop || docElement.scrollTop || 0;\n    } else {\n      left += (elementLoop as HTMLElement).scrollLeft || 0;\n      top += (elementLoop as HTMLElement).scrollTop || 0;\n    }\n\n    if (\n      elementLoop.nodeType === 1 &&\n      (elementLoop as HTMLElement).style.position === 'fixed'\n    ) {\n      break;\n    }\n  }\n\n  return { left, top };\n}\n\nexport const getDocumentFromElement = (el: HTMLElement) =>\n  el.ownerDocument || null;\n\nexport const getWindowFromElement = (el: HTMLElement) =>\n  el.ownerDocument?.defaultView || null;\n", "import { NONE } from '../../constants';\nimport type { TSize } from '../../typedefs';\nimport {\n  getDocumentFromElement,\n  getWindowFromElement,\n  getScrollLeftTop,\n} from '../../util/dom_misc';\n\nexport const setCanvasDimensions = (\n  el: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  { width, height }: TSize,\n  retinaScaling = 1,\n) => {\n  el.width = width;\n  el.height = height;\n  if (retinaScaling > 1) {\n    el.setAttribute('width', (width * retinaScaling).toString());\n    el.setAttribute('height', (height * retinaScaling).toString());\n    ctx.scale(retinaScaling, retinaScaling);\n  }\n};\n\nexport type CSSDimensions = {\n  width: number | string;\n  height: number | string;\n};\n\nexport const setCSSDimensions = (\n  el: HTMLElement,\n  { width, height }: Partial<CSSDimensions>,\n) => {\n  width && (el.style.width = typeof width === 'number' ? `${width}px` : width);\n  height &&\n    (el.style.height = typeof height === 'number' ? `${height}px` : height);\n};\n\n/**\n * Returns offset for a given element\n * @param {HTMLElement} element Element to get offset for\n * @return {Object} Object with \"left\" and \"top\" properties\n */\nexport function getElementOffset(element: HTMLElement) {\n  const doc = element && getDocumentFromElement(element),\n    offset = { left: 0, top: 0 };\n\n  if (!doc) {\n    return offset;\n  }\n  const elemStyle: CSSStyleDeclaration =\n    getWindowFromElement(element)?.getComputedStyle(element, null) ||\n    ({} as CSSStyleDeclaration);\n  offset.left += parseInt(elemStyle.borderLeftWidth, 10) || 0;\n  offset.top += parseInt(elemStyle.borderTopWidth, 10) || 0;\n  offset.left += parseInt(elemStyle.paddingLeft, 10) || 0;\n  offset.top += parseInt(elemStyle.paddingTop, 10) || 0;\n\n  let box = { left: 0, top: 0 };\n\n  const docElem = doc.documentElement;\n  if (typeof element.getBoundingClientRect !== 'undefined') {\n    box = element.getBoundingClientRect();\n  }\n\n  const scrollLeftTop = getScrollLeftTop(element);\n\n  return {\n    left:\n      box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n    top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top,\n  };\n}\n\n/**\n * Makes element unselectable\n * @param {HTMLElement} element Element to make unselectable\n * @return {HTMLElement} Element that was passed in\n */\nexport function makeElementUnselectable(element: HTMLElement) {\n  if (typeof element.onselectstart !== 'undefined') {\n    element.onselectstart = () => false;\n  }\n  element.style.userSelect = NONE;\n  return element;\n}\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport type { CSSDimensions } from './util';\nimport { setCSSDimensions, getElementOffset } from './util';\nimport { createCanvasElement, isHTMLCanvas } from '../../util/misc/dom';\nimport { setCanvasDimensions } from './util';\nimport { FabricError } from '../../util/internals/console';\n\nexport type CanvasItem = {\n  el: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n};\n\nexport class StaticCanvasDOMManager {\n  /**\n   * Keeps a copy of the canvas style before setting retina scaling and other potions\n   * in order to return it to original state on dispose\n   * @type string\n   */\n  private _originalCanvasStyle?: string;\n\n  lower: CanvasItem;\n\n  constructor(arg0?: string | HTMLCanvasElement) {\n    const el = this.createLowerCanvas(arg0);\n    this.lower = { el, ctx: el.getContext('2d')! };\n  }\n\n  protected createLowerCanvas(arg0?: HTMLCanvasElement | string) {\n    // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n    const el = isHTMLCanvas(arg0)\n      ? arg0\n      : (arg0 &&\n          (getFabricDocument().getElementById(arg0) as HTMLCanvasElement)) ||\n        createCanvasElement();\n    if (el.hasAttribute('data-fabric')) {\n      throw new FabricError(\n        'Trying to initialize a canvas that has already been initialized. Did you forget to dispose the canvas?',\n      );\n    }\n    this._originalCanvasStyle = el.style.cssText;\n    el.setAttribute('data-fabric', 'main');\n    el.classList.add('lower-canvas');\n    return el;\n  }\n\n  cleanupDOM({ width, height }: TSize) {\n    const { el } = this.lower;\n    // restore canvas style and attributes\n    el.classList.remove('lower-canvas');\n    el.removeAttribute('data-fabric');\n    // restore canvas size to original size in case retina scaling was applied\n    el.setAttribute('width', `${width}`);\n    el.setAttribute('height', `${height}`);\n    el.style.cssText = this._originalCanvasStyle || '';\n    this._originalCanvasStyle = undefined;\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    const { el, ctx } = this.lower;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>) {\n    setCSSDimensions(this.lower.el, size);\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   */\n  calcOffset() {\n    return getElementOffset(this.lower.el);\n  }\n\n  dispose() {\n    getEnv().dispose(this.lower.el);\n    // @ts-expect-error disposing\n    delete this.lower;\n  }\n}\n", "import { iMatrix } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TFiller, TMat2D, TOptions } from '../typedefs';\n\ninterface CanvasDrawableOptions {\n  /**\n   * if set to false background image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  backgroundVpt: boolean;\n\n  /**\n   * Background color of canvas instance.\n   * @type {(String|TFiller)}\n   * @default\n   */\n  backgroundColor: TFiller | string;\n\n  /**\n   * Background image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as background, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  backgroundImage?: FabricObject;\n\n  /**\n   * if set to false overlay image is not affected by viewport transform\n   * @since 1.6.3\n   * @type Boolean\n   * @todo we should really find a different way to do this\n   * @default\n   */\n  overlayVpt: boolean;\n\n  /**\n   * Overlay color of canvas instance.\n   * @since 1.3.9\n   * @type {(String|TFiller)}\n   * @default\n   */\n  overlayColor: TFiller | string;\n\n  /**\n   * Overlay image of canvas instance.\n   * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n   * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n   * vale. As an alternative you can disable image objectCaching\n   * @type FabricObject\n   * @default\n   */\n  overlayImage?: FabricObject;\n}\n\ninterface CanvasRenderingOptions {\n  /**\n   * Indicates whether {@link StaticCanvas#add}, {@link StaticCanvas#insertAt} and {@link StaticCanvas#remove},\n   * {@link StaticCanvas#moveTo}, {@link StaticCanvas#clear} and many more, should also re-render canvas.\n   * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n   * since the renders are queued and executed one per frame.\n   * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n   * Left default to true to do not break documentation and old app, fiddles.\n   * @type Boolean\n   * @default\n   */\n  renderOnAddRemove: boolean;\n\n  /**\n   * Based on vptCoords and object.aCoords, skip rendering of objects that\n   * are not included in current viewport.\n   * May greatly help in applications with crowded canvas and use of zoom/pan\n   * If One of the corner of the bounding box of the object is on the canvas\n   * the objects get rendered.\n   * @type Boolean\n   * @default true\n   */\n  skipOffscreen: boolean;\n\n  /**\n   * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n   * @type Boolean\n   * @default\n   */\n  enableRetinaScaling: boolean;\n\n  /**\n   * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n   * @type Boolean\n   * @default\n   */\n  imageSmoothingEnabled: boolean;\n\n  /**\n   * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n   * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n   * top left corner of the canvas.\n   * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n   * @type FabricObject\n   */\n  clipPath?: FabricObject;\n}\n\nexport interface CanvasExportOptions {\n  /**\n   * Indicates whether toObject/toDatalessObject should include default values\n   * if set to false, takes precedence over the object value.\n   * @type Boolean\n   * @default\n   */\n  includeDefaultValues: boolean;\n\n  /**\n   * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,\n   * a zoomed canvas will then produce zoomed SVG output.\n   * @type Boolean\n   * @default\n   */\n  svgViewportTransformation: boolean;\n}\n\nexport interface StaticCanvasOptions\n  extends CanvasDrawableOptions,\n    CanvasRenderingOptions,\n    CanvasExportOptions {\n  /**\n   * Width in virtual/logical pixels of the canvas.\n   * The canvas can be larger than width if retina scaling is active\n   * @type number\n   */\n  width: number;\n\n  /**\n   * Height in virtual/logical pixels of the canvas.\n   * The canvas can be taller than width if retina scaling is active\n   * @type height\n   */\n  height: number;\n\n  /**\n   * Indicates whether object controls (borders/controls) are rendered above overlay image\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: boolean;\n\n  /**\n   * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n   * It gives PRIORITY to DOM scrolling, it doesn't make it always possible.\n   * If is true, when using a touch event on the canvas, the canvas will scroll if scroll is possible.\n   * If we are in drawing mode or if we are selecting an object the canvas preventDefault and so it won't scroll\n   * @type Boolean\n   * @default\n   *\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: boolean;\n\n  /**\n   * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n   * @type Array\n   * @example <caption>Default transform</caption>\n   * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n   * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n   * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n   * @default\n   */\n  viewportTransform: TMat2D;\n}\n\nexport const staticCanvasDefaults: TOptions<StaticCanvasOptions> = {\n  backgroundVpt: true,\n  backgroundColor: '',\n  overlayVpt: true,\n  overlayColor: '',\n\n  includeDefaultValues: true,\n  svgViewportTransformation: true,\n\n  renderOnAddRemove: true,\n  skipOffscreen: true,\n  enableRetinaScaling: true,\n  imageSmoothingEnabled: true,\n\n  /**\n   * @todo move to Canvas\n   */\n  controlsAboveOverlay: false,\n  /**\n   * @todo move to Canvas\n   */\n  allowTouchScrolling: false,\n\n  viewportTransform: [...iMatrix],\n};\n", "import { config } from '../config';\nimport { CENTER, VERSION } from '../constants';\nimport type { CanvasEvents, StaticCanvasEvents } from '../EventTypeDefs';\nimport type { Gradient } from '../gradient/Gradient';\nimport { createCollectionMixin, isCollection } from '../Collection';\nimport { CommonMethods } from '../CommonMethods';\nimport type { Pattern } from '../Pattern';\nimport { Point } from '../Point';\nimport type { TCachedFabricObject } from '../shapes/Object/Object';\nimport type {\n  Abortable,\n  Constructor,\n  TCornerPoint,\n  TDataUrlOptions,\n  TFiller,\n  TMat2D,\n  TSize,\n  TSVGReviver,\n  TToCanvasElementOptions,\n  TValidToObjectMethod,\n  TOptions,\n} from '../typedefs';\nimport {\n  cancelAnimFrame,\n  requestAnimFrame,\n} from '../util/animation/AnimationFrameProvider';\nimport { runningAnimations } from '../util/animation/AnimationRegistry';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor, toDataURL } from '../util/misc/dom';\nimport { invertTransform, transformPoint } from '../util/misc/matrix';\nimport type { EnlivenObjectOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { toFixed } from '../util/misc/toFixed';\nimport { isFiller, isPattern, isTextObject } from '../util/typeAssertions';\nimport { StaticCanvasDOMManager } from './DOMManagers/StaticCanvasDOMManager';\nimport type { CSSDimensions } from './DOMManagers/util';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\nimport { staticCanvasDefaults } from './StaticCanvasOptions';\nimport { log, FabricError } from '../util/internals/console';\nimport { getDevicePixelRatio } from '../env';\n\n/**\n * Having both options in TCanvasSizeOptions set to true transform the call in a calcOffset\n * Better try to restrict with types to avoid confusion.\n */\nexport type TCanvasSizeOptions =\n  | {\n      backstoreOnly?: true;\n      cssOnly?: false;\n    }\n  | {\n      backstoreOnly?: false;\n      cssOnly?: true;\n    };\n\nexport type TSVGExportOptions = {\n  suppressPreamble?: boolean;\n  viewBox?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  encoding?: 'UTF-8'; // test Encoding type and see what happens\n  width?: string;\n  height?: string;\n  reviver?: TSVGReviver;\n};\n\n/**\n * Static canvas class\n * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n * @fires before:render\n * @fires after:render\n * @fires canvas:cleared\n * @fires object:added\n * @fires object:removed\n */\n// TODO: fix `EventSpec` inheritance https://github.com/microsoft/TypeScript/issues/26154#issuecomment-1366616260\nexport class StaticCanvas<\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    EventSpec extends StaticCanvasEvents = StaticCanvasEvents,\n  >\n  extends createCollectionMixin(CommonMethods<CanvasEvents>)\n  implements StaticCanvasOptions\n{\n  declare width: number;\n  declare height: number;\n\n  // background\n  declare backgroundVpt: boolean;\n  declare backgroundColor: TFiller | string;\n  declare backgroundImage?: FabricObject;\n  // overlay\n  declare overlayVpt: boolean;\n  declare overlayColor: TFiller | string;\n  declare overlayImage?: FabricObject;\n\n  declare clipPath?: FabricObject;\n\n  declare includeDefaultValues: boolean;\n\n  // rendering config\n  declare renderOnAddRemove: boolean;\n  declare skipOffscreen: boolean;\n  declare enableRetinaScaling: boolean;\n  declare imageSmoothingEnabled: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare controlsAboveOverlay: boolean;\n\n  /**\n   * @todo move to Canvas\n   */\n  declare allowTouchScrolling: boolean;\n\n  declare viewportTransform: TMat2D;\n\n  /**\n   * The viewport bounding box in scene plane coordinates, see {@link calcViewportBoundaries}\n   */\n  declare vptCoords: TCornerPoint;\n\n  /**\n   * A reference to the canvas actual HTMLCanvasElement.\n   * Can be use to read the raw pixels, but never write or manipulate\n   * @type HTMLCanvasElement\n   */\n  get lowerCanvasEl() {\n    return this.elements.lower?.el;\n  }\n\n  get contextContainer() {\n    return this.elements.lower?.ctx;\n  }\n\n  /**\n   * If true the Canvas is in the process or has been disposed/destroyed.\n   * No more rendering operation will be executed on this canvas.\n   * @type boolean\n   */\n  declare destroyed?: boolean;\n\n  /**\n   * Started the process of disposing but not done yet.\n   * WIll likely complete the render cycle already scheduled but stopping adding more.\n   * @type boolean\n   */\n  declare disposed?: boolean;\n\n  declare _offset: { left: number; top: number };\n  protected declare hasLostContext: boolean;\n  protected declare nextRenderHandle: number;\n\n  declare elements: StaticCanvasDOMManager;\n\n  /**\n   * When true control drawing is skipped.\n   * This boolean is used to avoid toDataURL to export controls.\n   * Usage of this boolean to build up other flows and features is not supported\n   * @type Boolean\n   * @default false\n   */\n  protected declare skipControlsDrawing: boolean;\n\n  static ownDefaults = staticCanvasDefaults;\n\n  // reference to\n  protected declare __cleanupTask?: {\n    (): void;\n    kill: (reason?: any) => void;\n  };\n\n  static getDefaults(): Record<string, any> {\n    return StaticCanvas.ownDefaults;\n  }\n\n  constructor(\n    el?: string | HTMLCanvasElement,\n    options: TOptions<StaticCanvasOptions> = {},\n  ) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof StaticCanvas).getDefaults(),\n    );\n    this.set(options);\n    this.initElements(el);\n    this._setDimensionsImpl({\n      width: this.width || this.elements.lower.el.width || 0,\n      height: this.height || this.elements.lower.el.height || 0,\n    });\n    this.skipControlsDrawing = false;\n    this.viewportTransform = [...this.viewportTransform];\n    this.calcViewportBoundaries();\n  }\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new StaticCanvasDOMManager(el);\n  }\n\n  add(...objects: FabricObject[]) {\n    const size = super.add(...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const size = super.insertAt(index, ...objects);\n    objects.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return size;\n  }\n\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    removed.length > 0 && this.renderOnAddRemove && this.requestRenderAll();\n    return removed;\n  }\n\n  _onObjectAdded(obj: FabricObject) {\n    if (obj.canvas && (obj.canvas as StaticCanvas) !== this) {\n      log(\n        'warn',\n        'Canvas is trying to add an object that belongs to a different canvas.\\n' +\n          'Resulting to default behavior: removing object from previous canvas and adding to new canvas',\n      );\n      obj.canvas.remove(obj);\n    }\n    obj._set('canvas', this);\n    obj.setCoords();\n    this.fire('object:added', { target: obj });\n    obj.fire('added', { target: this });\n  }\n\n  _onObjectRemoved(obj: FabricObject) {\n    obj._set('canvas', undefined);\n    this.fire('object:removed', { target: obj });\n    obj.fire('removed', { target: this });\n  }\n\n  _onStackOrderChanged() {\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n   * @return {Number} retinaScaling if applied, otherwise 1;\n   */\n  getRetinaScaling() {\n    return this.enableRetinaScaling ? getDevicePixelRatio() : 1;\n  }\n\n  /**\n   * Calculates canvas element offset relative to the document\n   * This method is also attached as \"resize\" event handler of window\n   */\n  calcOffset() {\n    return (this._offset = this.elements.calcOffset());\n  }\n\n  /**\n   * Returns canvas width (in px)\n   * @return {Number}\n   */\n  getWidth(): number {\n    return this.width;\n  }\n\n  /**\n   * Returns canvas height (in px)\n   * @return {Number}\n   */\n  getHeight(): number {\n    return this.height;\n  }\n\n  /**\n   * Sets width of this canvas instance\n   * @param {Number|String} value                         Value to set width to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setWidth(\n    value: TSize['width'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setWidth(\n    value: CSSDimensions['width'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setWidth(value: number, options?: never) {\n    return this.setDimensions({ width: value }, options);\n  }\n\n  /**s\n   * Sets height of this canvas instance\n   * @param {Number|String} value                         Value to set height to\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   * @deprecated will be removed in 7.0\n   */\n  setHeight(\n    value: TSize['height'],\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setHeight(\n    value: CSSDimensions['height'],\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setHeight(value: CSSDimensions['height'], options?: never) {\n    return this.setDimensions({ height: value }, options);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: Partial<TSize | CSSDimensions>,\n    { cssOnly = false, backstoreOnly = false }: TCanvasSizeOptions = {},\n  ) {\n    if (!cssOnly) {\n      const size = {\n        width: this.width,\n        height: this.height,\n        ...(dimensions as Partial<TSize>),\n      };\n      this.elements.setDimensions(size, this.getRetinaScaling());\n      this.hasLostContext = true;\n      this.width = size.width;\n      this.height = size.height;\n    }\n    if (!backstoreOnly) {\n      this.elements.setCSSDimensions(dimensions);\n    }\n\n    this.calcOffset();\n  }\n\n  /**\n   * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n   * @param {Object}        dimensions                    Object with width/height properties\n   * @param {Number|String} [dimensions.width]            Width of canvas element\n   * @param {Number|String} [dimensions.height]           Height of canvas element\n   * @param {Object}        [options]                     Options object\n   * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n   * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n   */\n  setDimensions(\n    dimensions: Partial<CSSDimensions>,\n    options?: { cssOnly?: true; backstoreOnly?: false },\n  ): void;\n  setDimensions(\n    dimensions: Partial<TSize>,\n    options?: { backstoreOnly?: true; cssOnly?: false },\n  ): void;\n  setDimensions(dimensions: Partial<TSize>, options?: never): void;\n  setDimensions(\n    dimensions: Partial<TSize | CSSDimensions>,\n    options?: TCanvasSizeOptions,\n  ) {\n    this._setDimensionsImpl(dimensions, options);\n    if (!options || !options.cssOnly) {\n      this.requestRenderAll();\n    }\n  }\n\n  /**\n   * Returns canvas zoom level\n   * @return {Number}\n   */\n  getZoom() {\n    return this.viewportTransform[0];\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    this.viewportTransform = vpt;\n    this.calcViewportBoundaries();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Sets zoom level of this canvas instance, the zoom centered around point\n   * meaning that following zoom to point with the same point will have the visual\n   * effect of the zoom originating from that point. The point won't move.\n   * It has nothing to do with canvas center or visual center of the viewport.\n   * @param {Point} point to zoom with respect to\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  zoomToPoint(point: Point, value: number) {\n    // TODO: just change the scale, preserve other transformations\n    const before = point,\n      vpt: TMat2D = [...this.viewportTransform];\n    const newPoint = transformPoint(point, invertTransform(vpt));\n    vpt[0] = value;\n    vpt[3] = value;\n    const after = transformPoint(newPoint, vpt);\n    vpt[4] += before.x - after.x;\n    vpt[5] += before.y - after.y;\n    this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Sets zoom level of this canvas instance\n   * @param {Number} value to set zoom to, less than 1 zooms out\n   */\n  setZoom(value: number) {\n    this.zoomToPoint(new Point(0, 0), value);\n  }\n\n  /**\n   * Pan viewport so as to place point at top left corner of canvas\n   * @param {Point} point to move to\n   */\n  absolutePan(point: Point) {\n    const vpt: TMat2D = [...this.viewportTransform];\n    vpt[4] = -point.x;\n    vpt[5] = -point.y;\n    return this.setViewportTransform(vpt);\n  }\n\n  /**\n   * Pans viewpoint relatively\n   * @param {Point} point (position vector) to move by\n   */\n  relativePan(point: Point) {\n    return this.absolutePan(\n      new Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5],\n      ),\n    );\n  }\n\n  /**\n   * Returns &lt;canvas> element corresponding to this instance\n   * @return {HTMLCanvasElement}\n   */\n  getElement(): HTMLCanvasElement {\n    return this.elements.lower.el;\n  }\n\n  /**\n   * Clears specified context of canvas element\n   * @param {CanvasRenderingContext2D} ctx Context to clear\n   */\n  clearContext(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  /**\n   * Returns context of canvas where objects are drawn\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    return this.elements.lower.ctx;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    this.remove(...this.getObjects());\n    this.backgroundImage = undefined;\n    this.overlayImage = undefined;\n    this.backgroundColor = '';\n    this.overlayColor = '';\n    this.clearContext(this.getContext());\n    this.fire('canvas:cleared');\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Renders the canvas\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    this.renderCanvas(this.getContext(), this._objects);\n  }\n\n  /**\n   * Function created to be instance bound at initialization\n   * used in requestAnimationFrame rendering\n   * Let the fabricJS call it. If you call it manually you could have more\n   * animationFrame stacking on to of each other\n   * for an imperative rendering, use canvas.renderAll\n   * @private\n   */\n  renderAndReset() {\n    this.nextRenderHandle = 0;\n    this.renderAll();\n  }\n\n  /**\n   * Append a renderAll request to next animation frame.\n   * unless one is already in progress, in that case nothing is done\n   * a boolean flag will avoid appending more.\n   */\n  requestRenderAll() {\n    if (!this.nextRenderHandle && !this.disposed && !this.destroyed) {\n      this.nextRenderHandle = requestAnimFrame(() => this.renderAndReset());\n    }\n  }\n\n  /**\n   * Calculate the position of the 4 corner of canvas with current viewportTransform.\n   * helps to determinate when an object is in the current rendering viewport\n   */\n  calcViewportBoundaries(): TCornerPoint {\n    const width = this.width,\n      height = this.height,\n      iVpt = invertTransform(this.viewportTransform),\n      a = transformPoint({ x: 0, y: 0 }, iVpt),\n      b = transformPoint({ x: width, y: height }, iVpt),\n      // we don't support vpt flipping\n      // but the code is robust enough to mostly work with flipping\n      min = a.min(b),\n      max = a.max(b);\n    return (this.vptCoords = {\n      tl: min,\n      tr: new Point(max.x, min.y),\n      bl: new Point(min.x, max.y),\n      br: max,\n    });\n  }\n\n  cancelRequestedRender() {\n    if (this.nextRenderHandle) {\n      cancelAnimFrame(this.nextRenderHandle);\n      this.nextRenderHandle = 0;\n    }\n  }\n\n  drawControls(_ctx: CanvasRenderingContext2D) {\n    // Static canvas has no controls\n  }\n\n  /**\n   * Renders background, objects, overlay and controls.\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {Array} objects to render\n   */\n  renderCanvas(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    if (this.destroyed) {\n      return;\n    }\n\n    const v = this.viewportTransform,\n      path = this.clipPath;\n    this.calcViewportBoundaries();\n    this.clearContext(ctx);\n    ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;\n    // @ts-expect-error node-canvas stuff\n    ctx.patternQuality = 'best';\n    this.fire('before:render', { ctx });\n    this._renderBackground(ctx);\n\n    ctx.save();\n    //apply viewport transform once for all rendering process\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this._renderObjects(ctx, objects);\n    ctx.restore();\n    if (!this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    if (path) {\n      path._set('canvas', this);\n      // needed to setup a couple of variables\n      // todo migrate to the newer one\n      path.shouldCache();\n      path._transformDone = true;\n      (path as TCachedFabricObject).renderCache({ forClipping: true });\n      this.drawClipPathOnCanvas(ctx, path as TCachedFabricObject);\n    }\n    this._renderOverlay(ctx);\n    if (this.controlsAboveOverlay && !this.skipControlsDrawing) {\n      this.drawControls(ctx);\n    }\n    this.fire('after:render', { ctx });\n\n    if (this.__cleanupTask) {\n      this.__cleanupTask();\n      this.__cleanupTask = undefined;\n    }\n  }\n\n  /**\n   * Paint the cached clipPath on the lowerCanvasEl\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawClipPathOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    clipPath: TCachedFabricObject,\n  ) {\n    const v = this.viewportTransform;\n    ctx.save();\n    ctx.transform(...v);\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4;\n    ctx.globalCompositeOperation = 'destination-in';\n    clipPath.transform(ctx);\n    ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n    ctx.drawImage(\n      clipPath._cacheCanvas,\n      -clipPath.cacheTranslationX,\n      -clipPath.cacheTranslationY,\n    );\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} objects to render\n   */\n  _renderObjects(ctx: CanvasRenderingContext2D, objects: FabricObject[]) {\n    for (let i = 0, len = objects.length; i < len; ++i) {\n      objects[i] && objects[i].render(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {string} property 'background' or 'overlay'\n   */\n  _renderBackgroundOrOverlay(\n    ctx: CanvasRenderingContext2D,\n    property: 'background' | 'overlay',\n  ) {\n    const fill = this[`${property}Color`],\n      object = this[`${property}Image`],\n      v = this.viewportTransform,\n      needsVpt = this[`${property}Vpt`];\n    if (!fill && !object) {\n      return;\n    }\n    const isAFiller = isFiller(fill);\n    if (fill) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(0, 0);\n      ctx.lineTo(this.width, 0);\n      ctx.lineTo(this.width, this.height);\n      ctx.lineTo(0, this.height);\n      ctx.closePath();\n      ctx.fillStyle = isAFiller ? fill.toLive(ctx /* this */)! : fill;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      if (isAFiller) {\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        const m = ((fill as Gradient<'linear'>).gradientTransform ||\n          (fill as Pattern).patternTransform) as TMat2D;\n        m && ctx.transform(...m);\n      }\n      ctx.fill();\n      ctx.restore();\n    }\n    if (object) {\n      ctx.save();\n      const { skipOffscreen } = this;\n      // if the object doesn't move with the viewport,\n      // the offscreen concept does not apply;\n      this.skipOffscreen = needsVpt;\n      if (needsVpt) {\n        ctx.transform(...v);\n      }\n      object.render(ctx);\n      this.skipOffscreen = skipOffscreen;\n      ctx.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'background');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderOverlay(ctx: CanvasRenderingContext2D) {\n    this._renderBackgroundOrOverlay(ctx, 'overlay');\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * Returned value is an object with top and left properties\n   * @return {Object} object with \"top\" and \"left\" number values\n   * @deprecated migrate to `getCenterPoint`\n   */\n  getCenter() {\n    return {\n      top: this.height / 2,\n      left: this.width / 2,\n    };\n  }\n\n  /**\n   * Returns coordinates of a center of canvas.\n   * @return {Point}\n   */\n  getCenterPoint() {\n    return new Point(this.width / 2, this.height / 2);\n  }\n\n  /**\n   * Centers object horizontally in the canvas\n   */\n  centerObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getCenterPoint().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically in the canvas\n   * @param {FabricObject} object Object to center vertically\n   */\n  centerObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object vertically and horizontally in the canvas\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  centerObject(object: FabricObject) {\n    return this._centerObject(object, this.getCenterPoint());\n  }\n\n  /**\n   * Centers object vertically and horizontally in the viewport\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObject(object: FabricObject) {\n    return this._centerObject(object, this.getVpCenter());\n  }\n\n  /**\n   * Centers object horizontally in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectH(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(this.getVpCenter().x, object.getCenterPoint().y),\n    );\n  }\n\n  /**\n   * Centers object Vertically in the viewport, object.top is unchanged\n   * @param {FabricObject} object Object to center vertically and horizontally\n   */\n  viewportCenterObjectV(object: FabricObject) {\n    return this._centerObject(\n      object,\n      new Point(object.getCenterPoint().x, this.getVpCenter().y),\n    );\n  }\n\n  /**\n   * Calculate the point in canvas that correspond to the center of actual viewport.\n   * @return {Point} vpCenter, viewport center\n   */\n  getVpCenter(): Point {\n    return transformPoint(\n      this.getCenterPoint(),\n      invertTransform(this.viewportTransform),\n    );\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object Object to center\n   * @param {Point} center Center point\n   */\n  _centerObject(object: FabricObject, center: Point) {\n    object.setXY(center, CENTER, CENTER);\n    object.setCoords();\n    this.renderOnAddRemove && this.requestRenderAll();\n  }\n\n  /**\n   * Returns dataless JSON representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {String} json string\n   */\n  toDatalessJSON(propertiesToInclude?: string[]) {\n    return this.toDatalessObject(propertiesToInclude);\n  }\n\n  /**\n   * Returns object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toObject', propertiesToInclude);\n  }\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * var json = canvas.toJSON();\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Returns dataless object representation of canvas\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: string[]) {\n    return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n  }\n\n  /**\n   * @private\n   */\n  _toObjectMethod(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const clipPath = this.clipPath;\n    const clipPathData =\n      clipPath && !clipPath.excludeFromExport\n        ? this._toObject(clipPath, methodName, propertiesToInclude)\n        : null;\n    return {\n      version: VERSION,\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      objects: this._objects\n        .filter((object) => !object.excludeFromExport)\n        .map((instance) =>\n          this._toObject(instance, methodName, propertiesToInclude),\n        ),\n      ...this.__serializeBgOverlay(methodName, propertiesToInclude),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    let originalValue;\n\n    if (!this.includeDefaultValues) {\n      originalValue = instance.includeDefaultValues;\n      instance.includeDefaultValues = false;\n    }\n\n    const object = instance[methodName](propertiesToInclude);\n    if (!this.includeDefaultValues) {\n      instance.includeDefaultValues = !!originalValue;\n    }\n    return object;\n  }\n\n  /**\n   * @private\n   */\n  __serializeBgOverlay(\n    methodName: TValidToObjectMethod,\n    propertiesToInclude?: string[],\n  ) {\n    const data: any = {},\n      bgImage = this.backgroundImage,\n      overlayImage = this.overlayImage,\n      bgColor = this.backgroundColor,\n      overlayColor = this.overlayColor;\n\n    if (isFiller(bgColor)) {\n      if (!bgColor.excludeFromExport) {\n        data.background = bgColor.toObject(propertiesToInclude);\n      }\n    } else if (bgColor) {\n      data.background = bgColor;\n    }\n\n    if (isFiller(overlayColor)) {\n      if (!overlayColor.excludeFromExport) {\n        data.overlay = overlayColor.toObject(propertiesToInclude);\n      }\n    } else if (overlayColor) {\n      data.overlay = overlayColor;\n    }\n\n    if (bgImage && !bgImage.excludeFromExport) {\n      data.backgroundImage = this._toObject(\n        bgImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n    if (overlayImage && !overlayImage.excludeFromExport) {\n      data.overlayImage = this._toObject(\n        overlayImage,\n        methodName,\n        propertiesToInclude,\n      );\n    }\n\n    return data;\n  }\n\n  /* _TO_SVG_START_ */\n\n  declare svgViewportTransformation: boolean;\n\n  /**\n   * Returns SVG representation of canvas\n   * @function\n   * @param {Object} [options] Options object for SVG output\n   * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included\n   * @param {Object} [options.viewBox] SVG viewbox object\n   * @param {Number} [options.viewBox.x] x-coordinate of viewbox\n   * @param {Number} [options.viewBox.y] y-coordinate of viewbox\n   * @param {Number} [options.viewBox.width] Width of viewbox\n   * @param {Number} [options.viewBox.height] Height of viewbox\n   * @param {String} [options.encoding=UTF-8] Encoding of SVG output\n   * @param {String} [options.width] desired width of svg with or without units\n   * @param {String} [options.height] desired height of svg with or without units\n   * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.\n   * @return {String} SVG string\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}\n   * @example <caption>Normal SVG output</caption>\n   * var svg = canvas.toSVG();\n   * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>\n   * var svg = canvas.toSVG({suppressPreamble: true});\n   * @example <caption>SVG output with viewBox attribute</caption>\n   * var svg = canvas.toSVG({\n   *   viewBox: {\n   *     x: 100,\n   *     y: 100,\n   *     width: 200,\n   *     height: 300\n   *   }\n   * });\n   * @example <caption>SVG output with different encoding (default: UTF-8)</caption>\n   * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});\n   * @example <caption>Modify SVG output with reviver function</caption>\n   * var svg = canvas.toSVG(null, function(svg) {\n   *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');\n   * });\n   */\n  toSVG(options: TSVGExportOptions = {}, reviver?: TSVGReviver) {\n    options.reviver = reviver;\n    const markup: string[] = [];\n\n    this._setSVGPreamble(markup, options);\n    this._setSVGHeader(markup, options);\n    if (this.clipPath) {\n      markup.push(`<g clip-path=\"url(#${this.clipPath.clipPathId})\" >\\n`);\n    }\n    this._setSVGBgOverlayColor(markup, 'background');\n    this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);\n    this._setSVGObjects(markup, reviver);\n    if (this.clipPath) {\n      markup.push('</g>\\n');\n    }\n    this._setSVGBgOverlayColor(markup, 'overlay');\n    this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);\n\n    markup.push('</svg>');\n\n    return markup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _setSVGPreamble(markup: string[], options: TSVGExportOptions): void {\n    if (options.suppressPreamble) {\n      return;\n    }\n    markup.push(\n      '<?xml version=\"1.0\" encoding=\"',\n      options.encoding || 'UTF-8',\n      '\" standalone=\"no\" ?>\\n',\n      '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ',\n      '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n',\n    );\n  }\n\n  /**\n   * @private\n   */\n  _setSVGHeader(markup: string[], options: TSVGExportOptions): void {\n    const width = options.width || `${this.width}`,\n      height = options.height || `${this.height}`,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS,\n      optViewBox = options.viewBox;\n    let viewBox: string;\n    if (optViewBox) {\n      viewBox = `viewBox=\"${optViewBox.x} ${optViewBox.y} ${optViewBox.width} ${optViewBox.height}\" `;\n    } else if (this.svgViewportTransformation) {\n      const vpt = this.viewportTransform;\n      viewBox = `viewBox=\"${toFixed(\n        -vpt[4] / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS)} ${toFixed(\n        this.width / vpt[0],\n        NUM_FRACTION_DIGITS,\n      )} ${toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS)}\" `;\n    } else {\n      viewBox = `viewBox=\"0 0 ${this.width} ${this.height}\" `;\n    }\n\n    markup.push(\n      '<svg ',\n      'xmlns=\"http://www.w3.org/2000/svg\" ',\n      'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ',\n      'version=\"1.1\" ',\n      'width=\"',\n      width,\n      '\" ',\n      'height=\"',\n      height,\n      '\" ',\n      viewBox,\n      'xml:space=\"preserve\">\\n',\n      '<desc>Created with Fabric.js ',\n      VERSION,\n      '</desc>\\n',\n      '<defs>\\n',\n      this.createSVGFontFacesMarkup(),\n      this.createSVGRefElementsMarkup(),\n      this.createSVGClipPathMarkup(options),\n      '</defs>\\n',\n    );\n  }\n\n  createSVGClipPathMarkup(options: TSVGExportOptions): string {\n    const clipPath = this.clipPath;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      return `<clipPath id=\"${clipPath.clipPathId}\" >\\n${clipPath.toClipPathSVG(\n        options.reviver,\n      )}</clipPath>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Creates markup containing SVG referenced elements like patterns, gradients etc.\n   * @return {String}\n   */\n  createSVGRefElementsMarkup(): string {\n    return (['background', 'overlay'] as const)\n      .map((prop) => {\n        const fill = this[`${prop}Color`];\n        if (isFiller(fill)) {\n          const shouldTransform = this[`${prop}Vpt`],\n            vpt = this.viewportTransform,\n            object = {\n              // otherwise circular dependency\n              isType: () => false,\n              width: this.width / (shouldTransform ? vpt[0] : 1),\n              height: this.height / (shouldTransform ? vpt[3] : 1),\n            };\n          return fill.toSVG(object as FabricObject, {\n            additionalTransform: shouldTransform ? matrixToSVG(vpt) : '',\n          });\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Creates markup containing SVG font faces,\n   * font URLs for font faces must be collected by developers\n   * and are not extracted from the DOM by fabricjs\n   * @param {Array} objects Array of fabric objects\n   * @return {String}\n   */\n  createSVGFontFacesMarkup(): string {\n    const objects: FabricObject[] = [],\n      fontList: Record<string, boolean> = {},\n      fontPaths = config.fontPaths;\n\n    this._objects.forEach(function add(object) {\n      objects.push(object);\n      if (isCollection(object)) {\n        object._objects.forEach(add);\n      }\n    });\n\n    objects.forEach((obj) => {\n      if (!isTextObject(obj)) {\n        return;\n      }\n      const { styles, fontFamily } = obj;\n      if (fontList[fontFamily] || !fontPaths[fontFamily]) {\n        return;\n      }\n      fontList[fontFamily] = true;\n      if (!styles) {\n        return;\n      }\n      Object.values(styles).forEach((styleRow) => {\n        Object.values(styleRow).forEach(({ fontFamily = '' }) => {\n          if (!fontList[fontFamily] && fontPaths[fontFamily]) {\n            fontList[fontFamily] = true;\n          }\n        });\n      });\n    });\n\n    const fontListMarkup = Object.keys(fontList)\n      .map(\n        (fontFamily) =>\n          `\\t\\t@font-face {\\n\\t\\t\\tfont-family: '${fontFamily}';\\n\\t\\t\\tsrc: url('${fontPaths[fontFamily]}');\\n\\t\\t}\\n`,\n      )\n      .join('');\n\n    if (fontListMarkup) {\n      return `\\t<style type=\"text/css\"><![CDATA[\\n${fontListMarkup}]]></style>\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObjects(markup: string[], reviver?: TSVGReviver) {\n    this.forEachObject((fabricObject) => {\n      if (fabricObject.excludeFromExport) {\n        return;\n      }\n      this._setSVGObject(markup, fabricObject, reviver);\n    });\n  }\n\n  /**\n   * This is its own function because the Canvas ( non static ) requires extra code here\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    markup.push(instance.toSVG(reviver));\n  }\n\n  /**\n   * @private\n   */\n  _setSVGBgOverlayImage(\n    markup: string[],\n    property: 'overlayImage' | 'backgroundImage',\n    reviver?: TSVGReviver,\n  ) {\n    const bgOrOverlay = this[property];\n    if (bgOrOverlay && !bgOrOverlay.excludeFromExport && bgOrOverlay.toSVG) {\n      markup.push(bgOrOverlay.toSVG(reviver));\n    }\n  }\n\n  /**\n   * @TODO this seems to handle patterns but fail at gradients.\n   * @private\n   */\n  _setSVGBgOverlayColor(markup: string[], property: 'background' | 'overlay') {\n    const filler = this[`${property}Color`];\n    if (!filler) {\n      return;\n    }\n    if (isFiller(filler)) {\n      const repeat = (filler as Pattern).repeat || '',\n        finalWidth = this.width,\n        finalHeight = this.height,\n        shouldInvert = this[`${property}Vpt`],\n        additionalTransform = shouldInvert\n          ? matrixToSVG(invertTransform(this.viewportTransform))\n          : '';\n      markup.push(\n        `<rect transform=\"${additionalTransform} translate(${finalWidth / 2},${\n          finalHeight / 2\n        })\" x=\"${filler.offsetX - finalWidth / 2}\" y=\"${\n          filler.offsetY - finalHeight / 2\n        }\" width=\"${\n          (repeat === 'repeat-y' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).width\n            : finalWidth\n        }\" height=\"${\n          (repeat === 'repeat-x' || repeat === 'no-repeat') && isPattern(filler)\n            ? (filler.source as HTMLImageElement).height\n            : finalHeight\n        }\" fill=\"url(#SVGID_${filler.id})\"></rect>\\n`,\n      );\n    } else {\n      markup.push(\n        '<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ',\n        'fill=\"',\n        filler,\n        '\"',\n        '></rect>\\n',\n      );\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   *\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   *\n   * @param {String|Object} json JSON string or object\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @param {Object} [options] options\n   * @param {AbortSignal} [options.signal] see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @return {Promise<Canvas | StaticCanvas>} instance\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json).then((canvas) => canvas.requestRenderAll());\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * }).then((canvas) => {\n   *   ... canvas is restored, add your code.\n   * });\n   *\n   */\n  loadFromJSON(\n    json: string | Record<string, any>,\n    reviver?: EnlivenObjectOptions['reviver'],\n    { signal }: Abortable = {},\n  ): Promise<this> {\n    if (!json) {\n      return Promise.reject(new FabricError('`json` is undefined'));\n    }\n\n    // parse json if it wasn't already\n    const serialized = typeof json === 'string' ? JSON.parse(json) : json;\n    const {\n      objects = [],\n      backgroundImage,\n      background,\n      overlayImage,\n      overlay,\n      clipPath,\n    } = serialized;\n    const renderOnAddRemove = this.renderOnAddRemove;\n    this.renderOnAddRemove = false;\n\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, {\n        reviver,\n        signal,\n      }),\n      enlivenObjectEnlivables(\n        {\n          backgroundImage,\n          backgroundColor: background,\n          overlayImage,\n          overlayColor: overlay,\n          clipPath,\n        },\n        { signal },\n      ),\n    ]).then(([enlived, enlivedMap]) => {\n      this.clear();\n      this.add(...enlived);\n      this.set(serialized);\n      this.set(enlivedMap);\n      this.renderOnAddRemove = renderOnAddRemove;\n      return this;\n    });\n  }\n\n  /**\n   * Clones canvas instance\n   * @param {string[]} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone(properties: string[]) {\n    const data = this.toObject(properties);\n    const canvas = this.cloneWithoutData();\n    return canvas.loadFromJSON(data);\n  }\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions since loadFromJSON does not affect canvas size.\n   */\n  cloneWithoutData() {\n    const el = createCanvasElementFor(this);\n    return new (this.constructor as Constructor<this>)(el);\n  }\n\n  /**\n   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n   * @param {Object} [options] Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   * @see {@link https://jsfiddle.net/xsjua1rd/ demo}\n   * @example <caption>Generate jpeg dataURL with lower quality</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'jpeg',\n   *   quality: 0.8\n   * });\n   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   left: 100,\n   *   top: 100,\n   *   width: 200,\n   *   height: 200\n   * });\n   * @example <caption>Generate double scaled png dataURL</caption>\n   * var dataURL = canvas.toDataURL({\n   *   format: 'png',\n   *   multiplier: 2\n   * });\n   * @example <caption>Generate dataURL with objects that overlap a specified object</caption>\n   * var myObject;\n   * var dataURL = canvas.toDataURL({\n   *   filter: (object) => object.isContainedWithinObject(myObject) || object.intersectsWithObject(myObject)\n   * });\n   */\n  toDataURL(options = {} as TDataUrlOptions): string {\n    const {\n      format = 'png',\n      quality = 1,\n      multiplier = 1,\n      enableRetinaScaling = false,\n    } = options;\n    const finalMultiplier =\n      multiplier * (enableRetinaScaling ? this.getRetinaScaling() : 1);\n\n    return toDataURL(\n      this.toCanvasElement(finalMultiplier, options),\n      format,\n      quality,\n    );\n  }\n\n  /**\n   * Create a new HTMLCanvas element painted with the current canvas content.\n   * No need to resize the actual one or repaint it.\n   * Will transfer object ownership to a new canvas, paint it, and set everything back.\n   * This is an intermediary step used to get to a dataUrl but also it is useful to\n   * create quick image copies of a canvas without passing for the dataUrl string\n   * @param {Number} [multiplier] a zoom factor.\n   * @param {Object} [options] Cropping informations\n   * @param {Number} [options.left] Cropping left offset.\n   * @param {Number} [options.top] Cropping top offset.\n   * @param {Number} [options.width] Cropping width.\n   * @param {Number} [options.height] Cropping height.\n   * @param {(object: fabric.Object) => boolean} [options.filter] Function to filter objects.\n   */\n  toCanvasElement(\n    multiplier = 1,\n    { width, height, left, top, filter } = {} as TToCanvasElementOptions,\n  ): HTMLCanvasElement {\n    const scaledWidth = (width || this.width) * multiplier,\n      scaledHeight = (height || this.height) * multiplier,\n      zoom = this.getZoom(),\n      originalWidth = this.width,\n      originalHeight = this.height,\n      originalSkipControlsDrawing = this.skipControlsDrawing,\n      newZoom = zoom * multiplier,\n      vp = this.viewportTransform,\n      translateX = (vp[4] - (left || 0)) * multiplier,\n      translateY = (vp[5] - (top || 0)) * multiplier,\n      newVp = [newZoom, 0, 0, newZoom, translateX, translateY] as TMat2D,\n      originalRetina = this.enableRetinaScaling,\n      canvasEl = createCanvasElementFor({\n        width: scaledWidth,\n        height: scaledHeight,\n      }),\n      objectsToRender = filter\n        ? this._objects.filter((obj) => filter(obj))\n        : this._objects;\n    this.enableRetinaScaling = false;\n    this.viewportTransform = newVp;\n    this.width = scaledWidth;\n    this.height = scaledHeight;\n    this.skipControlsDrawing = true;\n    this.calcViewportBoundaries();\n    this.renderCanvas(canvasEl.getContext('2d')!, objectsToRender);\n    this.viewportTransform = vp;\n    this.width = originalWidth;\n    this.height = originalHeight;\n    this.calcViewportBoundaries();\n    this.enableRetinaScaling = originalRetina;\n    this.skipControlsDrawing = originalSkipControlsDrawing;\n    return canvasEl;\n  }\n\n  /**\n   * Waits until rendering has settled to destroy the canvas\n   * @returns {Promise<boolean>} a promise resolving to `true` once the canvas has been destroyed or to `false` if the canvas has was already destroyed\n   * @throws if aborted by a consequent call\n   */\n  dispose() {\n    !this.disposed &&\n      this.elements.cleanupDOM({ width: this.width, height: this.height });\n    runningAnimations.cancelByCanvas(this);\n    this.disposed = true;\n    return new Promise<boolean>((resolve, reject) => {\n      const task = () => {\n        this.destroy();\n        resolve(true);\n      };\n      task.kill = reject;\n      if (this.__cleanupTask) {\n        this.__cleanupTask.kill('aborted');\n      }\n\n      if (this.destroyed) {\n        resolve(false);\n      } else if (this.nextRenderHandle) {\n        this.__cleanupTask = task;\n      } else {\n        task();\n      }\n    });\n  }\n\n  /**\n   * Clears the canvas element, disposes objects and frees resources.\n   *\n   * Invoked as part of the **async** operation of {@link dispose}.\n   *\n   * **CAUTION**:\n   *\n   * This method is **UNSAFE**.\n   * You may encounter a race condition using it if there's a requested render.\n   * Call this method only if you are sure rendering has settled.\n   * Consider using {@link dispose} as it is **SAFE**\n   *\n   * @private\n   */\n  destroy() {\n    this.destroyed = true;\n    this.cancelRequestedRender();\n    this.forEachObject((object) => object.dispose());\n    this._objects = [];\n    if (this.backgroundImage) {\n      this.backgroundImage.dispose();\n    }\n    this.backgroundImage = undefined;\n    if (this.overlayImage) {\n      this.overlayImage.dispose();\n    }\n    this.overlayImage = undefined;\n    this.elements.dispose();\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String} string representation of an instance\n   */\n  toString() {\n    return `#<Canvas (${this.complexity()}): { objects: ${\n      this._objects.length\n    } }>`;\n  }\n}\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport { getScrollLeftTop } from './dom_misc';\n\nconst touchEvents = ['touchstart', 'touchmove', 'touchend'];\n\nfunction getTouchInfo(event: TouchEvent | MouseEvent): MouseEvent | Touch {\n  const touchProp = (event as TouchEvent).changedTouches;\n  if (touchProp && touchProp[0]) {\n    return touchProp[0];\n  }\n  return event as MouseEvent;\n}\n\nexport const getPointer = (event: TPointerEvent): Point => {\n  const element = event.target as HTMLElement,\n    scroll = getScrollLeftTop(element),\n    _evt = getTouchInfo(event);\n  return new Point(_evt.clientX + scroll.left, _evt.clientY + scroll.top);\n};\n\nexport const isTouchEvent = (event: TPointerEvent) =>\n  touchEvents.includes(event.type) ||\n  (event as PointerEvent).pointerType === 'touch';\n\nexport const stopEvent = (e: Event) => {\n  e.preventDefault();\n  e.stopPropagation();\n};\n", "import type { XY } from '../../Point';\nimport type { TBBox } from '../../typedefs';\n\n/**\n * Calculates bounding box (left, top, width, height) from given `points`\n * @param {XY[]} points\n * @return {Object} Object with left, top, width, height properties\n */\nexport const makeBoundingBoxFromPoints = (points: XY[]): TBBox => {\n  let left = 0,\n    top = 0,\n    width = 0,\n    height = 0;\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const { x, y } = points[i];\n    if (x > width || !i) width = x;\n    if (x < left || !i) left = x;\n    if (y > height || !i) height = y;\n    if (y < top || !i) top = y;\n  }\n\n  return {\n    left,\n    top,\n    width: width - left,\n    height: height - top,\n  };\n};\n", "import { Point } from '../../Point';\nimport { CENTER } from '../../constants';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { makeBoundingBoxFromPoints } from './boundingBoxFromPoints';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from './matrix';\n\n/**\n * given an object and a transform, apply the inverse transform to the object,\n * this is equivalent to remove from that object that transformation, so that\n * added in a space with the removed transform, the object will be the same as before.\n * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n * Removing from an object a transform that rotate by 30deg is like rotating by 30deg\n * in the opposite direction.\n * This util is used to add objects inside transformed groups or nested groups.\n * @param {FabricObject} object the object you want to transform\n * @param {TMat2D} transform the destination transform\n */\nexport const removeTransformFromObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const inverted = invertTransform(transform),\n    finalTransform = multiplyTransformMatrices(\n      inverted,\n      object.calcOwnMatrix(),\n    );\n  applyTransformToObject(object, finalTransform);\n};\n\n/**\n * given an object and a transform, apply the transform to the object.\n * this is equivalent to change the space where the object is drawn.\n * Adding to an object a transform that scale by 2 is like scaling it by 2.\n * This is used when removing an object from an active selection for example.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const addTransformToObject = (object: FabricObject, transform: TMat2D) =>\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(transform, object.calcOwnMatrix()),\n  );\n\n/**\n * discard an object transform state and apply the one from the matrix.\n * @param {FabricObject} object the object you want to transform\n * @param {Array} transform the destination transform\n */\nexport const applyTransformToObject = (\n  object: FabricObject,\n  transform: TMat2D,\n) => {\n  const { translateX, translateY, scaleX, scaleY, ...otherOptions } =\n      qrDecompose(transform),\n    center = new Point(translateX, translateY);\n  object.flipX = false;\n  object.flipY = false;\n  Object.assign(object, otherOptions);\n  object.set({ scaleX, scaleY });\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n/**\n * reset an object transform state to neutral. Top and left are not accounted for\n * @param  {FabricObject} target object to transform\n */\nexport const resetObjectTransform = (target: FabricObject) => {\n  target.scaleX = 1;\n  target.scaleY = 1;\n  target.skewX = 0;\n  target.skewY = 0;\n  target.flipX = false;\n  target.flipY = false;\n  target.rotate(0);\n};\n\n/**\n * Extract Object transform values\n * @param  {FabricObject} target object to read from\n * @return {Object} Components of transform\n */\nexport const saveObjectTransform = (target: FabricObject) => ({\n  scaleX: target.scaleX,\n  scaleY: target.scaleY,\n  skewX: target.skewX,\n  skewY: target.skewY,\n  angle: target.angle,\n  left: target.left,\n  flipX: target.flipX,\n  flipY: target.flipY,\n  top: target.top,\n});\n\n/**\n * given a width and height, return the size of the bounding box\n * that can contains the box with width/height with applied transform.\n * Use to calculate the boxes around objects for controls.\n * @param {Number} width\n * @param {Number} height\n * @param {TMat2D} t\n * @returns {Point} size\n */\nexport const sizeAfterTransform = (\n  width: number,\n  height: number,\n  t: TMat2D,\n) => {\n  const dimX = width / 2,\n    dimY = height / 2,\n    points = [\n      new Point(-dimX, -dimY),\n      new Point(dimX, -dimY),\n      new Point(-dimX, dimY),\n      new Point(dimX, dimY),\n    ].map((p) => p.transform(t)),\n    bbox = makeBoundingBoxFromPoints(points);\n  return new Point(bbox.width, bbox.height);\n};\n", "import { iMatrix } from '../../constants';\nimport type { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/Object';\nimport type { TMat2D } from '../../typedefs';\nimport { invertTransform, multiplyTransformMatrices } from './matrix';\nimport { applyTransformToObject } from './objectTransforms';\n\n/**\n * We are actually looking for the transformation from the destination plane to the source plane (change of basis matrix)\\\n * The object will exist on the destination plane and we want it to seem unchanged by it so we invert the destination matrix (`to`) and then apply the source matrix (`from`)\n * @param [from]\n * @param [to]\n * @returns\n */\nexport const calcPlaneChangeMatrix = (\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n) => multiplyTransformMatrices(invertTransform(to), from);\n\n/**\n * Sends a point from the source coordinate plane to the destination coordinate plane.\\\n * From the canvas/viewer's perspective the point remains unchanged.\n *\n * @example <caption>Send point from canvas plane to group plane</caption>\n * var obj = new Rect({ left: 20, top: 20, width: 60, height: 60, strokeWidth: 0 });\n * var group = new Group([obj], { strokeWidth: 0 });\n * var sentPoint1 = sendPointToPlane(new Point(50, 50), undefined, group.calcTransformMatrix());\n * var sentPoint2 = sendPointToPlane(new Point(50, 50), iMatrix, group.calcTransformMatrix());\n * console.log(sentPoint1, sentPoint2) //  both points print (0,0) which is the center of group\n *\n * @param {Point} point\n * @param {TMat2D} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `point` exists in the canvas coordinate plane.\n * @param {TMat2D} [to] destination plane matrix to contain object. Passing `undefined` means `point` should be sent to the canvas coordinate plane.\n * @returns {Point} transformed point\n */\nexport const sendPointToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to));\n\n/**\n * See {@link sendPointToPlane}\n */\nexport const sendVectorToPlane = (\n  point: Point,\n  from: TMat2D = iMatrix,\n  to: TMat2D = iMatrix,\n): Point => point.transform(calcPlaneChangeMatrix(from, to), true);\n\n/**\n *\n * A util that abstracts applying transform to objects.\\\n * Sends `object` to the destination coordinate plane by applying the relevant transformations.\\\n * Changes the space/plane where `object` is drawn.\\\n * From the canvas/viewer's perspective `object` remains unchanged.\n *\n * @example <caption>Move clip path from one object to another while preserving it's appearance as viewed by canvas/viewer</caption>\n * let obj, obj2;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * // render\n * sendObjectToPlane(clipPath, obj.calcTransformMatrix(), obj2.calcTransformMatrix());\n * obj.clipPath = undefined;\n * obj2.clipPath = clipPath;\n * // render, clipPath now clips obj2 but seems unchanged from the eyes of the viewer\n *\n * @example <caption>Clip an object's clip path with an existing object</caption>\n * let obj, existingObj;\n * let clipPath = new Circle({ radius: 50 });\n * obj.clipPath = clipPath;\n * let transformTo = multiplyTransformMatrices(obj.calcTransformMatrix(), clipPath.calcTransformMatrix());\n * sendObjectToPlane(existingObj, existingObj.group?.calcTransformMatrix(), transformTo);\n * clipPath.clipPath = existingObj;\n *\n * @param {FabricObject} object\n * @param {Matrix} [from] plane matrix containing object. Passing `undefined` is equivalent to passing the identity matrix, which means `object` is a direct child of canvas.\n * @param {Matrix} [to] destination plane matrix to contain object. Passing `undefined` means `object` should be sent to the canvas coordinate plane.\n * @returns {Matrix} the transform matrix that was applied to `object`\n */\nexport const sendObjectToPlane = (\n  object: FabricObject,\n  from?: TMat2D,\n  to?: TMat2D,\n): TMat2D => {\n  const t = calcPlaneChangeMatrix(from, to);\n  applyTransformToObject(\n    object,\n    multiplyTransformMatrices(t, object.calcOwnMatrix()),\n  );\n  return t;\n};\n", "import type {\n  ObjectModificationEvents,\n  TModificationEvents,\n} from '../EventTypeDefs';\n\nexport const fireEvent = (\n  eventName: TModificationEvents,\n  options: ObjectModificationEvents[typeof eventName],\n) => {\n  const {\n    transform: { target },\n  } = options;\n  target.canvas?.fire(`object:${eventName}`, {\n    ...options,\n    target,\n  });\n  target.fire(eventName, options);\n};\n", "import type { TOriginX, TOriginY } from '../../typedefs';\n\nconst originOffset = {\n  left: -0.5,\n  top: -0.5,\n  center: 0,\n  bottom: 0.5,\n  right: 0.5,\n};\n/**\n * Resolves origin value relative to center\n * @private\n * @param {TOriginX | TOriginY} originValue originX / originY\n * @returns number\n */\n\nexport const resolveOrigin = (\n  originValue: TOriginX | TOriginY | number,\n): number =>\n  typeof originValue === 'string'\n    ? originOffset[originValue]\n    : originValue - 0.5;\n", "import type {\n  TPointerEvent,\n  Transform,\n  TransformAction,\n  BasicTransformEvent,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TOriginX, TOriginY } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\nimport { CENTER } from '../constants';\n\nexport const NOT_ALLOWED_CURSOR = 'not-allowed';\n\n/**\n * @param {Boolean} alreadySelected true if target is already selected\n * @param {String} corner a string representing the corner ml, mr, tl ...\n * @param {Event} e Event object\n * @param {FabricObject} [target] inserted back to help overriding. Unused\n */\nexport const getActionFromCorner = (\n  alreadySelected: boolean,\n  corner: string | undefined,\n  e: TPointerEvent,\n  target: FabricObject,\n) => {\n  if (!corner || !alreadySelected) {\n    return 'drag';\n  }\n  const control = target.controls[corner];\n  return control.getActionName(e, control, target);\n};\n\n/**\n * Checks if transform is centered\n * @param {Object} transform transform data\n * @return {Boolean} true if transform is centered\n */\nexport function isTransformCentered(transform: Transform) {\n  return (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) &&\n    resolveOrigin(transform.originY) === resolveOrigin(CENTER)\n  );\n}\n\nexport function invertOrigin(origin: TOriginX | TOriginY) {\n  return -resolveOrigin(origin) + 0.5;\n}\n\nexport const isLocked = (\n  target: FabricObject,\n  lockingKey:\n    | 'lockMovementX'\n    | 'lockMovementY'\n    | 'lockRotation'\n    | 'lockScalingX'\n    | 'lockScalingY'\n    | 'lockSkewingX'\n    | 'lockSkewingY'\n    | 'lockScalingFlip',\n) => target[lockingKey];\n\nexport const commonEventInfo: TransformAction<\n  Transform,\n  BasicTransformEvent\n> = (eventData, transform, x, y) => {\n  return {\n    e: eventData,\n    transform,\n    pointer: new Point(x, y),\n  };\n};\n\n/**\n * Combine control position and object angle to find the control direction compared\n * to the object center.\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n * @param {Control} control the control class\n * @return {Number} 0 - 7 a quadrant number\n */\nexport function findCornerQuadrant(\n  fabricObject: FabricObject,\n  control: Control,\n): number {\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle(),\n    cornerAngle =\n      angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n  return Math.round((cornerAngle % 360) / 45);\n}\n\n/**\n * @returns the normalized point (rotated relative to center) in local coordinates\n */\nfunction normalizePoint(\n  target: FabricObject,\n  point: Point,\n  originX: TOriginX,\n  originY: TOriginY,\n): Point {\n  const center = target.getRelativeCenterPoint(),\n    p =\n      typeof originX !== 'undefined' && typeof originY !== 'undefined'\n        ? target.translateToGivenOrigin(\n            center,\n            CENTER,\n            CENTER,\n            originX,\n            originY,\n          )\n        : new Point(target.left, target.top),\n    p2 = target.angle\n      ? point.rotate(-degreesToRadians(target.angle), center)\n      : point;\n  return p2.subtract(p);\n}\n\n/**\n * Transforms a point to the offset from the given origin\n * @param {Object} transform\n * @param {String} originX\n * @param {String} originY\n * @param {number} x\n * @param {number} y\n * @return {Fabric.Point} the normalized point\n */\nexport function getLocalPoint(\n  { target, corner }: Transform,\n  originX: TOriginX,\n  originY: TOriginY,\n  x: number,\n  y: number,\n) {\n  const control = target.controls[corner],\n    zoom = target.canvas?.getZoom() || 1,\n    padding = target.padding / zoom,\n    localPoint = normalizePoint(target, new Point(x, y), originX, originY);\n  if (localPoint.x >= padding) {\n    localPoint.x -= padding;\n  }\n  if (localPoint.x <= -padding) {\n    localPoint.x += padding;\n  }\n  if (localPoint.y >= padding) {\n    localPoint.y -= padding;\n  }\n  if (localPoint.y <= padding) {\n    localPoint.y += padding;\n  }\n  localPoint.x -= control.offsetX;\n  localPoint.y -= control.offsetY;\n  return localPoint;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { LEFT, TOP, MOVING } from '../constants';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo, isLocked } from './util';\n\n/**\n * Action handler\n * @private\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if the translation occurred\n */\nexport const dragHandler: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const { target, offsetX, offsetY } = transform,\n    newLeft = x - offsetX,\n    newTop = y - offsetY,\n    moveX = !isLocked(target, 'lockMovementX') && target.left !== newLeft,\n    moveY = !isLocked(target, 'lockMovementY') && target.top !== newTop;\n  moveX && target.set(LEFT, newLeft);\n  moveY && target.set(TOP, newTop);\n  if (moveX || moveY) {\n    fireEvent(MOVING, commonEventInfo(eventData, transform, x, y));\n  }\n  return moveX || moveY;\n};\n", "import type { TSVGReviver } from '../../typedefs';\nimport { uid } from '../../util/internals/uid';\nimport { colorPropToSVG, matrixToSVG } from '../../util/misc/svgParsing';\nimport { FILL, NONE, STROKE } from '../../constants';\nimport type { FabricObject } from './FabricObject';\nimport { isFiller } from '../../util/typeAssertions';\n\nexport class FabricObjectSVGExportMixin {\n  /**\n   * When an object is being exported as SVG as a clippath, a reference inside the SVG is needed.\n   * This reference is a UID in the fabric namespace and is temporary stored here.\n   * @type {String}\n   */\n  declare clipPathId?: string;\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    skipShadow?: boolean,\n  ) {\n    const fillRule = this.fillRule ? this.fillRule : 'nonzero',\n      strokeWidth = this.strokeWidth ? this.strokeWidth : '0',\n      strokeDashArray = this.strokeDashArray\n        ? this.strokeDashArray.join(' ')\n        : NONE,\n      strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',\n      strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',\n      strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',\n      strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',\n      opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',\n      visibility = this.visible ? '' : ' visibility: hidden;',\n      filter = skipShadow ? '' : this.getSvgFilter(),\n      fill = colorPropToSVG(FILL, this.fill),\n      stroke = colorPropToSVG(STROKE, this.stroke);\n\n    return [\n      stroke,\n      'stroke-width: ',\n      strokeWidth,\n      '; ',\n      'stroke-dasharray: ',\n      strokeDashArray,\n      '; ',\n      'stroke-linecap: ',\n      strokeLineCap,\n      '; ',\n      'stroke-dashoffset: ',\n      strokeDashOffset,\n      '; ',\n      'stroke-linejoin: ',\n      strokeLineJoin,\n      '; ',\n      'stroke-miterlimit: ',\n      strokeMiterLimit,\n      '; ',\n      fill,\n      'fill-rule: ',\n      fillRule,\n      '; ',\n      'opacity: ',\n      opacity,\n      ';',\n      filter,\n      visibility,\n    ].join('');\n  }\n\n  /**\n   * Returns filter for svg shadow\n   * @return {String}\n   */\n  getSvgFilter(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.shadow ? `filter: url(#SVGID_${this.shadow.id});` : '';\n  }\n\n  /**\n   * Returns id attribute for svg output\n   * @return {String}\n   */\n  getSvgCommons(\n    this: FabricObjectSVGExportMixin & FabricObject & { id?: string },\n  ) {\n    return [\n      this.id ? `id=\"${this.id}\" ` : '',\n      this.clipPath\n        ? `clip-path=\"url(#${\n            (this.clipPath as FabricObjectSVGExportMixin & FabricObject)\n              .clipPathId\n          })\" `\n        : '',\n    ].join('');\n  }\n\n  /**\n   * Returns transform-string for svg-export\n   * @param {Boolean} use the full transform or the single object one.\n   * @return {String}\n   */\n  getSvgTransform(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    full?: boolean,\n    additionalTransform = '',\n  ) {\n    const transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),\n      svgTransform = `transform=\"${matrixToSVG(transform)}`;\n    return `${svgTransform}${additionalTransform}\" `;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * This function is implemented in each subclass\n   * This is just because typescript otherwise cryies all the time\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(_reviver?: TSVGReviver): string[] {\n    return [''];\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return this._createBaseSVGMarkup(this._toSVG(reviver), {\n      reviver,\n    });\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {\n        reviver,\n      })\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createBaseClipPathSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      reviver,\n      additionalTransform = '',\n    }: { reviver?: TSVGReviver; additionalTransform?: string } = {},\n  ) {\n    const commonPieces = [\n        this.getSvgTransform(true, additionalTransform),\n        this.getSvgCommons(),\n      ].join(''),\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    objectMarkup[index] = commonPieces;\n    return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');\n  }\n\n  /**\n   * @private\n   */\n  _createBaseSVGMarkup(\n    this: FabricObjectSVGExportMixin & FabricObject,\n    objectMarkup: string[],\n    {\n      noStyle,\n      reviver,\n      withShadow,\n      additionalTransform,\n    }: {\n      noStyle?: boolean;\n      reviver?: TSVGReviver;\n      withShadow?: boolean;\n      additionalTransform?: string;\n    } = {},\n  ): string {\n    const styleInfo = noStyle ? '' : `style=\"${this.getSvgStyles()}\" `,\n      shadowInfo = withShadow ? `style=\"${this.getSvgFilter()}\" ` : '',\n      clipPath = this.clipPath as FabricObjectSVGExportMixin & FabricObject,\n      vectorEffect = this.strokeUniform\n        ? 'vector-effect=\"non-scaling-stroke\" '\n        : '',\n      absoluteClipPath = clipPath && clipPath.absolutePositioned,\n      stroke = this.stroke,\n      fill = this.fill,\n      shadow = this.shadow,\n      markup = [],\n      // insert commons in the markup, style and svgCommons\n      index = objectMarkup.indexOf('COMMON_PARTS');\n    let clipPathMarkup;\n    if (clipPath) {\n      clipPath.clipPathId = `CLIPPATH_${uid()}`;\n      clipPathMarkup = `<clipPath id=\"${\n        clipPath.clipPathId\n      }\" >\\n${clipPath.toClipPathSVG(reviver)}</clipPath>\\n`;\n    }\n    if (absoluteClipPath) {\n      markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\\n');\n    }\n    markup.push(\n      '<g ',\n      this.getSvgTransform(false),\n      !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '',\n      ' >\\n',\n    );\n    const commonPieces = [\n      styleInfo,\n      vectorEffect,\n      noStyle ? '' : this.addPaintOrder(),\n      ' ',\n      additionalTransform ? `transform=\"${additionalTransform}\" ` : '',\n    ].join('');\n    objectMarkup[index] = commonPieces;\n    if (isFiller(fill)) {\n      markup.push(fill.toSVG(this));\n    }\n    if (isFiller(stroke)) {\n      markup.push(stroke.toSVG(this));\n    }\n    if (shadow) {\n      markup.push(shadow.toSVG(this));\n    }\n    if (clipPath) {\n      markup.push(clipPathMarkup);\n    }\n    markup.push(objectMarkup.join(''));\n    markup.push('</g>\\n');\n    absoluteClipPath && markup.push('</g>\\n');\n    return reviver ? reviver(markup.join('')) : markup.join('');\n  }\n\n  addPaintOrder(this: FabricObjectSVGExportMixin & FabricObject) {\n    return this.paintFirst !== FILL ? ` paint-order=\"${this.paintFirst}\" ` : '';\n  }\n}\n", "export function getSvgRegex(arr: string[]) {\n  return new RegExp('^(' + arr.join('|') + ')\\\\b', 'i');\n}\n", "import { getSvgRegex } from './getSvgRegex';\nimport { LEFT, TOP } from '../constants';\n\nexport const reNum = String.raw`(?:[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?)`;\n\nexport const svgNS = 'http://www.w3.org/2000/svg';\n\nexport const reFontDeclaration = new RegExp(\n  '(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*' +\n    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(' +\n    reNum +\n    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|' +\n    reNum +\n    '))?\\\\s+(.*)',\n);\n\nexport const svgValidTagNames = [\n    'path',\n    'circle',\n    'polygon',\n    'polyline',\n    'ellipse',\n    'rect',\n    'line',\n    'image',\n    'text',\n  ],\n  svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],\n  svgInvalidAncestors = [\n    'pattern',\n    'defs',\n    'symbol',\n    'metadata',\n    'clipPath',\n    'mask',\n    'desc',\n  ],\n  svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],\n  attributesMap = {\n    cx: LEFT,\n    x: LEFT,\n    r: 'radius',\n    cy: TOP,\n    y: TOP,\n    display: 'visible',\n    visibility: 'visible',\n    transform: 'transformMatrix',\n    'fill-opacity': 'fillOpacity',\n    'fill-rule': 'fillRule',\n    'font-family': 'fontFamily',\n    'font-size': 'fontSize',\n    'font-style': 'fontStyle',\n    'font-weight': 'fontWeight',\n    'letter-spacing': 'charSpacing',\n    'paint-order': 'paintFirst',\n    'stroke-dasharray': 'strokeDashArray',\n    'stroke-dashoffset': 'strokeDashOffset',\n    'stroke-linecap': 'strokeLineCap',\n    'stroke-linejoin': 'strokeLineJoin',\n    'stroke-miterlimit': 'strokeMiterLimit',\n    'stroke-opacity': 'strokeOpacity',\n    'stroke-width': 'strokeWidth',\n    'text-decoration': 'textDecoration',\n    'text-anchor': 'textAnchor',\n    opacity: 'opacity',\n    'clip-path': 'clipPath',\n    'clip-rule': 'clipRule',\n    'vector-effect': 'strokeUniform',\n    'image-rendering': 'imageSmoothing',\n  },\n  fSize = 'font-size',\n  cPath = 'clip-path';\n\nexport const svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);\n\nexport const svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);\n\nexport const svgValidParentsRegEx = getSvgRegex(svgValidParents);\n\n// http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute\n// matches, e.g.: +14.56e-12, etc.\nexport const reViewBoxAttrValue = new RegExp(\n  '^' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*,?' +\n    '\\\\s*(' +\n    reNum +\n    '+)\\\\s*' +\n    '$',\n);\n", "import type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n\nconst unitVectorX = new Point(1, 0);\nconst zero = new Point();\n\n/**\n * Rotates `vector` with `radians`\n * @param {Point} vector The vector to rotate (x and y)\n * @param {Number} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotateVector = (vector: Point, radians: TRadian) =>\n  vector.rotate(radians);\n\n/**\n * Creates a vector from points represented as a point\n *\n * @param {Point} from\n * @param {Point} to\n * @returns {Point} vector\n */\nexport const createVector = (from: XY, to: XY): Point =>\n  new Point(to).subtract(from);\n\n/**\n * return the magnitude of a vector\n * @return {number}\n */\nexport const magnitude = (point: Point) => point.distanceFrom(zero);\n\n/**\n * Calculates the angle between 2 vectors\n * @param {Point} a\n * @param {Point} b\n * @returns the angle in radians from `a` to `b`\n */\nexport const calcAngleBetweenVectors = (a: Point, b: Point): TRadian =>\n  Math.atan2(crossProduct(a, b), dotProduct(a, b)) as TRadian;\n\n/**\n * Calculates the angle between the x axis and the vector\n * @param {Point} v\n * @returns the angle in radians of `v`\n */\nexport const calcVectorRotation = (v: Point) =>\n  calcAngleBetweenVectors(unitVectorX, v);\n\n/**\n * @param {Point} v\n * @returns {Point} vector representing the unit vector pointing to the direction of `v`\n */\nexport const getUnitVector = (v: Point): Point =>\n  v.eq(zero) ? v : v.scalarDivide(magnitude(v));\n\n/**\n * @param {Point} v\n * @param {Boolean} [counterClockwise] the direction of the orthogonal vector, defaults to `true`\n * @returns {Point} the unit orthogonal vector\n */\nexport const getOrthonormalVector = (\n  v: Point,\n  counterClockwise = true,\n): Point =>\n  getUnitVector(new Point(-v.y, v.x).scalarMultiply(counterClockwise ? 1 : -1));\n\n/**\n * Cross product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number} the magnitude of Z vector\n */\nexport const crossProduct = (a: Point, b: Point): number =>\n  a.x * b.y - a.y * b.x;\n\n/**\n * Dot product of two vectors in 2D\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nexport const dotProduct = (a: Point, b: Point): number => a.x * b.x + a.y * b.y;\n\n/**\n * Checks if the vector is between two others. It is considered\n * to be inside when the vector to be tested is between the\n * initial vector and the final vector (included) in a counterclockwise direction.\n * @param {Point} t vector to be tested\n * @param {Point} a initial vector\n * @param {Point} b final vector\n * @returns {boolean} true if the vector is among the others\n */\nexport const isBetweenVectors = (t: Point, a: Point, b: Point): boolean => {\n  if (t.eq(a) || t.eq(b)) return true;\n  const AxB = crossProduct(a, b),\n    AxT = crossProduct(a, t),\n    BxT = crossProduct(b, t);\n  return AxB >= 0 ? AxT >= 0 && BxT <= 0 : !(AxT <= 0 && BxT >= 0);\n};\n", "import { classRegistry } from './ClassRegistry';\nimport { Color } from './color/Color';\nimport { config } from './config';\nimport { reNum } from './parser/constants';\nimport { Point } from './Point';\nimport type { FabricObject } from './shapes/Object/FabricObject';\nimport type { TClassProperties } from './typedefs';\nimport { uid } from './util/internals/uid';\nimport { pickBy } from './util/misc/pick';\nimport { degreesToRadians } from './util/misc/radiansDegreesConversion';\nimport { toFixed } from './util/misc/toFixed';\nimport { rotateVector } from './util/misc/vectors';\n\n/**\n   * Regex matching shadow offsetX, offsetY and blur (ex: \"2px 2px 10px rgba(0,0,0,0.2)\", \"rgb(0,255,0) 2px 2px\")\n   * - (?:\\s|^): This part captures either a whitespace character (\\s) or the beginning of a line (^). It's non-capturing (due to (?:...)), meaning it doesn't create a capturing group.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: This captures the first component of the shadow, which is the horizontal offset. Breaking it down:\n   *   - (-?\\d+): Captures an optional minus sign followed by one or more digits (integer part of the number).\n   *   - (?:\\.\\d*)?: Optionally captures a decimal point followed by zero or more digits (decimal part of the number).\n   *   - (?:px)?: Optionally captures the \"px\" unit.\n   *   - (?:\\s?|$): Captures either an optional whitespace or the end of the line. This whole part is wrapped in a non-capturing group and marked as optional with ?.\n   * - (-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?: Similar to the previous step, this captures the vertical offset.\n\n(\\d+(?:\\.\\d*)?(?:px)?)?: This captures the blur radius. It's similar to the horizontal offset but without the optional minus sign.\n\n(?:\\s+(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?){0,1}: This captures an optional part for the color. It allows for whitespace followed by a component with an optional minus sign, digits, decimal point, and \"px\" unit.\n\n(?:$|\\s): This captures either the end of the line or a whitespace character. It ensures that the match ends either at the end of the string or with a whitespace character.\n   */\n// eslint-disable-next-line max-len\n\nconst shadowOffsetRegex = '(-?\\\\d+(?:\\\\.\\\\d*)?(?:px)?(?:\\\\s?|$))?';\n\nconst reOffsetsAndBlur = new RegExp(\n  '(?:\\\\s|^)' +\n    shadowOffsetRegex +\n    shadowOffsetRegex +\n    '(' +\n    reNum +\n    '?(?:px)?)?(?:\\\\s?|$)(?:$|\\\\s)',\n);\n\nexport const shadowDefaultValues: Partial<TClassProperties<Shadow>> = {\n  color: 'rgb(0,0,0)',\n  blur: 0,\n  offsetX: 0,\n  offsetY: 0,\n  affectStroke: false,\n  includeDefaultValues: true,\n  nonScaling: false,\n};\n\nexport type SerializedShadowOptions = {\n  color: string;\n  blur: number;\n  offsetX: number;\n  offsetY: number;\n  affectStroke: boolean;\n  nonScaling: boolean;\n  type: string;\n};\n\nexport class Shadow {\n  /**\n   * Shadow color\n   * @type String\n   * @default\n   */\n  declare color: string;\n\n  /**\n   * Shadow blur\n   * @type Number\n   */\n  declare blur: number;\n\n  /**\n   * Shadow horizontal offset\n   * @type Number\n   * @default\n   */\n  declare offsetX: number;\n\n  /**\n   * Shadow vertical offset\n   * @type Number\n   * @default\n   */\n  declare offsetY: number;\n\n  /**\n   * Whether the shadow should affect stroke operations\n   * @type Boolean\n   * @default\n   */\n  declare affectStroke: boolean;\n\n  /**\n   * Indicates whether toObject should include default values\n   * @type Boolean\n   * @default\n   */\n  declare includeDefaultValues: boolean;\n\n  /**\n   * When `false`, the shadow will scale with the object.\n   * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.\n   * default to false\n   * @type Boolean\n   * @default\n   */\n  declare nonScaling: boolean;\n\n  declare id: number;\n\n  static ownDefaults = shadowDefaultValues;\n\n  static type = 'shadow';\n\n  /**\n   * @see {@link http://fabricjs.com/shadows|Shadow demo}\n   * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. \"rgba(0,0,0,0.2) 2px 2px 10px\")\n   */\n  constructor(options: Partial<TClassProperties<Shadow>>);\n  constructor(svgAttribute: string);\n  constructor(arg0: string | Partial<TClassProperties<Shadow>>) {\n    const options: Partial<TClassProperties<Shadow>> =\n      typeof arg0 === 'string' ? Shadow.parseShadow(arg0) : arg0;\n    Object.assign(this, Shadow.ownDefaults, options);\n    this.id = uid();\n  }\n\n  /**\n   * @param {String} value Shadow value to parse\n   * @return {Object} Shadow object with color, offsetX, offsetY and blur\n   */\n  static parseShadow(value: string) {\n    const shadowStr = value.trim(),\n      [, offsetX = 0, offsetY = 0, blur = 0] = (\n        reOffsetsAndBlur.exec(shadowStr) || []\n      ).map((value) => parseFloat(value) || 0),\n      color = (shadowStr.replace(reOffsetsAndBlur, '') || 'rgb(0,0,0)').trim();\n\n    return {\n      color,\n      offsetX,\n      offsetY,\n      blur,\n    };\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow\n   * @return {String} Returns CSS3 text-shadow declaration\n   */\n  toString() {\n    return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');\n  }\n\n  /**\n   * Returns SVG representation of a shadow\n   * @param {FabricObject} object\n   * @return {String} SVG representation of a shadow\n   */\n  toSVG(object: FabricObject) {\n    const offset = rotateVector(\n        new Point(this.offsetX, this.offsetY),\n        degreesToRadians(-object.angle),\n      ),\n      BLUR_BOX = 20,\n      color = new Color(this.color);\n    let fBoxX = 40,\n      fBoxY = 40;\n\n    if (object.width && object.height) {\n      //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion\n      // we add some extra space to filter box to contain the blur ( 20 )\n      fBoxX =\n        toFixed(\n          (Math.abs(offset.x) + this.blur) / object.width,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n      fBoxY =\n        toFixed(\n          (Math.abs(offset.y) + this.blur) / object.height,\n          config.NUM_FRACTION_DIGITS,\n        ) *\n          100 +\n        BLUR_BOX;\n    }\n    if (object.flipX) {\n      offset.x *= -1;\n    }\n    if (object.flipY) {\n      offset.y *= -1;\n    }\n\n    return `<filter id=\"SVGID_${this.id}\" y=\"-${fBoxY}%\" height=\"${\n      100 + 2 * fBoxY\n    }%\" x=\"-${fBoxX}%\" width=\"${\n      100 + 2 * fBoxX\n    }%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"${toFixed(\n      this.blur ? this.blur / 2 : 0,\n      config.NUM_FRACTION_DIGITS,\n    )}\"></feGaussianBlur>\\n\\t<feOffset dx=\"${toFixed(\n      offset.x,\n      config.NUM_FRACTION_DIGITS,\n    )}\" dy=\"${toFixed(\n      offset.y,\n      config.NUM_FRACTION_DIGITS,\n    )}\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"${color.toRgb()}\" flood-opacity=\"${color.getAlpha()}\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n`;\n  }\n\n  /**\n   * Returns object representation of a shadow\n   * @return {Object} Object representation of a shadow instance\n   */\n  toObject() {\n    const data: SerializedShadowOptions = {\n      color: this.color,\n      blur: this.blur,\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      affectStroke: this.affectStroke,\n      nonScaling: this.nonScaling,\n      type: (this.constructor as typeof Shadow).type,\n    };\n    const defaults = Shadow.ownDefaults as SerializedShadowOptions;\n    return !this.includeDefaultValues\n      ? pickBy(data, (value, key) => value !== defaults[key])\n      : data;\n  }\n\n  static async fromObject(options: Partial<TClassProperties<Shadow>>) {\n    return new this(options);\n  }\n}\n\nclassRegistry.setClass(Shadow, 'shadow');\n", "export const capValue = (min: number, value: number, max: number) =>\n  Math.max(min, Math.min(value, max));\n", "import {\n  TOP,\n  LEFT,\n  SCALE_Y,\n  SCALE_X,\n  SKEW_X,\n  SKEW_Y,\n  FILL,\n  STROKE,\n} from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { InteractiveFabricObject } from './InteractiveObject';\nimport type { FabricObject } from './Object';\n\nexport const stateProperties = [\n  TOP,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  'flipX',\n  'flipY',\n  'originX',\n  'originY',\n  'angle',\n  'opacity',\n  'globalCompositeOperation',\n  'shadow',\n  'visible',\n  SKEW_X,\n  SKEW_Y,\n];\n\nexport const cacheProperties = [\n  FILL,\n  STROKE,\n  'strokeWidth',\n  'strokeDashArray',\n  'width',\n  'height',\n  'paintFirst',\n  'strokeUniform',\n  'strokeLineCap',\n  'strokeDashOffset',\n  'strokeLineJoin',\n  'strokeMiterLimit',\n  'backgroundColor',\n  'clipPath',\n];\n\nexport const fabricObjectDefaultValues: Partial<\n  TClassProperties<FabricObject>\n> = {\n  // see composeMatrix() to see order of transforms. First defaults listed based on this\n  top: 0,\n  left: 0,\n  width: 0,\n  height: 0,\n  angle: 0,\n  flipX: false,\n  flipY: false,\n  scaleX: 1,\n  scaleY: 1,\n  minScaleLimit: 0,\n  skewX: 0,\n  skewY: 0,\n  originX: LEFT,\n  originY: TOP,\n  strokeWidth: 1,\n  strokeUniform: false,\n  padding: 0,\n  opacity: 1,\n  paintFirst: FILL,\n  fill: 'rgb(0,0,0)',\n  fillRule: 'nonzero',\n  stroke: null,\n  strokeDashArray: null,\n  strokeDashOffset: 0,\n  strokeLineCap: 'butt',\n  strokeLineJoin: 'miter',\n  strokeMiterLimit: 4,\n  globalCompositeOperation: 'source-over',\n  backgroundColor: '',\n  shadow: null,\n  visible: true,\n  includeDefaultValues: true,\n  excludeFromExport: false,\n  objectCaching: true,\n  clipPath: undefined,\n  inverted: false,\n  absolutePositioned: false,\n  centeredRotation: true,\n  centeredScaling: false,\n  dirty: true,\n} as const;\n\nexport const interactiveObjectDefaultValues: Partial<\n  TClassProperties<InteractiveFabricObject>\n> = {\n  noScaleCache: true,\n  lockMovementX: false,\n  lockMovementY: false,\n  lockRotation: false,\n  lockScalingX: false,\n  lockScalingY: false,\n  lockSkewingX: false,\n  lockSkewingY: false,\n  lockScalingFlip: false,\n  cornerSize: 13,\n  touchCornerSize: 24,\n  transparentCorners: true,\n  cornerColor: 'rgb(178,204,255)',\n  cornerStrokeColor: '',\n  cornerStyle: 'rect',\n  cornerDashArray: null,\n  hasControls: true,\n  borderColor: 'rgb(178,204,255)',\n  borderDashArray: null,\n  borderOpacityWhenMoving: 0.4,\n  borderScaleFactor: 1,\n  hasBorders: true,\n  selectionBackgroundColor: '',\n  selectable: true,\n  evented: true,\n  perPixelTargetFind: false,\n  activeOn: 'down',\n  hoverCursor: null,\n  moveCursor: null,\n};\n", "/**\n * Easing functions\n * @see {@link http://gizma.com/easing/ Easing Equations by Robert Penner}\n */\n\nimport { twoMathPi, halfPI } from '../../constants';\nimport type { TEasingFunction } from './types';\n\nconst normalize = (a: number, c: number, p: number, s: number) => {\n  if (a < Math.abs(c)) {\n    a = c;\n    s = p / 4;\n  } else {\n    //handle the 0/0 case:\n    if (c === 0 && a === 0) {\n      s = (p / twoMathPi) * Math.asin(1);\n    } else {\n      s = (p / twoMathPi) * Math.asin(c / a);\n    }\n  }\n  return { a, c, p, s };\n};\n\nconst elastic = (\n  a: number,\n  s: number,\n  p: number,\n  t: number,\n  d: number,\n): number =>\n  a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * twoMathPi) / p);\n\n/**\n * Default sinusoidal easing\n */\nexport const defaultEasing: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Cubic easing in\n */\nexport const easeInCubic: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 3 + b;\n\n/**\n * Cubic easing out\n */\nexport const easeOutCubic: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 3 + 1) + b;\n\n/**\n * Cubic easing in and out\n */\nexport const easeInOutCubic: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 3 + b;\n  }\n  return (c / 2) * ((t - 2) ** 3 + 2) + b;\n};\n\n/**\n * Quartic easing in\n */\nexport const easeInQuart: TEasingFunction = (t, b, c, d) =>\n  c * (t /= d) * t ** 3 + b;\n\n/**\n * Quartic easing out\n */\nexport const easeOutQuart: TEasingFunction = (t, b, c, d) =>\n  -c * ((t = t / d - 1) * t ** 3 - 1) + b;\n\n/**\n * Quartic easing in and out\n */\nexport const easeInOutQuart: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 4 + b;\n  }\n  return (-c / 2) * ((t -= 2) * t ** 3 - 2) + b;\n};\n\n/**\n * Quintic easing in\n */\nexport const easeInQuint: TEasingFunction = (t, b, c, d) =>\n  c * (t / d) ** 5 + b;\n\n/**\n * Quintic easing out\n */\nexport const easeOutQuint: TEasingFunction = (t, b, c, d) =>\n  c * ((t / d - 1) ** 5 + 1) + b;\n\n/**\n * Quintic easing in and out\n */\nexport const easeInOutQuint: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 5 + b;\n  }\n  return (c / 2) * ((t - 2) ** 5 + 2) + b;\n};\n\n/**\n * Sinusoidal easing in\n */\nexport const easeInSine: TEasingFunction = (t, b, c, d) =>\n  -c * Math.cos((t / d) * halfPI) + c + b;\n\n/**\n * Sinusoidal easing out\n */\nexport const easeOutSine: TEasingFunction = (t, b, c, d) =>\n  c * Math.sin((t / d) * halfPI) + b;\n\n/**\n * Sinusoidal easing in and out\n */\nexport const easeInOutSine: TEasingFunction = (t, b, c, d) =>\n  (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;\n\n/**\n * Exponential easing in\n */\nexport const easeInExpo: TEasingFunction = (t, b, c, d) =>\n  t === 0 ? b : c * 2 ** (10 * (t / d - 1)) + b;\n\n/**\n * Exponential easing out\n */\nexport const easeOutExpo: TEasingFunction = (t, b, c, d) =>\n  t === d ? b + c : c * -(2 ** ((-10 * t) / d) + 1) + b;\n\n/**\n * Exponential easing in and out\n */\nexport const easeInOutExpo: TEasingFunction = (t, b, c, d) => {\n  if (t === 0) {\n    return b;\n  }\n  if (t === d) {\n    return b + c;\n  }\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * 2 ** (10 * (t - 1)) + b;\n  }\n  return (c / 2) * -(2 ** (-10 * --t) + 2) + b;\n};\n\n/**\n * Circular easing in\n */\nexport const easeInCirc: TEasingFunction = (t, b, c, d) =>\n  -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\n\n/**\n * Circular easing out\n */\nexport const easeOutCirc: TEasingFunction = (t, b, c, d) =>\n  c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\n\n/**\n * Circular easing in and out\n */\nexport const easeInOutCirc: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (-c / 2) * (Math.sqrt(1 - t ** 2) - 1) + b;\n  }\n  return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\n};\n\n/**\n * Elastic easing in\n */\nexport const easeInElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP } = normalize(a, c, p, s);\n  return -elastic(normA, normS, normP, t, d) + b;\n};\n\n/**\n * Elastic easing out\n */\nexport const easeOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d;\n  if (t === 1) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * 0.3;\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  return (\n    normA * 2 ** (-10 * t) * Math.sin(((t * d - normS) * twoMathPi) / normP) +\n    normC +\n    b\n  );\n};\n\n/**\n * Elastic easing in and out\n */\nexport const easeInOutElastic: TEasingFunction = (t, b, c, d) => {\n  const s = 1.70158,\n    a = c;\n  let p = 0;\n  if (t === 0) {\n    return b;\n  }\n  t /= d / 2;\n  if (t === 2) {\n    return b + c;\n  }\n  if (!p) {\n    p = d * (0.3 * 1.5);\n  }\n  const { a: normA, s: normS, p: normP, c: normC } = normalize(a, c, p, s);\n  if (t < 1) {\n    return -0.5 * elastic(normA, normS, normP, t, d) + b;\n  }\n  return (\n    normA *\n      Math.pow(2, -10 * (t -= 1)) *\n      Math.sin(((t * d - normS) * twoMathPi) / normP) *\n      0.5 +\n    normC +\n    b\n  );\n};\n\n/**\n * Backwards easing in\n */\nexport const easeInBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * (t /= d) * t * ((s + 1) * t - s) + b;\n\n/**\n * Backwards easing out\n */\nexport const easeOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) =>\n  c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n\n/**\n * Backwards easing in and out\n */\nexport const easeInOutBack: TEasingFunction = (t, b, c, d, s = 1.70158) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;\n  }\n  return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;\n};\n\n/**\n * Bouncing easing out\n */\nexport const easeOutBounce: TEasingFunction = (t, b, c, d) => {\n  if ((t /= d) < 1 / 2.75) {\n    return c * (7.5625 * t * t) + b;\n  } else if (t < 2 / 2.75) {\n    return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;\n  } else if (t < 2.5 / 2.75) {\n    return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;\n  } else {\n    return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;\n  }\n};\n\n/**\n * Bouncing easing in\n */\nexport const easeInBounce: TEasingFunction = (t, b, c, d) =>\n  c - easeOutBounce(d - t, 0, c, d) + b;\n\n/**\n * Bouncing easing in and out\n */\nexport const easeInOutBounce: TEasingFunction = (t, b, c, d) =>\n  t < d / 2\n    ? easeInBounce(t * 2, 0, c, d) * 0.5 + b\n    : easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;\n\n/**\n * Quadratic easing in\n */\nexport const easeInQuad: TEasingFunction = (t, b, c, d) => c * (t /= d) * t + b;\n\n/**\n * Quadratic easing out\n */\nexport const easeOutQuad: TEasingFunction = (t, b, c, d) =>\n  -c * (t /= d) * (t - 2) + b;\n\n/**\n * Quadratic easing in and out\n */\nexport const easeInOutQuad: TEasingFunction = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) {\n    return (c / 2) * t ** 2 + b;\n  }\n  return (-c / 2) * (--t * (t - 2) - 1) + b;\n};\n", "import { noop } from '../../constants';\nimport { requestAnimFrame } from './AnimationFrameProvider';\nimport { runningAnimations } from './AnimationRegistry';\nimport { defaultEasing } from './easing';\nimport type {\n  AnimationState,\n  TAbortCallback,\n  TBaseAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultAbort = () => false;\n\nexport abstract class AnimationBase<\n  T extends number | number[] = number | number[],\n> {\n  declare readonly startValue: T;\n  declare readonly endValue: T;\n  declare readonly duration: number;\n  declare readonly delay: number;\n\n  protected declare readonly byValue: T;\n  protected declare readonly easing: TEasingFunction<T>;\n\n  private declare readonly _onStart: VoidFunction;\n  private declare readonly _onChange: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _onComplete: TOnAnimationChangeCallback<T, void>;\n  private declare readonly _abort: TAbortCallback<T>;\n\n  /**\n   * Used to register the animation to a target object\n   * so that it can be cancelled within the object context\n   */\n  declare readonly target?: unknown;\n\n  private _state: AnimationState = 'pending';\n  /**\n   * Time %, or the ratio of `timeElapsed / duration`\n   * @see tick\n   */\n  durationProgress = 0;\n  /**\n   * Value %, or the ratio of `(currentValue - startValue) / (endValue - startValue)`\n   */\n  valueProgress = 0;\n  /**\n   * Current value\n   */\n  declare value: T;\n  /**\n   * Animation start time ms\n   */\n  private declare startTime: number;\n\n  constructor({\n    startValue,\n    byValue,\n    duration = 500,\n    delay = 0,\n    easing = defaultEasing,\n    onStart = noop,\n    onChange = noop,\n    onComplete = noop,\n    abort = defaultAbort,\n    target,\n  }: TBaseAnimationOptions<T>) {\n    this.tick = this.tick.bind(this);\n\n    this.duration = duration;\n    this.delay = delay;\n    this.easing = easing;\n    this._onStart = onStart;\n    this._onChange = onChange;\n    this._onComplete = onComplete;\n    this._abort = abort;\n    this.target = target;\n\n    this.startValue = startValue;\n    this.byValue = byValue;\n    this.value = this.startValue;\n    this.endValue = Object.freeze(this.calculate(this.duration).value);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  isDone() {\n    return this._state === 'aborted' || this._state === 'completed';\n  }\n\n  /**\n   * Calculate the current value based on the easing parameters\n   * @param timeElapsed in ms\n   * @protected\n   */\n  protected abstract calculate(timeElapsed: number): {\n    value: T;\n    valueProgress: number;\n  };\n\n  start() {\n    const firstTick: FrameRequestCallback = (timestamp) => {\n      if (this._state !== 'pending') return;\n      this.startTime = timestamp || +new Date();\n      this._state = 'running';\n      this._onStart();\n      this.tick(this.startTime);\n    };\n\n    this.register();\n\n    // setTimeout(cb, 0) will run cb on the next frame, causing a delay\n    // we don't want that\n    if (this.delay > 0) {\n      setTimeout(() => requestAnimFrame(firstTick), this.delay);\n    } else {\n      requestAnimFrame(firstTick);\n    }\n  }\n\n  private tick(t: number) {\n    const durationMs = (t || +new Date()) - this.startTime;\n    const boundDurationMs = Math.min(durationMs, this.duration);\n    this.durationProgress = boundDurationMs / this.duration;\n    const { value, valueProgress } = this.calculate(boundDurationMs);\n    this.value = Object.freeze(value);\n    this.valueProgress = valueProgress;\n\n    if (this._state === 'aborted') {\n      return;\n    } else if (\n      this._abort(this.value, this.valueProgress, this.durationProgress)\n    ) {\n      this._state = 'aborted';\n      this.unregister();\n    } else if (durationMs >= this.duration) {\n      this.durationProgress = this.valueProgress = 1;\n      this._onChange(this.endValue, this.valueProgress, this.durationProgress);\n      this._state = 'completed';\n      this._onComplete(\n        this.endValue,\n        this.valueProgress,\n        this.durationProgress,\n      );\n      this.unregister();\n    } else {\n      this._onChange(this.value, this.valueProgress, this.durationProgress);\n      requestAnimFrame(this.tick);\n    }\n  }\n\n  private register() {\n    runningAnimations.push(this as unknown as AnimationBase);\n  }\n\n  private unregister() {\n    runningAnimations.remove(this as unknown as AnimationBase);\n  }\n\n  abort() {\n    this._state = 'aborted';\n    this.unregister();\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ValueAnimationOptions } from './types';\n\nexport class ValueAnimation extends AnimationBase<number> {\n  constructor({\n    startValue = 0,\n    endValue = 100,\n    ...otherOptions\n  }: ValueAnimationOptions) {\n    super({\n      ...otherOptions,\n      startValue,\n      byValue: endValue - startValue,\n    });\n  }\n\n  protected calculate(timeElapsed: number) {\n    const value = this.easing(\n      timeElapsed,\n      this.startValue,\n      this.byValue,\n      this.duration,\n    );\n    return {\n      value,\n      valueProgress: Math.abs((value - this.startValue) / this.byValue),\n    };\n  }\n}\n", "import { AnimationBase } from './AnimationBase';\nimport type { ArrayAnimationOptions } from './types';\n\nexport class ArrayAnimation extends AnimationBase<number[]> {\n  constructor({\n    startValue = [0],\n    endValue = [100],\n    ...options\n  }: ArrayAnimationOptions) {\n    super({\n      ...options,\n      startValue,\n      byValue: endValue.map((value, i) => value - startValue[i]),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const values = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    );\n    return {\n      value: values,\n      valueProgress: Math.abs(\n        (values[0] - this.startValue[0]) / this.byValue[0],\n      ),\n    };\n  }\n}\n", "import { Color } from '../../color/Color';\nimport type { TRGBAColorSource } from '../../color/typedefs';\nimport { halfPI } from '../../constants';\nimport { capValue } from '../misc/capValue';\nimport { AnimationBase } from './AnimationBase';\nimport type {\n  ColorAnimationOptions,\n  TEasingFunction,\n  TOnAnimationChangeCallback,\n} from './types';\n\nconst defaultColorEasing: TEasingFunction = (\n  timeElapsed,\n  startValue,\n  byValue,\n  duration,\n) => {\n  const durationProgress = 1 - Math.cos((timeElapsed / duration) * halfPI);\n  return startValue + byValue * durationProgress;\n};\n\nconst wrapColorCallback = <R>(\n  callback?: TOnAnimationChangeCallback<string, R>,\n) =>\n  callback &&\n  ((rgba: TRGBAColorSource, valueProgress: number, durationProgress: number) =>\n    callback(new Color(rgba).toRgba(), valueProgress, durationProgress));\n\nexport class ColorAnimation extends AnimationBase<TRGBAColorSource> {\n  constructor({\n    startValue,\n    endValue,\n    easing = defaultColorEasing,\n    onChange,\n    onComplete,\n    abort,\n    ...options\n  }: ColorAnimationOptions) {\n    const startColor = new Color(startValue).getSource();\n    const endColor = new Color(endValue).getSource();\n    super({\n      ...options,\n      startValue: startColor,\n      byValue: endColor.map(\n        (value, i) => value - startColor[i],\n      ) as TRGBAColorSource,\n      easing,\n      onChange: wrapColorCallback(onChange),\n      onComplete: wrapColorCallback(onComplete),\n      abort: wrapColorCallback(abort),\n    });\n  }\n  protected calculate(timeElapsed: number) {\n    const [r, g, b, a] = this.startValue.map((value, i) =>\n      this.easing(timeElapsed, value, this.byValue[i], this.duration, i),\n    ) as TRGBAColorSource;\n    const value = [\n      ...[r, g, b].map(Math.round),\n      capValue(0, a, 1),\n    ] as TRGBAColorSource;\n    return {\n      value,\n      valueProgress:\n        // to correctly calculate the change ratio we must find a changed value\n        value\n          .map((p, i) =>\n            this.byValue[i] !== 0\n              ? Math.abs((p - this.startValue[i]) / this.byValue[i])\n              : 0,\n          )\n          .find((p) => p !== 0) || 0,\n    };\n  }\n}\n", "import { ValueAnimation } from './ValueAnimation';\nimport { ArrayAnimation } from './ArrayAnimation';\nimport { ColorAnimation } from './ColorAnimation';\nimport type {\n  ValueAnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n} from './types';\nimport type { TColorArg } from '../../color/typedefs';\n\nexport type TAnimation<T extends number | number[] | TColorArg> =\n  T extends TColorArg\n    ? ColorAnimation\n    : T extends number[]\n      ? ArrayAnimation\n      : ValueAnimation;\n\nconst isArrayAnimation = (\n  options: ArrayAnimationOptions | ValueAnimationOptions,\n): options is ArrayAnimationOptions => {\n  return Array.isArray(options.startValue) || Array.isArray(options.endValue);\n};\n\n/**\n * Changes value(s) from startValue to endValue within a certain period of time,\n * invoking callbacks as the value(s) change.\n *\n * @example\n * animate({\n *   startValue: 1,\n *   endValue: 0,\n *   onChange: (v) => {\n *     obj.set('opacity', v);\n *     // since we are running in a requested frame we should call `renderAll` and not `requestRenderAll`\n *     canvas.renderAll();\n *   }\n * });\n *\n * @example Using lists:\n * animate({\n *   startValue: [1, 2, 3],\n *   endValue: [2, 4, 6],\n *   onChange: ([x, y, zoom]) => {\n *     canvas.zoomToPoint(new Point(x, y), zoom);\n *     canvas.renderAll();\n *   }\n * });\n *\n */\nexport function animate(options: ArrayAnimationOptions): ArrayAnimation;\nexport function animate(options: ValueAnimationOptions): ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n>(\n  options: T,\n): T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation;\nexport function animate<\n  T extends ValueAnimationOptions | ArrayAnimationOptions,\n  R extends T extends ArrayAnimationOptions ? ArrayAnimation : ValueAnimation,\n>(options: T): R {\n  const animation = (\n    isArrayAnimation(options)\n      ? new ArrayAnimation(options)\n      : new ValueAnimation(options)\n  ) as R;\n  animation.start();\n  return animation;\n}\n\nexport function animateColor(options: ColorAnimationOptions) {\n  const animation = new ColorAnimation(options);\n  animation.start();\n  return animation;\n}\n", "import { Point } from './Point';\nimport { createVector } from './util/misc/vectors';\n\n/* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\nexport type IntersectionType = 'Intersection' | 'Coincident' | 'Parallel';\n\nexport class Intersection {\n  declare points: Point[];\n\n  declare status?: IntersectionType;\n\n  constructor(status?: IntersectionType) {\n    this.status = status;\n    this.points = [];\n  }\n\n  /**\n   * Used to verify if a point is alredy in the collection\n   * @param {Point} point\n   * @returns {boolean}\n   */\n  private includes(point: Point): boolean {\n    return this.points.some((p) => p.eq(point));\n  }\n\n  /**\n   * Appends points of intersection\n   * @param {...Point[]} points\n   * @return {Intersection} thisArg\n   * @chainable\n   */\n  private append(...points: Point[]): Intersection {\n    this.points = this.points.concat(\n      points.filter((point) => {\n        return !this.includes(point);\n      }),\n    );\n    return this;\n  }\n\n  /**\n   * check if point T is on the segment or line defined between A and B\n   *\n   * @param {Point} T the point we are checking for\n   * @param {Point} A one extremity of the segment\n   * @param {Point} B the other extremity of the segment\n   * @param [infinite] if true checks if `T` is on the line defined by `A` and `B`\n   * @returns true if `T` is contained\n   */\n  static isPointContained(T: Point, A: Point, B: Point, infinite = false) {\n    if (A.eq(B)) {\n      // Edge case: the segment is a point, we check for coincidence,\n      // infinite param has no meaning because there are infinite lines to consider\n      return T.eq(A);\n    } else if (A.x === B.x) {\n      // Edge case: horizontal line.\n      // we first check if T.x has the same value, and then if T.y is contained between A.y and B.y\n      return (\n        T.x === A.x &&\n        (infinite || (T.y >= Math.min(A.y, B.y) && T.y <= Math.max(A.y, B.y)))\n      );\n    } else if (A.y === B.y) {\n      // Edge case: vertical line.\n      // we first check if T.y has the same value, and then if T.x is contained between A.x and B.x\n      return (\n        T.y === A.y &&\n        (infinite || (T.x >= Math.min(A.x, B.x) && T.x <= Math.max(A.x, B.x)))\n      );\n    } else {\n      // Generic case: sloped line.\n      // we check that AT has the same slope as AB\n      // for the segment case we need both the vectors to have the same direction and for AT to be lte AB in size\n      // for the infinite case we check the absolute value of the slope, since direction is meaningless\n      const AB = createVector(A, B);\n      const AT = createVector(A, T);\n      const s = AT.divide(AB);\n      return infinite\n        ? Math.abs(s.x) === Math.abs(s.y)\n        : s.x === s.y && s.x >= 0 && s.x <= 1;\n    }\n  }\n\n  /**\n   * Use the ray casting algorithm to determine if {@link point} is in the polygon defined by {@link points}\n   * @see https://en.wikipedia.org/wiki/Point_in_polygon\n   * @param point\n   * @param points polygon points\n   * @returns\n   */\n  static isPointInPolygon(point: Point, points: Point[]) {\n    const other = new Point(point).setX(\n      Math.min(point.x - 1, ...points.map((p) => p.x)),\n    );\n    let hits = 0;\n    for (let index = 0; index < points.length; index++) {\n      const inter = this.intersectSegmentSegment(\n        // polygon side\n        points[index],\n        points[(index + 1) % points.length],\n        // ray\n        point,\n        other,\n      );\n      if (inter.includes(point)) {\n        // point is on the polygon side\n        return true;\n      }\n      hits += Number(inter.status === 'Intersection');\n    }\n    return hits % 2 === 1;\n  }\n\n  /**\n   * Checks if a line intersects another\n   * @see {@link https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection line intersection}\n   * @see {@link https://en.wikipedia.org/wiki/Cramer%27s_rule Cramer's rule}\n   * @static\n   * @param {Point} a1\n   * @param {Point} a2\n   * @param {Point} b1\n   * @param {Point} b2\n   * @param {boolean} [aInfinite=true] check segment intersection by passing `false`\n   * @param {boolean} [bInfinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLineLine(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n    aInfinite = true,\n    bInfinite = true,\n  ): Intersection {\n    const a2xa1x = a2.x - a1.x,\n      a2ya1y = a2.y - a1.y,\n      b2xb1x = b2.x - b1.x,\n      b2yb1y = b2.y - b1.y,\n      a1xb1x = a1.x - b1.x,\n      a1yb1y = a1.y - b1.y,\n      uaT = b2xb1x * a1yb1y - b2yb1y * a1xb1x,\n      ubT = a2xa1x * a1yb1y - a2ya1y * a1xb1x,\n      uB = b2yb1y * a2xa1x - b2xb1x * a2ya1y;\n    if (uB !== 0) {\n      const ua = uaT / uB,\n        ub = ubT / uB;\n      if (\n        (aInfinite || (0 <= ua && ua <= 1)) &&\n        (bInfinite || (0 <= ub && ub <= 1))\n      ) {\n        return new Intersection('Intersection').append(\n          new Point(a1.x + ua * a2xa1x, a1.y + ua * a2ya1y),\n        );\n      } else {\n        return new Intersection();\n      }\n    } else {\n      if (uaT === 0 || ubT === 0) {\n        const segmentsCoincide =\n          aInfinite ||\n          bInfinite ||\n          Intersection.isPointContained(a1, b1, b2) ||\n          Intersection.isPointContained(a2, b1, b2) ||\n          Intersection.isPointContained(b1, a1, a2) ||\n          Intersection.isPointContained(b2, a1, a2);\n        return new Intersection(segmentsCoincide ? 'Coincident' : undefined);\n      } else {\n        return new Intersection('Parallel');\n      }\n    }\n  }\n\n  /**\n   * Checks if a segment intersects a line\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} s1 boundary point of segment\n   * @param {Point} s2 other boundary point of segment\n   * @param {Point} l1 point on line\n   * @param {Point} l2 other point on line\n   * @return {Intersection}\n   */\n  static intersectSegmentLine(\n    s1: Point,\n    s2: Point,\n    l1: Point,\n    l2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(s1, s2, l1, l2, false, true);\n  }\n\n  /**\n   * Checks if a segment intersects another\n   * @see {@link intersectLineLine} for line intersection\n   * @static\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point} b1 boundary point of segment\n   * @param {Point} b2 other boundary point of segment\n   * @return {Intersection}\n   */\n  static intersectSegmentSegment(\n    a1: Point,\n    a2: Point,\n    b1: Point,\n    b2: Point,\n  ): Intersection {\n    return Intersection.intersectLineLine(a1, a2, b1, b2, false, false);\n  }\n\n  /**\n   * Checks if line intersects polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @see {@link intersectSegmentPolygon} for segment intersection\n   * @param {Point} a1 point on line\n   * @param {Point} a2 other point on line\n   * @param {Point[]} points polygon points\n   * @param {boolean} [infinite=true] check segment intersection by passing `false`\n   * @return {Intersection}\n   */\n  static intersectLinePolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n    infinite = true,\n  ): Intersection {\n    const result = new Intersection();\n    const length = points.length;\n\n    for (let i = 0, b1, b2, inter; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2, infinite, false);\n      if (inter.status === 'Coincident') {\n        return inter;\n      }\n      result.append(...inter.points);\n    }\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if segment intersects polygon\n   * @static\n   * @see {@link intersectLinePolygon} for line intersection\n   * @param {Point} a1 boundary point of segment\n   * @param {Point} a2 other boundary point of segment\n   * @param {Point[]} points polygon points\n   * @return {Intersection}\n   */\n  static intersectSegmentPolygon(\n    a1: Point,\n    a2: Point,\n    points: Point[],\n  ): Intersection {\n    return Intersection.intersectLinePolygon(a1, a2, points, false);\n  }\n\n  /**\n   * Checks if polygon intersects another polygon\n   *\n   * @todo account for stroke\n   *\n   * @static\n   * @param {Point[]} points1\n   * @param {Point[]} points2\n   * @return {Intersection}\n   */\n  static intersectPolygonPolygon(\n    points1: Point[],\n    points2: Point[],\n  ): Intersection {\n    const result = new Intersection(),\n      length = points1.length;\n    const coincidences: Intersection[] = [];\n\n    for (let i = 0; i < length; i++) {\n      const a1 = points1[i],\n        a2 = points1[(i + 1) % length],\n        inter = Intersection.intersectSegmentPolygon(a1, a2, points2);\n      if (inter.status === 'Coincident') {\n        coincidences.push(inter);\n        result.append(a1, a2);\n      } else {\n        result.append(...inter.points);\n      }\n    }\n\n    if (coincidences.length > 0 && coincidences.length === points1.length) {\n      return new Intersection('Coincident');\n    } else if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @see {@link intersectPolygonPolygon} for polygon intersection\n   * @param {Point[]} points polygon points\n   * @param {Point} r1 top left point of rect\n   * @param {Point} r2 bottom right point of rect\n   * @return {Intersection}\n   */\n  static intersectPolygonRectangle(\n    points: Point[],\n    r1: Point,\n    r2: Point,\n  ): Intersection {\n    const min = r1.min(r2),\n      max = r1.max(r2),\n      topRight = new Point(max.x, min.y),\n      bottomLeft = new Point(min.x, max.y);\n\n    return Intersection.intersectPolygonPolygon(points, [\n      min,\n      topRight,\n      max,\n      bottomLeft,\n    ]);\n  }\n}\n", "import type {\n  TBBox,\n  TCornerPoint,\n  TDegree,\n  TMat2D,\n  TOriginX,\n  TOriginY,\n} from '../../typedefs';\nimport { SCALE_X, SCALE_Y, iMatrix } from '../../constants';\nimport { Intersection } from '../../Intersection';\nimport { Point } from '../../Point';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  createRotateMatrix,\n  createTranslateMatrix,\n  composeMatrix,\n  invertTransform,\n  multiplyTransformMatrices,\n  transformPoint,\n  calcPlaneRotation,\n} from '../../util/misc/matrix';\nimport { radiansToDegrees } from '../../util/misc/radiansDegreesConversion';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { StaticCanvas } from '../../canvas/StaticCanvas';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type { ControlProps } from './types/ControlProps';\nimport { resolveOrigin } from '../../util/misc/resolveOrigin';\nimport type { Group } from '../Group';\nimport { calcDimensionsMatrix } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport { CommonMethods } from '../../CommonMethods';\nimport type { BaseProps } from './types/BaseProps';\nimport type { FillStrokeProps } from './types/FillStrokeProps';\nimport { CENTER, LEFT, TOP } from '../../constants';\n\ntype TMatrixCache = {\n  key: number[];\n  value: TMat2D;\n};\n\ntype TACoords = TCornerPoint;\n\nexport class ObjectGeometry<EventSpec extends ObjectEvents = ObjectEvents>\n  extends CommonMethods<EventSpec>\n  implements\n    Pick<ControlProps, 'padding'>,\n    BaseProps,\n    Pick<FillStrokeProps, 'strokeWidth' | 'strokeUniform'>\n{\n  // #region Geometry\n\n  declare padding: number;\n\n  /**\n   * Describe object's corner position in scene coordinates.\n   * The coordinates are derived from the following:\n   * left, top, width, height, scaleX, scaleY, skewX, skewY, angle, strokeWidth.\n   * The coordinates do not depend on viewport changes.\n   * The coordinates get updated with {@link setCoords}.\n   * You can calculate them without updating with {@link calcACoords()}\n   */\n  declare aCoords: TACoords;\n\n  /**\n   * storage cache for object transform matrix\n   */\n  declare ownMatrixCache?: TMatrixCache;\n\n  /**\n   * storage cache for object full transform matrix\n   */\n  declare matrixCache?: TMatrixCache;\n\n  /**\n   * A Reference of the Canvas where the object is actually added\n   * @type StaticCanvas | Canvas;\n   * @default undefined\n   * @private\n   */\n  declare canvas?: StaticCanvas | Canvas;\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  getX(): number {\n    return this.getXY().x;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in canvas coordinate plane\n   */\n  setX(value: number) {\n    this.setXY(this.getXY().setX(value));\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  getY(): number {\n    return this.getXY().y;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in canvas coordinate plane\n   */\n  setY(value: number) {\n    this.setXY(this.getXY().setY(value));\n  }\n\n  /**\n   * @returns {number} x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getX}\n   */\n  getRelativeX(): number {\n    return this.left;\n  }\n\n  /**\n   * @param {number} value x position according to object's {@link originX} property in parent's coordinate plane\\\n   * if parent is canvas then this method is identical to {@link setX}\n   */\n  setRelativeX(value: number) {\n    this.left = value;\n  }\n\n  /**\n   * @returns {number} y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link getY}\n   */\n  getRelativeY(): number {\n    return this.top;\n  }\n\n  /**\n   * @param {number} value y position according to object's {@link originY} property in parent's coordinate plane\\\n   * if parent is canvas then this property is identical to {@link setY}\n   */\n  setRelativeY(value: number) {\n    this.top = value;\n  }\n\n  /**\n   * @returns {Point} x position according to object's {@link originX} {@link originY} properties in canvas coordinate plane\n   */\n  getXY(): Point {\n    const relativePosition = this.getRelativeXY();\n    return this.group\n      ? transformPoint(relativePosition, this.group.calcTransformMatrix())\n      : relativePosition;\n  }\n\n  /**\n   * Set an object position to a particular point, the point is intended in absolute ( canvas ) coordinate.\n   * You can specify {@link originX} and {@link originY} values,\n   * that otherwise are the object's current values.\n   * @example <caption>Set object's bottom left corner to point (5,5) on canvas</caption>\n   * object.setXY(new Point(5, 5), 'left', 'bottom').\n   * @param {Point} point position in scene coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setXY(point: Point, originX?: TOriginX, originY?: TOriginY) {\n    if (this.group) {\n      point = transformPoint(\n        point,\n        invertTransform(this.group.calcTransformMatrix()),\n      );\n    }\n    this.setRelativeXY(point, originX, originY);\n  }\n\n  /**\n   * @returns {Point} x,y position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   */\n  getRelativeXY(): Point {\n    return new Point(this.left, this.top);\n  }\n\n  /**\n   * As {@link setXY}, but in current parent's coordinate plane (the current group if any or the canvas)\n   * @param {Point} point position according to object's {@link originX} {@link originY} properties in parent's coordinate plane\n   * @param {TOriginX} [originX] Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} [originY] Vertical origin: 'top', 'center' or 'bottom'\n   */\n  setRelativeXY(\n    point: Point,\n    originX: TOriginX = this.originX,\n    originY: TOriginY = this.originY,\n  ) {\n    this.setPositionByOrigin(point, originX, originY);\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return false;\n  }\n\n  /**\n   * @return {Point[]} [tl, tr, br, bl] in the scene plane\n   */\n  getCoords(): Point[] {\n    const { tl, tr, br, bl } =\n      this.aCoords || (this.aCoords = this.calcACoords());\n    const coords = [tl, tr, br, bl];\n    if (this.group) {\n      const t = this.group.calcTransformMatrix();\n      return coords.map((p) => transformPoint(p, t));\n    }\n    return coords;\n  }\n\n  /**\n   * Checks if object intersects with the scene rect formed by {@link tl} and {@link br}\n   */\n  intersectsWithRect(tl: Point, br: Point): boolean {\n    const intersection = Intersection.intersectPolygonRectangle(\n      this.getCoords(),\n      tl,\n      br,\n    );\n    return intersection.status === 'Intersection';\n  }\n\n  /**\n   * Checks if object intersects with another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object intersects with another object\n   */\n  intersectsWithObject(other: ObjectGeometry): boolean {\n    const intersection = Intersection.intersectPolygonPolygon(\n      this.getCoords(),\n      other.getCoords(),\n    );\n\n    return (\n      intersection.status === 'Intersection' ||\n      intersection.status === 'Coincident' ||\n      other.isContainedWithinObject(this) ||\n      this.isContainedWithinObject(other)\n    );\n  }\n\n  /**\n   * Checks if object is fully contained within area of another object\n   * @param {Object} other Object to test\n   * @return {Boolean} true if object is fully contained within area of another object\n   */\n  isContainedWithinObject(other: ObjectGeometry): boolean {\n    const points = this.getCoords();\n    return points.every((point) => other.containsPoint(point));\n  }\n\n  /**\n   * Checks if object is fully contained within the scene rect formed by {@link tl} and {@link br}\n   */\n  isContainedWithinRect(tl: Point, br: Point): boolean {\n    const { left, top, width, height } = this.getBoundingRect();\n    return (\n      left >= tl.x &&\n      left + width <= br.x &&\n      top >= tl.y &&\n      top + height <= br.y\n    );\n  }\n\n  isOverlapping<T extends ObjectGeometry>(other: T): boolean {\n    return (\n      this.intersectsWithObject(other) ||\n      this.isContainedWithinObject(other) ||\n      other.isContainedWithinObject(this)\n    );\n  }\n\n  /**\n   * Checks if point is inside the object\n   * @param {Point} point Point to check against\n   * @return {Boolean} true if point is inside the object\n   */\n  containsPoint(point: Point): boolean {\n    return Intersection.isPointInPolygon(point, this.getCoords());\n  }\n\n  /**\n   * Checks if object is contained within the canvas with current viewportTransform\n   * the check is done stopping at first point that appears on screen\n   * @return {Boolean} true if object is fully or partially contained within canvas\n   */\n  isOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    const points = this.getCoords();\n    // if some point is on screen, the object is on screen.\n    if (\n      points.some(\n        (point) =>\n          point.x <= br.x &&\n          point.x >= tl.x &&\n          point.y <= br.y &&\n          point.y >= tl.y,\n      )\n    ) {\n      return true;\n    }\n    // no points on screen, check intersection with absolute coordinates\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    // check if the object is so big that it contains the entire viewport\n    return this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Checks if object is partially contained within the canvas with current viewportTransform\n   * @return {Boolean} true if object is partially contained within canvas\n   */\n  isPartiallyOnScreen(): boolean {\n    if (!this.canvas) {\n      return false;\n    }\n    const { tl, br } = this.canvas.vptCoords;\n    if (this.intersectsWithRect(tl, br)) {\n      return true;\n    }\n    const allPointsAreOutside = this.getCoords().every(\n      (point) =>\n        (point.x >= br.x || point.x <= tl.x) &&\n        (point.y >= br.y || point.y <= tl.y),\n    );\n    // check if the object is so big that it contains the entire viewport\n    return allPointsAreOutside && this.containsPoint(tl.midPointFrom(br));\n  }\n\n  /**\n   * Returns coordinates of object's bounding rectangle (left, top, width, height)\n   * the box is intended as aligned to axis of canvas.\n   * @return {Object} Object with left, top, width, height properties\n   */\n  getBoundingRect(): TBBox {\n    return makeBoundingBoxFromPoints(this.getCoords());\n  }\n\n  /**\n   * Returns width of an object's bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} width value\n   */\n  getScaledWidth(): number {\n    return this._getTransformedDimensions().x;\n  }\n\n  /**\n   * Returns height of an object bounding box counting transformations\n   * @todo shouldn't this account for group transform and return the actual size in canvas coordinate plane?\n   * @return {Number} height value\n   */\n  getScaledHeight(): number {\n    return this._getTransformedDimensions().y;\n  }\n\n  /**\n   * Scales an object (equally by x and y)\n   * @param {Number} value Scale factor\n   * @return {void}\n   */\n  scale(value: number): void {\n    this._set(SCALE_X, value);\n    this._set(SCALE_Y, value);\n    this.setCoords();\n  }\n\n  /**\n   * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New width value\n   * @return {void}\n   */\n  scaleToWidth(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().width / this.getScaledWidth();\n    return this.scale(value / this.width / boundingRectFactor);\n  }\n\n  /**\n   * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n   * @param {Number} value New height value\n   * @return {void}\n   */\n  scaleToHeight(value: number) {\n    // adjust to bounding rect factor so that rotated shapes would fit as well\n    const boundingRectFactor =\n      this.getBoundingRect().height / this.getScaledHeight();\n    return this.scale(value / this.height / boundingRectFactor);\n  }\n\n  getCanvasRetinaScaling() {\n    return this.canvas?.getRetinaScaling() || 1;\n  }\n\n  /**\n   * Returns the object angle relative to canvas counting also the group property\n   * @returns {TDegree}\n   */\n  getTotalAngle(): TDegree {\n    return this.group\n      ? radiansToDegrees(calcPlaneRotation(this.calcTransformMatrix()))\n      : this.angle;\n  }\n\n  /**\n   * Retrieves viewportTransform from Object's canvas if available\n   * @return {TMat2D}\n   */\n  getViewportTransform(): TMat2D {\n    return this.canvas?.viewportTransform || (iMatrix.concat() as TMat2D);\n  }\n\n  /**\n   * Calculates the coordinates of the 4 corner of the bbox, in absolute coordinates.\n   * those never change with zoom or viewport changes.\n   * @return {TCornerPoint}\n   */\n  calcACoords(): TCornerPoint {\n    const rotateMatrix = createRotateMatrix({ angle: this.angle }),\n      { x, y } = this.getRelativeCenterPoint(),\n      tMatrix = createTranslateMatrix(x, y),\n      finalMatrix = multiplyTransformMatrices(tMatrix, rotateMatrix),\n      dim = this._getTransformedDimensions(),\n      w = dim.x / 2,\n      h = dim.y / 2;\n    return {\n      // corners\n      tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n      tr: transformPoint({ x: w, y: -h }, finalMatrix),\n      bl: transformPoint({ x: -w, y: h }, finalMatrix),\n      br: transformPoint({ x: w, y: h }, finalMatrix),\n    };\n  }\n\n  /**\n   * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n   * aCoords are used to quickly find an object on the canvas.\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   */\n  setCoords(): void {\n    this.aCoords = this.calcACoords();\n  }\n\n  transformMatrixKey(skipGroup = false): number[] {\n    let prefix: number[] = [];\n    if (!skipGroup && this.group) {\n      prefix = this.group.transformMatrixKey(skipGroup);\n    }\n    prefix.push(\n      this.top,\n      this.left,\n      this.width,\n      this.height,\n      this.scaleX,\n      this.scaleY,\n      this.angle,\n      this.strokeWidth,\n      this.skewX,\n      this.skewY,\n      +this.flipX,\n      +this.flipY,\n      resolveOrigin(this.originX),\n      resolveOrigin(this.originY),\n    );\n\n    return prefix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties.\n   * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n   * There are some situation in which this is useful to avoid the fake rotation.\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcTransformMatrix(skipGroup = false): TMat2D {\n    let matrix = this.calcOwnMatrix();\n    if (skipGroup || !this.group) {\n      return matrix;\n    }\n    const key = this.transformMatrixKey(skipGroup),\n      cache = this.matrixCache;\n    if (cache && cache.key.every((x, i) => x === key[i])) {\n      return cache.value;\n    }\n    if (this.group) {\n      matrix = multiplyTransformMatrices(\n        this.group.calcTransformMatrix(false),\n        matrix,\n      );\n    }\n    this.matrixCache = {\n      key,\n      value: matrix,\n    };\n    return matrix;\n  }\n\n  /**\n   * calculate transform matrix that represents the current transformations from the\n   * object's properties, this matrix does not include the group transformation\n   * @return {TMat2D} transform matrix for the object\n   */\n  calcOwnMatrix(): TMat2D {\n    const key = this.transformMatrixKey(true),\n      cache = this.ownMatrixCache;\n    if (cache && cache.key === key) {\n      return cache.value;\n    }\n    const center = this.getRelativeCenterPoint(),\n      options = {\n        angle: this.angle,\n        translateX: center.x,\n        translateY: center.y,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: this.skewX,\n        skewY: this.skewY,\n        flipX: this.flipX,\n        flipY: this.flipY,\n      },\n      value = composeMatrix(options);\n    this.ownMatrixCache = {\n      key,\n      value,\n    };\n    return value;\n  }\n\n  /**\n   * Calculate object dimensions from its properties\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getNonTransformedDimensions(): Point {\n    return new Point(this.width, this.height).scalarAdd(this.strokeWidth);\n  }\n\n  /**\n   * Calculate object dimensions for controls box, including padding and canvas zoom.\n   * and active selection\n   * @private\n   * @param {object} [options] transform options\n   * @returns {Point} dimensions\n   */\n  _calculateCurrentDimensions(options?: any): Point {\n    return this._getTransformedDimensions(options)\n      .transform(this.getViewportTransform(), true)\n      .scalarAdd(2 * this.padding);\n  }\n\n  // #region Origin\n\n  declare top: number;\n  declare left: number;\n  declare width: number;\n  declare height: number;\n  declare flipX: boolean;\n  declare flipY: boolean;\n  declare scaleX: number;\n  declare scaleY: number;\n  declare skewX: number;\n  declare skewY: number;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originX: TOriginX;\n  /**\n   * @deprecated please use 'center' as value in new projects\n   * */\n  declare originY: TOriginY;\n  declare angle: TDegree;\n  declare strokeWidth: number;\n  declare strokeUniform: boolean;\n\n  /**\n   * Object containing this object.\n   * can influence its size and position\n   */\n  declare group?: Group;\n\n  /**\n   * Calculate object bounding box dimensions from its properties scale, skew.\n   * This bounding box is aligned with object angle and not with canvas axis or screen.\n   * @param {Object} [options]\n   * @param {Number} [options.scaleX]\n   * @param {Number} [options.scaleY]\n   * @param {Number} [options.skewX]\n   * @param {Number} [options.skewY]\n   * @private\n   * @returns {Point} dimensions\n   */\n  _getTransformedDimensions(options: any = {}): Point {\n    const dimOptions = {\n      // if scaleX or scaleY are negative numbers,\n      // this will return dimensions that are negative.\n      // and this will break assumptions around the codebase\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      width: this.width,\n      height: this.height,\n      strokeWidth: this.strokeWidth,\n      ...options,\n    };\n    // stroke is applied before/after transformations are applied according to `strokeUniform`\n    const strokeWidth = dimOptions.strokeWidth;\n    let preScalingStrokeValue = strokeWidth,\n      postScalingStrokeValue = 0;\n\n    if (this.strokeUniform) {\n      preScalingStrokeValue = 0;\n      postScalingStrokeValue = strokeWidth;\n    }\n    const dimX = dimOptions.width + preScalingStrokeValue,\n      dimY = dimOptions.height + preScalingStrokeValue,\n      noSkew = dimOptions.skewX === 0 && dimOptions.skewY === 0;\n    let finalDimensions;\n    if (noSkew) {\n      finalDimensions = new Point(\n        dimX * dimOptions.scaleX,\n        dimY * dimOptions.scaleY,\n      );\n    } else {\n      finalDimensions = sizeAfterTransform(\n        dimX,\n        dimY,\n        calcDimensionsMatrix(dimOptions),\n      );\n    }\n\n    return finalDimensions.scalarAdd(postScalingStrokeValue);\n  }\n\n  /**\n   * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @param {TOriginX} toOriginX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToGivenOrigin(\n    point: Point,\n    fromOriginX: TOriginX,\n    fromOriginY: TOriginY,\n    toOriginX: TOriginX,\n    toOriginY: TOriginY,\n  ): Point {\n    let x = point.x,\n      y = point.y;\n    const offsetX = resolveOrigin(toOriginX) - resolveOrigin(fromOriginX),\n      offsetY = resolveOrigin(toOriginY) - resolveOrigin(fromOriginY);\n\n    if (offsetX || offsetY) {\n      const dim = this._getTransformedDimensions();\n      x += offsetX * dim.x;\n      y += offsetY * dim.y;\n    }\n\n    return new Point(x, y);\n  }\n\n  /**\n   * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n   * @param {Point} point The point which corresponds to the originX and originY params\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToCenterPoint(\n    point: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    if (originX === CENTER && originY === CENTER) {\n      return point;\n    }\n    const p = this.translateToGivenOrigin(\n      point,\n      originX,\n      originY,\n      CENTER,\n      CENTER,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), point);\n    }\n    return p;\n  }\n\n  /**\n   * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n   * @param {Point} center The point which corresponds to center of the object\n   * @param {OriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {OriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  translateToOriginPoint(\n    center: Point,\n    originX: TOriginX,\n    originY: TOriginY,\n  ): Point {\n    const p = this.translateToGivenOrigin(\n      center,\n      CENTER,\n      CENTER,\n      originX,\n      originY,\n    );\n    if (this.angle) {\n      return p.rotate(degreesToRadians(this.angle), center);\n    }\n    return p;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to canvas\n   * @return {Point}\n   */\n  getCenterPoint(): Point {\n    const relCenter = this.getRelativeCenterPoint();\n    return this.group\n      ? transformPoint(relCenter, this.group.calcTransformMatrix())\n      : relCenter;\n  }\n\n  /**\n   * Returns the center coordinates of the object relative to it's parent\n   * @return {Point}\n   */\n  getRelativeCenterPoint(): Point {\n    return this.translateToCenterPoint(\n      new Point(this.left, this.top),\n      this.originX,\n      this.originY,\n    );\n  }\n\n  /**\n   * Returns the position of the object as if it has a different origin.\n   * Take an object that has left, top set to 100, 100 with origin 'left', 'top'.\n   * Return the values of left top ( wrapped in a point ) that you would need to keep\n   * the same position if origin where different.\n   * Alternatively you can use this to also find which point in the parent plane is a specific origin\n   * ( where is the bottom right corner of my object? )\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {Point}\n   */\n  getPointByOrigin(originX: TOriginX, originY: TOriginY): Point {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      originX,\n      originY,\n    );\n  }\n\n  /**\n   * Sets the position of the object taking into consideration the object's origin\n   * @param {Point} pos The new position of the object\n   * @param {TOriginX} originX Horizontal origin: 'left', 'center' or 'right'\n   * @param {TOriginY} originY Vertical origin: 'top', 'center' or 'bottom'\n   * @return {void}\n   */\n  setPositionByOrigin(pos: Point, originX: TOriginX, originY: TOriginY) {\n    const center = this.translateToCenterPoint(pos, originX, originY),\n      position = this.translateToOriginPoint(\n        center,\n        this.originX,\n        this.originY,\n      );\n    this.set({ left: position.x, top: position.y });\n  }\n\n  /**\n   * @private\n   */\n  _getLeftTopCoords() {\n    return this.translateToOriginPoint(\n      this.getRelativeCenterPoint(),\n      LEFT,\n      TOP,\n    );\n  }\n}\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport {\n  ALIASING_LIMIT,\n  CENTER,\n  iMatrix,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  STROKE,\n  FILL,\n  TOP,\n  VERSION,\n} from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport { Shadow } from '../../Shadow';\nimport type {\n  TDegree,\n  TFiller,\n  TSize,\n  TCacheCanvasDimensions,\n  Abortable,\n  TOptions,\n  ImageFormat,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { runningAnimations } from '../../util/animation/AnimationRegistry';\nimport { capValue } from '../../util/misc/capValue';\nimport {\n  createCanvasElement,\n  createCanvasElementFor,\n  toDataURL,\n} from '../../util/misc/dom';\nimport { invertTransform, qrDecompose } from '../../util/misc/matrix';\nimport { enlivenObjectEnlivables } from '../../util/misc/objectEnlive';\nimport {\n  resetObjectTransform,\n  saveObjectTransform,\n} from '../../util/misc/objectTransforms';\nimport { sendObjectToPlane } from '../../util/misc/planeChange';\nimport { pick, pickBy } from '../../util/misc/pick';\nimport { toFixed } from '../../util/misc/toFixed';\nimport type { Group } from '../Group';\nimport { StaticCanvas } from '../../canvas/StaticCanvas';\nimport {\n  isFiller,\n  isSerializableFiller,\n  isTextObject,\n} from '../../util/typeAssertions';\nimport type { FabricImage } from '../Image';\nimport {\n  cacheProperties,\n  fabricObjectDefaultValues,\n  stateProperties,\n} from './defaultValues';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { SerializedObjectProps } from './types/SerializedObjectProps';\nimport type { ObjectProps } from './types/ObjectProps';\nimport { getDevicePixelRatio, getEnv } from '../../env';\nimport { log } from '../../util/internals/console';\nimport type { TColorArg } from '../../color/typedefs';\nimport type { TAnimation } from '../../util/animation/animate';\nimport { animate, animateColor } from '../../util/animation/animate';\nimport type {\n  AnimationOptions,\n  ArrayAnimationOptions,\n  ColorAnimationOptions,\n  ValueAnimationOptions,\n} from '../../util/animation/types';\nimport { ObjectGeometry } from './ObjectGeometry';\n\ntype TAncestor = FabricObject;\ntype TCollection = Group;\n\nexport type Ancestors =\n  | [FabricObject | Group]\n  | [FabricObject | Group, ...Group[]]\n  | Group[];\n\nexport type AncestryComparison = {\n  /**\n   * common ancestors of `this` and`other`(may include`this` | `other`)\n   */\n  common: Ancestors;\n  /**\n   * ancestors that are of `this` only\n   */\n  fork: Ancestors;\n  /**\n   * ancestors that are of `other` only\n   */\n  otherFork: Ancestors;\n};\n\nexport type TCachedFabricObject<T extends FabricObject = FabricObject> = T &\n  Required<\n    Pick<\n      T,\n      | 'zoomX'\n      | 'zoomY'\n      | '_cacheCanvas'\n      | '_cacheContext'\n      | 'cacheTranslationX'\n      | 'cacheTranslationY'\n    >\n  > & {\n    _cacheContext: CanvasRenderingContext2D;\n  };\n\nexport type ObjectToCanvasElementOptions = {\n  format?: ImageFormat;\n  /** Multiplier to scale by */\n  multiplier?: number;\n  /** Cropping left offset. Introduced in v1.2.14 */\n  left?: number;\n  /** Cropping top offset. Introduced in v1.2.14 */\n  top?: number;\n  /** Cropping width. Introduced in v1.2.14 */\n  width?: number;\n  /** Cropping height. Introduced in v1.2.14 */\n  height?: number;\n  /** Enable retina scaling for clone image. Introduce in 1.6.4 */\n  enableRetinaScaling?: boolean;\n  /** Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4 */\n  withoutTransform?: boolean;\n  /** Remove current object shadow. Introduced in 2.4.2 */\n  withoutShadow?: boolean;\n  /** Account for canvas viewport transform */\n  viewportTransform?: boolean;\n  /** Function to create the output canvas to export onto */\n  canvasProvider?: <T extends StaticCanvas>(el?: HTMLCanvasElement) => T;\n};\n\ntype toDataURLOptions = ObjectToCanvasElementOptions & {\n  quality?: number;\n};\n\nexport type DrawContext =\n  | {\n      parentClipPaths: FabricObject[];\n      width: number;\n      height: number;\n      cacheTranslationX: number;\n      cacheTranslationY: number;\n      zoomX: number;\n      zoomY: number;\n    }\n  | Record<string, never>;\n\n/**\n * Root object class from which all 2d shape classes inherit from\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n *\n * @fires added\n * @fires removed\n *\n * @fires selected\n * @fires deselected\n *\n * @fires rotating\n * @fires scaling\n * @fires moving\n * @fires skewing\n * @fires modified\n *\n * @fires mousedown\n * @fires mouseup\n * @fires mouseover\n * @fires mouseout\n * @fires mousewheel\n * @fires mousedblclick\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drop\n */\nexport class FabricObject<\n    Props extends TOptions<ObjectProps> = Partial<ObjectProps>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends ObjectGeometry<EventSpec>\n  implements ObjectProps\n{\n  declare minScaleLimit: number;\n\n  declare opacity: number;\n\n  declare paintFirst: 'fill' | 'stroke';\n  declare fill: string | TFiller | null;\n  declare fillRule: CanvasFillRule;\n  declare stroke: string | TFiller | null;\n  declare strokeDashArray: number[] | null;\n  declare strokeDashOffset: number;\n  declare strokeLineCap: CanvasLineCap;\n  declare strokeLineJoin: CanvasLineJoin;\n  declare strokeMiterLimit: number;\n\n  declare globalCompositeOperation: GlobalCompositeOperation;\n  declare backgroundColor: string;\n\n  declare shadow: Shadow | null;\n\n  declare visible: boolean;\n\n  declare includeDefaultValues: boolean;\n  declare excludeFromExport: boolean;\n\n  declare objectCaching: boolean;\n\n  declare clipPath?: FabricObject;\n  declare inverted: boolean;\n  declare absolutePositioned: boolean;\n  declare centeredRotation: boolean;\n  declare centeredScaling: boolean;\n\n  /**\n   * This list of properties is used to check if the state of an object is changed.\n   * This state change now is only used for children of groups to understand if a group\n   * needs its cache regenerated during a .set call\n   * @type Array\n   */\n  static stateProperties: string[] = stateProperties;\n\n  /**\n   * List of properties to consider when checking if cache needs refresh\n   * Those properties are checked by\n   * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n   * and refreshed at the next render\n   * @type Array\n   */\n  static cacheProperties: string[] = cacheProperties;\n\n  /**\n   * When set to `true`, object's cache will be rerendered next render call.\n   * since 1.7.0\n   * @type Boolean\n   * @default true\n   */\n  declare dirty: boolean;\n\n  /**\n   * Quick access for the _cacheCanvas rendering context\n   * This is part of the objectCaching feature\n   * since 1.7.0\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  _cacheContext: CanvasRenderingContext2D | null = null;\n\n  /**\n   * A reference to the HTMLCanvasElement that is used to contain the cache of the object\n   * this canvas element is resized and cleared as needed\n   * Is marked private, you can read it, don't use it since it is handled by fabric\n   * since 1.7.0\n   * @type HTMLCanvasElement\n   * @default undefined\n   * @private\n   */\n  declare _cacheCanvas?: HTMLCanvasElement;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, X axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomX?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare zoomY?: number;\n\n  /**\n   * zoom level used on the cacheCanvas to draw the cache, Y axe\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationX?: number;\n\n  /**\n   * translation of the cacheCanvas away from the center, for subpixel accuracy and crispness\n   * since 1.7.0\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare cacheTranslationY?: number;\n\n  /**\n   * A reference to the parent of the object, usually a Group\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare group?: Group;\n\n  /**\n   * Indicate if the object is sitting on a cache dedicated to it\n   * or is part of a larger cache for many object ( a group for example)\n   * @type number\n   * @default undefined\n   * @private\n   */\n  declare ownCaching?: boolean;\n\n  /**\n   * Private. indicates if the object inside a group is on a transformed context or not\n   * or is part of a larger cache for many object ( a group for example)\n   * @type boolean\n   * @default undefined\n   * @private\n   */\n  declare _transformDone?: boolean;\n\n  static ownDefaults = fabricObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return FabricObject.ownDefaults;\n  }\n\n  /**\n   * The class type.\n   * This is used for serialization and deserialization purposes and internally it can be used\n   * to identify classes.\n   * When we transform a class in a plain JS object we need a way to recognize which class it was,\n   * and the type is the way we do that. It has no other purposes and you should not give one.\n   * Hard to reach on instances and please do not use to drive instance's logic (this.constructor.type).\n   * To idenfity a class use instanceof class ( instanceof Rect ).\n   * We do not do that in fabricJS code because we want to try to have code splitting possible.\n   */\n  static type = 'FabricObject';\n\n  /**\n   * Legacy identifier of the class. Prefer using utils like isType or instanceOf\n   * Will be removed in fabric 7 or 8.\n   * The setter exists to avoid type errors in old code and possibly current deserialization code.\n   * DO NOT build new code around this type value\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    const name = (this.constructor as typeof FabricObject).type;\n    if (name === 'FabricObject') {\n      return 'object';\n    }\n    return name.toLowerCase();\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, FabricObject.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * Create a the canvas used to keep the cached copy of the object\n   * @private\n   */\n  _createCacheCanvas() {\n    this._cacheCanvas = createCanvasElement();\n    this._cacheContext = this._cacheCanvas.getContext('2d');\n    this._updateCacheCanvas();\n    // if canvas gets created, is empty, so dirty.\n    this.dirty = true;\n  }\n\n  /**\n   * Limit the cache dimensions so that X * Y do not cross config.perfLimitSizeTotal\n   * and each side do not cross fabric.cacheSideLimit\n   * those numbers are configurable so that you can get as much detail as you want\n   * making bargain with performances.\n   * @param {Object} dims\n   * @param {Object} dims.width width of canvas\n   * @param {Object} dims.height height of canvas\n   * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _limitCacheSize(\n    dims: TSize & { zoomX: number; zoomY: number; capped: boolean } & any,\n  ) {\n    const width = dims.width,\n      height = dims.height,\n      max = config.maxCacheSideLimit,\n      min = config.minCacheSideLimit;\n    if (\n      width <= max &&\n      height <= max &&\n      width * height <= config.perfLimitSizeTotal\n    ) {\n      if (width < min) {\n        dims.width = min;\n      }\n      if (height < min) {\n        dims.height = min;\n      }\n      return dims;\n    }\n    const ar = width / height,\n      [limX, limY] = cache.limitDimsByArea(ar),\n      x = capValue(min, limX, max),\n      y = capValue(min, limY, max);\n    if (width > x) {\n      dims.zoomX /= width / x;\n      dims.width = x;\n      dims.capped = true;\n    }\n    if (height > y) {\n      dims.zoomY /= height / y;\n      dims.height = y;\n      dims.capped = true;\n    }\n    return dims;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @return {Object}.x width of object to be cached\n   * @return {Object}.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const objectScale = this.getTotalObjectScaling(),\n      // calculate dimensions without skewing\n      dim = this._getTransformedDimensions({ skewX: 0, skewY: 0 }),\n      neededX = (dim.x * objectScale.x) / this.scaleX,\n      neededY = (dim.y * objectScale.y) / this.scaleY;\n    return {\n      // for sure this ALIASING_LIMIT is slightly creating problem\n      // in situation in which the cache canvas gets an upper limit\n      // also objectScale contains already scaleX and scaleY\n      width: neededX + ALIASING_LIMIT,\n      height: neededY + ALIASING_LIMIT,\n      zoomX: objectScale.x,\n      zoomY: objectScale.y,\n      x: neededX,\n      y: neededY,\n    };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const canvas = this._cacheCanvas!,\n      context = this._cacheContext,\n      dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      minCacheSize = config.minCacheSideLimit,\n      width = dims.width,\n      height = dims.height,\n      zoomX = dims.zoomX,\n      zoomY = dims.zoomY,\n      dimensionsChanged = width !== canvas.width || height !== canvas.height,\n      zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY;\n\n    if (!canvas || !context) {\n      return false;\n    }\n\n    let drawingWidth,\n      drawingHeight,\n      shouldRedraw = dimensionsChanged || zoomChanged,\n      additionalWidth = 0,\n      additionalHeight = 0,\n      shouldResizeCanvas = false;\n\n    if (dimensionsChanged) {\n      const canvasWidth = (this._cacheCanvas as HTMLCanvasElement).width,\n        canvasHeight = (this._cacheCanvas as HTMLCanvasElement).height,\n        sizeGrowing = width > canvasWidth || height > canvasHeight,\n        sizeShrinking =\n          (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n          canvasWidth > minCacheSize &&\n          canvasHeight > minCacheSize;\n      shouldResizeCanvas = sizeGrowing || sizeShrinking;\n      if (\n        sizeGrowing &&\n        !dims.capped &&\n        (width > minCacheSize || height > minCacheSize)\n      ) {\n        additionalWidth = width * 0.1;\n        additionalHeight = height * 0.1;\n      }\n    }\n    if (isTextObject(this) && this.path) {\n      shouldRedraw = true;\n      shouldResizeCanvas = true;\n      // IMHO in those lines we are using zoomX and zoomY not the this version.\n      additionalWidth += this.getHeightOfLine(0) * this.zoomX!;\n      additionalHeight += this.getHeightOfLine(0) * this.zoomY!;\n    }\n    if (shouldRedraw) {\n      if (shouldResizeCanvas) {\n        canvas.width = Math.ceil(width + additionalWidth);\n        canvas.height = Math.ceil(height + additionalHeight);\n      } else {\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.clearRect(0, 0, canvas.width, canvas.height);\n      }\n      drawingWidth = dims.x / 2;\n      drawingHeight = dims.y / 2;\n      this.cacheTranslationX =\n        Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n      this.cacheTranslationY =\n        Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n      context.translate(this.cacheTranslationX, this.cacheTranslationY);\n      context.scale(zoomX, zoomY);\n      this.zoomX = zoomX;\n      this.zoomY = zoomY;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets object's properties from options, for class constructor only.\n   * Needs to be overridden for different defaults.\n   * @protected\n   * @param {Object} [options] Options object\n   */\n  protected setOptions(options: Record<string, any> = {}) {\n    this._setOptions(options);\n  }\n\n  /**\n   * Transforms context when rendering an object\n   * @param {CanvasRenderingContext2D} ctx Context\n   */\n  transform(ctx: CanvasRenderingContext2D) {\n    const needFullTransform =\n      (this.group && !this.group._transformDone) ||\n      (this.group && this.canvas && ctx === (this.canvas as Canvas).contextTop);\n    const m = this.calcTransformMatrix(!needFullTransform);\n    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling\n   * @return {Point}\n   */\n  getObjectScaling() {\n    // if the object is a top level one, on the canvas, we go for simple aritmetic\n    // otherwise the complex method with angles will return approximations and decimals\n    // and will likely kill the cache when not needed\n    // https://github.com/fabricjs/fabric.js/issues/7157\n    if (!this.group) {\n      return new Point(Math.abs(this.scaleX), Math.abs(this.scaleY));\n    }\n    // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n    const options = qrDecompose(this.calcTransformMatrix());\n    return new Point(Math.abs(options.scaleX), Math.abs(options.scaleY));\n  }\n\n  /**\n   * Return the object scale factor counting also the group scaling, zoom and retina\n   * @return {Object} object with scaleX and scaleY properties\n   */\n  getTotalObjectScaling() {\n    const scale = this.getObjectScaling();\n    if (this.canvas) {\n      const zoom = this.canvas.getZoom();\n      const retina = this.getCanvasRetinaScaling();\n      return scale.scalarMultiply(zoom * retina);\n    }\n    return scale;\n  }\n\n  /**\n   * Return the object opacity counting also the group property\n   * @return {Number}\n   */\n  getObjectOpacity() {\n    let opacity = this.opacity;\n    if (this.group) {\n      opacity *= this.group.getObjectOpacity();\n    }\n    return opacity;\n  }\n\n  /**\n   * Makes sure the scale is valid and modifies it if necessary\n   * @todo: this is a control action issue, not a geometry one\n   * @private\n   * @param {Number} value, unconstrained\n   * @return {Number} constrained value;\n   */\n  _constrainScale(value: number): number {\n    if (Math.abs(value) < this.minScaleLimit) {\n      if (value < 0) {\n        return -this.minScaleLimit;\n      } else {\n        return this.minScaleLimit;\n      }\n    } else if (value === 0) {\n      return 0.0001;\n    }\n    return value;\n  }\n\n  /**\n   * Handles setting values on the instance and handling internal side effects\n   * @protected\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (key === SCALE_X || key === SCALE_Y) {\n      value = this._constrainScale(value);\n    }\n    if (key === SCALE_X && value < 0) {\n      this.flipX = !this.flipX;\n      value *= -1;\n    } else if (key === 'scaleY' && value < 0) {\n      this.flipY = !this.flipY;\n      value *= -1;\n      // i don't like this automatic initialization here\n    } else if (key === 'shadow' && value && !(value instanceof Shadow)) {\n      value = new Shadow(value);\n    }\n\n    const isChanged = this[key as keyof this] !== value;\n    this[key as keyof this] = value;\n\n    // invalidate caches\n    if (\n      isChanged &&\n      (this.constructor as typeof FabricObject).cacheProperties.includes(key)\n    ) {\n      this.dirty = true;\n    }\n    // a dirty child makes the parent dirty.\n    // but a non dirty child does not make the parent not dirty.\n    // the parent could be dirty for some other reason.\n    this.parent &&\n      (this.dirty ||\n        (isChanged &&\n          (this.constructor as typeof FabricObject).stateProperties.includes(\n            key,\n          ))) &&\n      this.parent._set('dirty', true);\n\n    return this;\n  }\n\n  /*\n   * @private\n   * return if the object would be visible in rendering\n   * @memberOf FabricObject.prototype\n   * @return {Boolean}\n   */\n  isNotVisible() {\n    return (\n      this.opacity === 0 ||\n      (!this.width && !this.height && this.strokeWidth === 0) ||\n      !this.visible\n    );\n  }\n\n  /**\n   * Renders an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    // do not render if width/height are zeros or object is not visible\n    if (this.isNotVisible()) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    ctx.save();\n    this._setupCompositeOperation(ctx);\n    this.drawSelectionBackground(ctx);\n    this.transform(ctx);\n    this._setOpacity(ctx);\n    this._setShadow(ctx);\n    if (this.shouldCache()) {\n      (this as TCachedFabricObject).renderCache();\n      (this as TCachedFabricObject).drawCacheOnCanvas(ctx);\n    } else {\n      this._removeCacheCanvas();\n      this.drawObject(ctx, false, {});\n      this.dirty = false;\n    }\n    ctx.restore();\n  }\n\n  drawSelectionBackground(_ctx: CanvasRenderingContext2D) {\n    /* no op */\n  }\n\n  renderCache(this: TCachedFabricObject, options?: any) {\n    options = options || {};\n    if (!this._cacheCanvas || !this._cacheContext) {\n      this._createCacheCanvas();\n    }\n    if (this.isCacheDirty() && this._cacheContext) {\n      const { zoomX, zoomY, cacheTranslationX, cacheTranslationY } = this;\n      const { width, height } = this._cacheCanvas;\n      this.drawObject(this._cacheContext, options.forClipping, {\n        zoomX,\n        zoomY,\n        cacheTranslationX,\n        cacheTranslationY,\n        width,\n        height,\n        parentClipPaths: [],\n      });\n      this.dirty = false;\n    }\n  }\n\n  /**\n   * Remove cacheCanvas and its dimensions from the objects\n   */\n  _removeCacheCanvas() {\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  /**\n   * return true if the object will draw a stroke\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when stroke happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the stroke is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasStroke() {\n    return (\n      this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0\n    );\n  }\n\n  /**\n   * return true if the object will draw a fill\n   * Does not consider text styles. This is just a shortcut used at rendering time\n   * We want it to be an approximation and be fast.\n   * wrote to avoid extra caching, it has to return true when fill happens,\n   * can guess when it will not happen at 100% chance, does not matter if it misses\n   * some use case where the fill is invisible.\n   * @since 3.0.0\n   * @returns Boolean\n   */\n  hasFill() {\n    return this.fill && this.fill !== 'transparent';\n  }\n\n  /**\n   * When set to `true`, force the object to have its own cache, even if it is inside a group\n   * it may be needed when your object behave in a particular way on the cache and always needs\n   * its own isolated canvas to render correctly.\n   * Created to be overridden\n   * since 1.7.12\n   * @returns Boolean\n   */\n  needsItsOwnCache() {\n    if (\n      this.paintFirst === STROKE &&\n      this.hasFill() &&\n      this.hasStroke() &&\n      !!this.shadow\n    ) {\n      return true;\n    }\n    if (this.clipPath) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    this.ownCaching =\n      this.needsItsOwnCache() ||\n      (this.objectCaching && (!this.parent || !this.parent.isOnACache()));\n    return this.ownCaching;\n  }\n\n  /**\n   * Check if this object will cast a shadow with an offset.\n   * used by Group.shouldCache to know if child has a shadow recursively\n   * @return {Boolean}\n   * @deprecated\n   */\n  willDrawShadow() {\n    return (\n      !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0)\n    );\n  }\n\n  /**\n   * Execute the drawing operation for an object clipPath\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {FabricObject} clipPath\n   */\n  drawClipPathOnCache(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject,\n    canvasWithClipPath: HTMLCanvasElement,\n  ) {\n    ctx.save();\n    // DEBUG: uncomment this line, comment the following\n    // ctx.globalAlpha = 0.4\n    if (clipPath.inverted) {\n      ctx.globalCompositeOperation = 'destination-out';\n    } else {\n      ctx.globalCompositeOperation = 'destination-in';\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    //ctx.scale(1 / 2, 1 / 2);\n    ctx.drawImage(canvasWithClipPath, 0, 0);\n    ctx.restore();\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {boolean} forClipping apply clipping styles\n   * @param {DrawContext} context additional context for rendering\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    const originalFill = this.fill,\n      originalStroke = this.stroke;\n    if (forClipping) {\n      this.fill = 'black';\n      this.stroke = '';\n      this._setClippingProperties(ctx);\n    } else {\n      this._renderBackground(ctx);\n    }\n    this._render(ctx);\n    this._drawClipPath(ctx, this.clipPath, context);\n    this.fill = originalFill;\n    this.stroke = originalStroke;\n  }\n\n  private createClipPathLayer(\n    this: TCachedFabricObject,\n    clipPath: FabricObject,\n    context: DrawContext,\n  ) {\n    const canvas = createCanvasElementFor(context as TSize);\n    const ctx = canvas.getContext('2d')!;\n    ctx.translate(context.cacheTranslationX, context.cacheTranslationY);\n    ctx.scale(context.zoomX, context.zoomY);\n    clipPath._cacheCanvas = canvas;\n    context.parentClipPaths.forEach((prevClipPath) => {\n      prevClipPath.transform(ctx);\n    });\n    context.parentClipPaths.push(clipPath);\n    if (clipPath.absolutePositioned) {\n      const m = invertTransform(this.calcTransformMatrix());\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    }\n    clipPath.transform(ctx);\n    clipPath.drawObject(ctx, true, context);\n    return canvas;\n  }\n\n  /**\n   * Prepare clipPath state and cache and draw it on instance's cache\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {FabricObject} clipPath\n   */\n  _drawClipPath(\n    ctx: CanvasRenderingContext2D,\n    clipPath: FabricObject | undefined,\n    context: DrawContext,\n  ) {\n    if (!clipPath) {\n      return;\n    }\n    // needed to setup _transformDone\n    // TODO find a better solution?\n    clipPath._transformDone = true;\n    const canvas = (this as TCachedFabricObject).createClipPathLayer(\n      clipPath,\n      context,\n    );\n    this.drawClipPathOnCache(ctx, clipPath, canvas);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(this: TCachedFabricObject, ctx: CanvasRenderingContext2D) {\n    ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n    ctx.drawImage(\n      this._cacheCanvas,\n      -this.cacheTranslationX,\n      -this.cacheTranslationY,\n    );\n  }\n\n  /**\n   * Check if cache is dirty\n   * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n   * on parent canvas.\n   */\n  isCacheDirty(skipCanvas = false) {\n    if (this.isNotVisible()) {\n      return false;\n    }\n    const canvas = this._cacheCanvas;\n    const ctx = this._cacheContext;\n    if (canvas && ctx && !skipCanvas && this._updateCacheCanvas()) {\n      // in this case the context is already cleared.\n      return true;\n    } else {\n      if (this.dirty || (this.clipPath && this.clipPath.absolutePositioned)) {\n        if (canvas && ctx && !skipCanvas) {\n          ctx.save();\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          ctx.restore();\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Draws a background for the object big as its untransformed dimensions\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.backgroundColor) {\n      return;\n    }\n    const dim = this._getNonTransformedDimensions();\n    ctx.fillStyle = this.backgroundColor;\n\n    ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n    // if there is background color no other shadows\n    // should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setOpacity(ctx: CanvasRenderingContext2D) {\n    if (this.group && !this.group._transformDone) {\n      ctx.globalAlpha = this.getObjectOpacity();\n    } else {\n      ctx.globalAlpha *= this.opacity;\n    }\n  }\n\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    decl: Pick<\n      this,\n      | 'stroke'\n      | 'strokeWidth'\n      | 'strokeLineCap'\n      | 'strokeDashOffset'\n      | 'strokeLineJoin'\n      | 'strokeMiterLimit'\n    >,\n  ) {\n    const stroke = decl.stroke;\n    if (stroke) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = decl.strokeLineCap;\n      ctx.lineDashOffset = decl.strokeDashOffset;\n      ctx.lineJoin = decl.strokeLineJoin;\n      ctx.miterLimit = decl.strokeMiterLimit;\n      if (isFiller(stroke)) {\n        if (\n          (stroke as Gradient<'linear'>).gradientUnits === 'percentage' ||\n          (stroke as Gradient<'linear'>).gradientTransform ||\n          (stroke as Pattern).patternTransform\n        ) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          this._applyPatternForTransformedGradient(ctx, stroke);\n        } else {\n          // is a simple gradient or pattern\n          ctx.strokeStyle = stroke.toLive(ctx)!;\n          this._applyPatternGradientTransform(ctx, stroke);\n        }\n      } else {\n        // is a color\n        ctx.strokeStyle = decl.stroke as string;\n      }\n    }\n  }\n\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    if (fill) {\n      if (isFiller(fill)) {\n        ctx.fillStyle = fill.toLive(ctx)!;\n        this._applyPatternGradientTransform(ctx, fill);\n      } else {\n        ctx.fillStyle = fill;\n      }\n    }\n  }\n\n  _setClippingProperties(ctx: CanvasRenderingContext2D) {\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = 'transparent';\n    ctx.fillStyle = '#000000';\n  }\n\n  /**\n   * @private\n   * Sets line dash\n   * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n   * @param {Array} dashArray array representing dashes\n   */\n  _setLineDash(ctx: CanvasRenderingContext2D, dashArray?: number[] | null) {\n    if (!dashArray || dashArray.length === 0) {\n      return;\n    }\n    // Spec requires the concatenation of two copies of the dash array when the number of elements is odd\n    if (1 & dashArray.length) {\n      dashArray.push(...dashArray);\n    }\n    ctx.setLineDash(dashArray);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _setShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    const shadow = this.shadow,\n      canvas = this.canvas,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      [sx, , , sy] = canvas?.viewportTransform || iMatrix,\n      multX = sx * retinaScaling,\n      multY = sy * retinaScaling,\n      scaling = shadow.nonScaling ? new Point(1, 1) : this.getObjectScaling();\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur =\n      (shadow.blur *\n        config.browserShadowBlurConstant *\n        (multX + multY) *\n        (scaling.x + scaling.y)) /\n      4;\n    ctx.shadowOffsetX = shadow.offsetX * multX * scaling.x;\n    ctx.shadowOffsetY = shadow.offsetY * multY * scaling.y;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _removeShadow(ctx: CanvasRenderingContext2D) {\n    if (!this.shadow) {\n      return;\n    }\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TFiller} filler {@link Pattern} or {@link Gradient}\n   */\n  _applyPatternGradientTransform(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    if (!isFiller(filler)) {\n      return { offsetX: 0, offsetY: 0 };\n    }\n    const t =\n      (filler as Gradient<'linear'>).gradientTransform ||\n      (filler as Pattern).patternTransform;\n    const offsetX = -this.width / 2 + filler.offsetX || 0,\n      offsetY = -this.height / 2 + filler.offsetY || 0;\n\n    if ((filler as Gradient<'linear'>).gradientUnits === 'percentage') {\n      ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n    } else {\n      ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n    }\n    if (t) {\n      ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n    }\n    return { offsetX: offsetX, offsetY: offsetY };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderPaintInOrder(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderStroke(ctx);\n      this._renderFill(ctx);\n    } else {\n      this._renderFill(ctx);\n      this._renderStroke(ctx);\n    }\n  }\n\n  /**\n   * @private\n   * function that actually render something on the context.\n   * empty here to allow Obects to work on tests to benchmark fabric functionalites\n   * not related to rendering\n   * @param {CanvasRenderingContext2D} _ctx Context to render on\n   */\n  _render(_ctx: CanvasRenderingContext2D) {\n    // placeholder to be overridden\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill) {\n      return;\n    }\n\n    ctx.save();\n    this._setFillStyles(ctx, this);\n    if (this.fillRule === 'evenodd') {\n      ctx.fill('evenodd');\n    } else {\n      ctx.fill();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderStroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    if (this.strokeUniform) {\n      const scaling = this.getObjectScaling();\n      ctx.scale(1 / scaling.x, 1 / scaling.y);\n    }\n    this._setLineDash(ctx, this.strokeDashArray);\n    this._setStrokeStyles(ctx, this);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Gradient} filler\n   */\n  _applyPatternForTransformedGradient(\n    ctx: CanvasRenderingContext2D,\n    filler: TFiller,\n  ) {\n    const dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n      retinaScaling = this.getCanvasRetinaScaling(),\n      width = dims.x / this.scaleX / retinaScaling,\n      height = dims.y / this.scaleY / retinaScaling,\n      pCanvas = createCanvasElementFor({\n        // in case width and height are less than 1px, we have to round up.\n        // since the pattern is no-repeat, this is fine\n        width: Math.ceil(width),\n        height: Math.ceil(height),\n      });\n\n    const pCtx = pCanvas.getContext('2d');\n    if (!pCtx) {\n      return;\n    }\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.scale(\n      dims.zoomX / this.scaleX / retinaScaling,\n      dims.zoomY / this.scaleY / retinaScaling,\n    );\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fillStyle = filler.toLive(ctx)!;\n    pCtx.fill();\n    ctx.translate(\n      -this.width / 2 - this.strokeWidth / 2,\n      -this.height / 2 - this.strokeWidth / 2,\n    );\n    ctx.scale(\n      (retinaScaling * this.scaleX) / dims.zoomX,\n      (retinaScaling * this.scaleY) / dims.zoomY,\n    );\n    ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat') ?? '';\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement() {\n    return new Point(this.left + this.width / 2, this.top + this.height / 2);\n  }\n\n  /**\n   * Clones an instance.\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {Promise<FabricObject>}\n   */\n  clone(propertiesToInclude?: string[]): Promise<this> {\n    const objectForm = this.toObject(propertiesToInclude);\n    return (this.constructor as typeof FabricObject).fromObject(\n      objectForm,\n    ) as unknown as Promise<this>;\n  }\n\n  /**\n   * Creates an instance of Image out of an object\n   * makes use of toCanvasElement.\n   * Once this method was based on toDataUrl and loadImage, so it also had a quality\n   * and format option. toCanvasElement is faster and produce no loss of quality.\n   * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n   * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n   * @todo fix the export type, it could not be Image but the type that getClass return for 'image'.\n   * @param {ObjectToCanvasElementOptions} [options] for clone as image, passed to toDataURL\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {FabricImage} Object cloned as image.\n   */\n  cloneAsImage(options: ObjectToCanvasElementOptions): FabricImage {\n    const canvasEl = this.toCanvasElement(options);\n    // TODO: how to import Image w/o an import cycle?\n    const ImageClass = classRegistry.getClass<typeof FabricImage>('image');\n    return new ImageClass(canvasEl);\n  }\n\n  /**\n   * Converts an object into a HTMLCanvas element\n   * @param {ObjectToCanvasElementOptions} options Options object\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @param {Boolean} [options.viewportTransform] Account for canvas viewport transform\n   * @param {(el?: HTMLCanvasElement) => StaticCanvas} [options.canvasProvider] Create the output canvas\n   * @return {HTMLCanvasElement} Returns DOM element <canvas> with the FabricObject\n   */\n  toCanvasElement(options: ObjectToCanvasElementOptions = {}) {\n    const origParams = saveObjectTransform(this),\n      originalGroup = this.group,\n      originalShadow = this.shadow,\n      abs = Math.abs,\n      retinaScaling = options.enableRetinaScaling ? getDevicePixelRatio() : 1,\n      multiplier = (options.multiplier || 1) * retinaScaling,\n      canvasProvider: (el: HTMLCanvasElement) => StaticCanvas =\n        options.canvasProvider ||\n        ((el: HTMLCanvasElement) =>\n          new StaticCanvas(el, {\n            enableRetinaScaling: false,\n            renderOnAddRemove: false,\n            skipOffscreen: false,\n          }));\n    delete this.group;\n    if (options.withoutTransform) {\n      resetObjectTransform(this);\n    }\n    if (options.withoutShadow) {\n      this.shadow = null;\n    }\n    if (options.viewportTransform) {\n      sendObjectToPlane(this, this.getViewportTransform());\n    }\n\n    this.setCoords();\n    const el = createCanvasElement(),\n      boundingRect = this.getBoundingRect(),\n      shadow = this.shadow,\n      shadowOffset = new Point();\n\n    if (shadow) {\n      const shadowBlur = shadow.blur;\n      const scaling = shadow.nonScaling\n        ? new Point(1, 1)\n        : this.getObjectScaling();\n      // consider non scaling shadow.\n      shadowOffset.x =\n        2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.x);\n      shadowOffset.y =\n        2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.y);\n    }\n    const width = boundingRect.width + shadowOffset.x,\n      height = boundingRect.height + shadowOffset.y;\n    // if the current width/height is not an integer\n    // we need to make it so.\n    el.width = Math.ceil(width);\n    el.height = Math.ceil(height);\n    const canvas = canvasProvider(el);\n    if (options.format === 'jpeg') {\n      canvas.backgroundColor = '#fff';\n    }\n    this.setPositionByOrigin(\n      new Point(canvas.width / 2, canvas.height / 2),\n      CENTER,\n      CENTER,\n    );\n    const originalCanvas = this.canvas;\n    // static canvas and canvas have both an array of InteractiveObjects\n    // @ts-expect-error this needs to be fixed somehow, or ignored globally\n    canvas._objects = [this];\n    this.set('canvas', canvas);\n    this.setCoords();\n    const canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n    this.set('canvas', originalCanvas);\n    this.shadow = originalShadow;\n    if (originalGroup) {\n      this.group = originalGroup;\n    }\n    this.set(origParams);\n    this.setCoords();\n    // canvas.dispose will call image.dispose that will nullify the elements\n    // since this canvas is a simple element for the process, we remove references\n    // to objects in this way in order to avoid object trashing.\n    canvas._objects = [];\n    // since render has settled it is safe to destroy canvas\n    canvas.destroy();\n    return canvasEl;\n  }\n\n  /**\n   * Converts an object into a data-url-like string\n   * @param {Object} options Options object\n   * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n   * @param {Number} [options.multiplier=1] Multiplier to scale by\n   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n   * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n   * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n   * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n   */\n  toDataURL(options: toDataURLOptions = {}) {\n    return toDataURL(\n      this.toCanvasElement(options),\n      options.format || 'png',\n      options.quality || 1,\n    );\n  }\n\n  /**\n   * Returns true if any of the specified types is identical to the type of an instance\n   * @param {String} type Type to check against\n   * @return {Boolean}\n   */\n  isType(...types: string[]) {\n    return (\n      types.includes((this.constructor as typeof FabricObject).type) ||\n      types.includes(this.type)\n    );\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance (is 1 unless subclassed)\n   */\n  complexity() {\n    return 1;\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  /**\n   * Sets \"angle\" of an instance with centered rotation\n   * @param {TDegree} angle Angle value (in degrees)\n   */\n  rotate(angle: TDegree) {\n    const { centeredRotation, originX, originY } = this;\n\n    if (centeredRotation) {\n      const { x, y } = this.getRelativeCenterPoint();\n      this.originX = CENTER;\n      this.originY = CENTER;\n      this.left = x;\n      this.top = y;\n    }\n\n    this.set('angle', angle);\n\n    if (centeredRotation) {\n      const { x, y } = this.translateToOriginPoint(\n        this.getRelativeCenterPoint(),\n        originX,\n        originY,\n      );\n      this.left = x;\n      this.top = y;\n      this.originX = originX;\n      this.originY = originY;\n    }\n  }\n\n  /**\n   * This callback function is called by the parent group of an object every\n   * time a non-delegated property changes on the group. It is passed the key\n   * and value as parameters. Not adding in this function's signature to avoid\n   * Travis build error about unused variables.\n   */\n  setOnGroup() {\n    // implemented by sub-classes, as needed.\n  }\n\n  /**\n   * Sets canvas globalCompositeOperation for specific object\n   * custom composition operation for the particular object can be specified using globalCompositeOperation property\n   * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n   */\n  _setupCompositeOperation(ctx: CanvasRenderingContext2D) {\n    if (this.globalCompositeOperation) {\n      ctx.globalCompositeOperation = this.globalCompositeOperation;\n    }\n  }\n\n  /**\n   * cancel instance's running animations\n   * override if necessary to dispose artifacts such as `clipPath`\n   */\n  dispose() {\n    runningAnimations.cancelByTarget(this);\n    this.off();\n    this._set('canvas', undefined);\n    // clear caches\n    this._cacheCanvas && getEnv().dispose(this._cacheCanvas);\n    this._cacheCanvas = undefined;\n    this._cacheContext = null;\n  }\n\n  // #region Animation methods\n  /**\n   * List of properties to consider for animating colors.\n   * @type String[]\n   */\n  static colorProperties: string[] = [FILL, STROKE, 'backgroundColor'];\n\n  /**\n   * Animates object's properties\n   * @param {Record<string, number | number[] | TColorArg>} animatable map of keys and end values\n   * @param {Partial<AnimationOptions<T>>} options\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {Record<string, TAnimation<T>>} map of animation contexts\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   */\n  animate<T extends number | number[] | TColorArg>(\n    animatable: Record<string, T>,\n    options?: Partial<AnimationOptions<T>>,\n  ): Record<string, TAnimation<T>> {\n    return Object.entries(animatable).reduce(\n      (acc, [key, endValue]) => {\n        acc[key] = this._animate(key, endValue, options);\n        return acc;\n      },\n      {} as Record<string, TAnimation<T>>,\n    );\n  }\n\n  /**\n   * @private\n   * @param {String} key Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   */\n  _animate<T extends number | number[] | TColorArg>(\n    key: string,\n    endValue: T,\n    options: Partial<AnimationOptions<T>> = {},\n  ): TAnimation<T> {\n    const path = key.split('.');\n    const propIsColor = (\n      this.constructor as typeof FabricObject\n    ).colorProperties.includes(path[path.length - 1]);\n    const { abort, startValue, onChange, onComplete } = options;\n    const animationOptions = {\n      ...options,\n      target: this,\n      // path.reduce... is the current value in case start value isn't provided\n      startValue:\n        startValue ?? path.reduce((deep: any, key) => deep[key], this),\n      endValue,\n      abort: abort?.bind(this),\n      onChange: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        path.reduce((deep: Record<string, any>, key, index) => {\n          if (index === path.length - 1) {\n            deep[key] = value;\n          }\n          return deep[key];\n        }, this);\n        onChange &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onChange(value, valueProgress, durationProgress);\n      },\n      onComplete: (\n        value: number | number[] | string,\n        valueProgress: number,\n        durationProgress: number,\n      ) => {\n        this.setCoords();\n        onComplete &&\n          // @ts-expect-error generic callback arg0 is wrong\n          onComplete(value, valueProgress, durationProgress);\n      },\n    } as AnimationOptions<T>;\n\n    return (\n      propIsColor\n        ? animateColor(animationOptions as ColorAnimationOptions)\n        : animate(\n            animationOptions as ValueAnimationOptions | ArrayAnimationOptions,\n          )\n    ) as TAnimation<T>;\n  }\n\n  // #region Object stacking methods\n\n  /**\n   * A reference to the parent of the object\n   * Used to keep the original parent ref when the object has been added to an ActiveSelection, hence loosing the `group` ref\n   */\n  declare parent?: Group;\n\n  /**\n   * Checks if object is descendant of target\n   * Should be used instead of {@link Group.contains} or {@link StaticCanvas.contains} for performance reasons\n   * @param {TAncestor} target\n   * @returns {boolean}\n   */\n  isDescendantOf(target: TAncestor): boolean {\n    const { parent, group } = this;\n    return (\n      parent === target ||\n      group === target ||\n      // walk up\n      (!!parent && parent.isDescendantOf(target)) ||\n      (!!group && group !== parent && group.isDescendantOf(target))\n    );\n  }\n\n  /**\n   * @returns {Ancestors} ancestors (excluding `ActiveSelection`) from bottom to top\n   */\n  getAncestors(): Ancestors {\n    const ancestors: TAncestor[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let parent: TAncestor | undefined = this;\n    do {\n      parent = parent.parent;\n      parent && ancestors.push(parent);\n    } while (parent);\n    return ancestors as Ancestors;\n  }\n\n  /**\n   * Compare ancestors\n   *\n   * @param {StackedObject} other\n   * @returns {AncestryComparison} an object that represent the ancestry situation.\n   */\n  findCommonAncestors<T extends this>(other: T): AncestryComparison {\n    if (this === other) {\n      return {\n        fork: [],\n        otherFork: [],\n        common: [this, ...this.getAncestors()],\n      } as AncestryComparison;\n    }\n    const ancestors = this.getAncestors();\n    const otherAncestors = other.getAncestors();\n    //  if `this` has no ancestors and `this` is top ancestor of `other` we must handle the following case\n    if (\n      ancestors.length === 0 &&\n      otherAncestors.length > 0 &&\n      this === otherAncestors[otherAncestors.length - 1]\n    ) {\n      return {\n        fork: [],\n        otherFork: [\n          other,\n          ...otherAncestors.slice(0, otherAncestors.length - 1),\n        ],\n        common: [this],\n      } as AncestryComparison;\n    }\n    //  compare ancestors\n    for (let i = 0, ancestor; i < ancestors.length; i++) {\n      ancestor = ancestors[i];\n      if (ancestor === other) {\n        return {\n          fork: [this, ...ancestors.slice(0, i)],\n          otherFork: [],\n          common: ancestors.slice(i),\n        } as AncestryComparison;\n      }\n      for (let j = 0; j < otherAncestors.length; j++) {\n        if (this === otherAncestors[j]) {\n          return {\n            fork: [],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: [this, ...ancestors],\n          } as AncestryComparison;\n        }\n        if (ancestor === otherAncestors[j]) {\n          return {\n            fork: [this, ...ancestors.slice(0, i)],\n            otherFork: [other, ...otherAncestors.slice(0, j)],\n            common: ancestors.slice(i),\n          } as AncestryComparison;\n        }\n      }\n    }\n    // nothing shared\n    return {\n      fork: [this, ...ancestors],\n      otherFork: [other, ...otherAncestors],\n      common: [],\n    } as AncestryComparison;\n  }\n\n  /**\n   *\n   * @param {StackedObject} other\n   * @returns {boolean}\n   */\n  hasCommonAncestors<T extends this>(other: T): boolean {\n    const commonAncestors = this.findCommonAncestors(other);\n    return commonAncestors && !!commonAncestors.common.length;\n  }\n\n  /**\n   *\n   * @param {FabricObject} other object to compare against\n   * @returns {boolean | undefined} if objects do not share a common ancestor or they are strictly equal it is impossible to determine which is in front of the other; in such cases the function returns `undefined`\n   */\n  isInFrontOf<T extends this>(other: T): boolean | undefined {\n    if (this === other) {\n      return undefined;\n    }\n    const ancestorData = this.findCommonAncestors(other);\n\n    if (ancestorData.fork.includes(other as any)) {\n      return true;\n    }\n    if (ancestorData.otherFork.includes(this as any)) {\n      return false;\n    }\n    // if there isn't a common ancestor, we take the canvas.\n    // if there is no canvas, there is nothing to compare\n    const firstCommonAncestor = ancestorData.common[0] || this.canvas;\n    if (!firstCommonAncestor) {\n      return undefined;\n    }\n    const headOfFork = ancestorData.fork.pop(),\n      headOfOtherFork = ancestorData.otherFork.pop(),\n      thisIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfFork as any,\n      ),\n      otherIndex = (firstCommonAncestor as TCollection)._objects.indexOf(\n        headOfOtherFork as any,\n      );\n    return thisIndex > -1 && thisIndex > otherIndex;\n  }\n\n  // #region Serialization\n  /**\n   * Define a list of custom properties that will be serialized when\n   * instance.toObject() gets called\n   */\n  static customProperties: string[] = [];\n\n  /**\n   * Returns an object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject(propertiesToInclude: any[] = []): any {\n    const propertiesToSerialize = propertiesToInclude.concat(\n      FabricObject.customProperties,\n      (this.constructor as typeof FabricObject).customProperties || [],\n    );\n    let clipPathData: Partial<SerializedObjectProps> | undefined;\n    const NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n    const {\n      clipPath,\n      fill,\n      stroke,\n      shadow,\n      strokeDashArray,\n      left,\n      top,\n      originX,\n      originY,\n      width,\n      height,\n      strokeWidth,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit,\n      scaleX,\n      scaleY,\n      angle,\n      flipX,\n      flipY,\n      opacity,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX,\n      skewY,\n    } = this;\n    if (clipPath && !clipPath.excludeFromExport) {\n      clipPathData = clipPath.toObject(\n        propertiesToSerialize.concat('inverted', 'absolutePositioned'),\n      );\n    }\n    const toFixedBound = (val: number) => toFixed(val, NUM_FRACTION_DIGITS);\n    const object = {\n      ...pick(this, propertiesToSerialize as (keyof this)[]),\n      type: (this.constructor as typeof FabricObject).type,\n      version: VERSION,\n      originX,\n      originY,\n      left: toFixedBound(left),\n      top: toFixedBound(top),\n      width: toFixedBound(width),\n      height: toFixedBound(height),\n      fill: isSerializableFiller(fill) ? fill.toObject() : fill,\n      stroke: isSerializableFiller(stroke) ? stroke.toObject() : stroke,\n      strokeWidth: toFixedBound(strokeWidth),\n      strokeDashArray: strokeDashArray\n        ? strokeDashArray.concat()\n        : strokeDashArray,\n      strokeLineCap,\n      strokeDashOffset,\n      strokeLineJoin,\n      strokeUniform,\n      strokeMiterLimit: toFixedBound(strokeMiterLimit),\n      scaleX: toFixedBound(scaleX),\n      scaleY: toFixedBound(scaleY),\n      angle: toFixedBound(angle),\n      flipX,\n      flipY,\n      opacity: toFixedBound(opacity),\n      shadow: shadow ? shadow.toObject() : shadow,\n      visible,\n      backgroundColor,\n      fillRule,\n      paintFirst,\n      globalCompositeOperation,\n      skewX: toFixedBound(skewX),\n      skewY: toFixedBound(skewY),\n      ...(clipPathData ? { clipPath: clipPathData } : null),\n    };\n\n    return !this.includeDefaultValues\n      ? this._removeDefaultValues(object)\n      : object;\n  }\n\n  /**\n   * Returns (dataless) object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toDatalessObject(propertiesToInclude?: any[]): any {\n    // will be overwritten by subclasses\n    return this.toObject(propertiesToInclude);\n  }\n\n  /**\n   * @private\n   * @param {Object} object\n   */\n  _removeDefaultValues<T extends object>(object: T): Partial<T> {\n    // getDefaults() ( get from static ownDefaults ) should win over prototype since anyway they get assigned to instance\n    // ownDefault vs prototype is swappable only if you change all the fabric objects consistently.\n    const defaults = (this.constructor as typeof FabricObject).getDefaults();\n    const hasStaticDefaultValues = Object.keys(defaults).length > 0;\n    const baseValues = hasStaticDefaultValues\n      ? defaults\n      : Object.getPrototypeOf(this);\n\n    return pickBy(object, (value, key) => {\n      if (key === LEFT || key === TOP || key === 'type') {\n        return true;\n      }\n      const baseValue = baseValues[key];\n      return (\n        value !== baseValue &&\n        // basically a check for [] === []\n        !(\n          Array.isArray(value) &&\n          Array.isArray(baseValue) &&\n          value.length === 0 &&\n          baseValue.length === 0\n        )\n      );\n    });\n  }\n\n  /**\n   * Returns a string representation of an instance\n   * @return {String}\n   */\n  toString() {\n    return `#<${(this.constructor as typeof FabricObject).type}>`;\n  }\n\n  /**\n   *\n   * @param {Function} klass\n   * @param {object} object\n   * @param {object} [options]\n   * @param {string} [options.extraParam] property to pass as first argument to the constructor\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static _fromObject<S extends FabricObject>(\n    { type, ...serializedObjectOptions }: Record<string, unknown>,\n    { extraParam, ...options }: Abortable & { extraParam?: string } = {},\n  ): Promise<S> {\n    return enlivenObjectEnlivables<any>(serializedObjectOptions, options).then(\n      (enlivedObjectOptions) => {\n        // from the resulting enlived options, extract options.extraParam to arg0\n        // to avoid accidental overrides later\n        if (extraParam) {\n          delete enlivedObjectOptions[extraParam];\n          return new this(\n            serializedObjectOptions[extraParam],\n            // @ts-expect-error different signature\n            enlivedObjectOptions,\n          );\n        } else {\n          return new this(enlivedObjectOptions);\n        }\n      },\n    ) as Promise<S>;\n  }\n\n  /**\n   *\n   * @param {object} object\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricObject>}\n   */\n  static fromObject<T extends TOptions<SerializedObjectProps>>(\n    object: T,\n    options?: Abortable,\n  ) {\n    return this._fromObject(object, options);\n  }\n}\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n", "import type {\n  TModificationEvents,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\n/**\n * Wrap an action handler with firing an event if the action is performed\n * @param {TModificationEvents} eventName the event we want to fire\n * @param {TransformActionHandler<T>} actionHandler the function to wrap\n * @param {object} extraEventInfo extra information to pas to the event handler\n * @return {TransformActionHandler<T>} a function with an action handler signature\n */\nexport const wrapWithFireEvent = <\n  T extends Transform,\n  P extends object = Record<string, never>,\n>(\n  eventName: TModificationEvents,\n  actionHandler: TransformActionHandler<T>,\n  extraEventInfo?: P,\n) => {\n  return ((eventData, transform, x, y) => {\n    const actionPerformed = actionHandler(eventData, transform, x, y);\n    if (actionPerformed) {\n      fireEvent(eventName, {\n        ...commonEventInfo(eventData, transform, x, y),\n        ...extraEventInfo,\n      });\n    }\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n};\n", "import type { Transform, TransformActionHandler } from '../EventTypeDefs';\n\n/**\n * Wrap an action handler with saving/restoring object position on the transform.\n * this is the code that permits to objects to keep their position while transforming.\n * @param {Function} actionHandler the function to wrap\n * @return {Function} a function with an action handler signature\n */\nexport function wrapWithFixedAnchor<T extends Transform>(\n  actionHandler: TransformActionHandler<T>,\n) {\n  return ((eventData, transform, x, y) => {\n    const { target, originX, originY } = transform,\n      centerPoint = target.getRelativeCenterPoint(),\n      constraint = target.translateToOriginPoint(centerPoint, originX, originY),\n      actionPerformed = actionHandler(eventData, transform, x, y);\n    // flipping requires to change the transform origin, so we read from the mutated transform\n    // instead of leveraging the one destructured before\n    target.setPositionByOrigin(\n      constraint,\n      transform.originX,\n      transform.originY,\n    );\n    return actionPerformed;\n  }) as TransformActionHandler<T>;\n}\n", "import type { TransformActionHandler } from '../EventTypeDefs';\nimport { CENTER, LEFT, RESIZING, RIGHT } from '../constants';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { getLocalPoint, isTransformCentered } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Action handler to change object's width\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const changeObjectWidth: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  const localPoint = getLocalPoint(\n    transform,\n    transform.originX,\n    transform.originY,\n    x,\n    y,\n  );\n  //  make sure the control changes width ONLY from it's side of target\n  if (\n    resolveOrigin(transform.originX) === resolveOrigin(CENTER) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(RIGHT) &&\n      localPoint.x < 0) ||\n    (resolveOrigin(transform.originX) === resolveOrigin(LEFT) &&\n      localPoint.x > 0)\n  ) {\n    const { target } = transform,\n      strokePadding =\n        target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n      multiplier = isTransformCentered(transform) ? 2 : 1,\n      oldWidth = target.width,\n      newWidth =\n        Math.abs((localPoint.x * multiplier) / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 1));\n    //  check against actual target width in case `newWidth` was rejected\n    return oldWidth !== target.width;\n  }\n  return false;\n};\n\nexport const changeWidth = wrapWithFireEvent(\n  RESIZING,\n  wrapWithFixedAnchor(changeObjectWidth),\n);\n", "import { FILL, STROKE, twoMathPi } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport type { Control } from './Control';\n\nexport type ControlRenderingStyleOverride = Partial<\n  Pick<\n    InteractiveFabricObject,\n    | 'cornerStyle'\n    | 'cornerSize'\n    | 'cornerColor'\n    | 'cornerStrokeColor'\n    | 'cornerDashArray'\n    | 'transparentCorners'\n  >\n>;\n\nexport type ControlRenderer<\n  O extends InteractiveFabricObject = InteractiveFabricObject,\n> = (\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: O,\n) => void;\n\n/**\n * Render a round control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderCircleControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor);\n  let myLeft = left,\n    myTop = top,\n    size;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  // TODO: use proper ellipse code.\n  if (xSize > ySize) {\n    size = xSize;\n    ctx.scale(1.0, ySize / xSize);\n    myTop = (top * xSize) / ySize;\n  } else if (ySize > xSize) {\n    size = ySize;\n    ctx.scale(xSize / ySize, 1.0);\n    myLeft = (left * ySize) / xSize;\n  } else {\n    size = xSize;\n  }\n  ctx.beginPath();\n  ctx.arc(myLeft, myTop, size / 2, 0, twoMathPi, false);\n  ctx[methodName]();\n  if (stroke) {\n    ctx.stroke();\n  }\n  ctx.restore();\n}\n\n/**\n * Render a square control, as per fabric features.\n * This function is written to respect object properties like transparentCorners, cornerSize\n * cornerColor, cornerStrokeColor\n * plus the addition of offsetY and offsetX.\n * @param {CanvasRenderingContext2D} ctx context to render on\n * @param {Number} left x coordinate where the control center should be\n * @param {Number} top y coordinate where the control center should be\n * @param {Object} styleOverride override for FabricObject controls style\n * @param {FabricObject} fabricObject the fabric object for which we are rendering controls\n */\nexport function renderSquareControl(\n  this: Control,\n  ctx: CanvasRenderingContext2D,\n  left: number,\n  top: number,\n  styleOverride: ControlRenderingStyleOverride,\n  fabricObject: InteractiveFabricObject,\n) {\n  styleOverride = styleOverride || {};\n  const xSize =\n      this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n    ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n    transparentCorners =\n      typeof styleOverride.transparentCorners !== 'undefined'\n        ? styleOverride.transparentCorners\n        : fabricObject.transparentCorners,\n    methodName = transparentCorners ? STROKE : FILL,\n    stroke =\n      !transparentCorners &&\n      (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n    xSizeBy2 = xSize / 2,\n    ySizeBy2 = ySize / 2;\n  ctx.save();\n  ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor || '';\n  ctx.strokeStyle =\n    styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor || '';\n  ctx.translate(left, top);\n  //  angle is relative to canvas plane\n  const angle = fabricObject.getTotalAngle();\n  ctx.rotate(degreesToRadians(angle));\n  // this does not work, and fixed with ( && ) does not make sense.\n  // to have real transparent corners we need the controls on upperCanvas\n  // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  ctx[`${methodName}Rect`](-xSizeBy2, -ySizeBy2, xSize, ySize);\n  if (stroke) {\n    ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n  }\n  ctx.restore();\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  ControlActionHandler,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { Intersection } from '../Intersection';\nimport { Point } from '../Point';\nimport { SCALE } from '../constants';\nimport type { InteractiveFabricObject } from '../shapes/Object/InteractiveObject';\nimport type { TCornerPoint, TDegree, TMat2D } from '../typedefs';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { renderCircleControl, renderSquareControl } from './controlRendering';\n\nexport class Control {\n  /**\n   * keep track of control visibility.\n   * mainly for backward compatibility.\n   * if you do not want to see a control, you can remove it\n   * from the control set.\n   * @type {Boolean}\n   * @default true\n   */\n  visible = true;\n\n  /**\n   * Name of the action that the control will likely execute.\n   * This is optional. FabricJS uses to identify what the user is doing for some\n   * extra optimizations. If you are writing a custom control and you want to know\n   * somewhere else in the code what is going on, you can use this string here.\n   * you can also provide a custom getActionName if your control run multiple actions\n   * depending on some external state.\n   * default to scale since is the most common, used on 4 corners by default\n   * @type {String}\n   * @default 'scale'\n   */\n  actionName = SCALE;\n\n  /**\n   * Drawing angle of the control.\n   * NOT used for now, but name marked as needed for internal logic\n   * example: to reuse the same drawing function for different rotated controls\n   * @type {Number}\n   * @default 0\n   */\n  angle = 0;\n\n  /**\n   * Relative position of the control. X\n   * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  x = 0;\n\n  /**\n   * Relative position of the control. Y\n   * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  y = 0;\n\n  /**\n   * Horizontal offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the right, negative to the left.\n   * It used when you want to have position of control that does not scale with\n   * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n   * the boundind box, with an offset of 30 pixels vertically. Those 30 pixels will\n   * stay 30 pixels no matter how the object is big. Another example is having 2\n   * controls in the corner, that stay in the same position when the object scale.\n   * of the bounding box.\n   * @type {Number}\n   * @default 0\n   */\n  offsetX = 0;\n\n  /**\n   * Vertical offset of the control from the defined position. In pixels\n   * Positive offset moves the control to the bottom, negative to the top.\n   * @type {Number}\n   * @default 0\n   */\n  offsetY = 0;\n\n  /**\n   * Sets the length of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeX = 0;\n\n  /**\n   * Sets the height of the control. If null, defaults to object's cornerSize.\n   * Expects both sizeX and sizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  sizeY = 0;\n\n  /**\n   * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeX = 0;\n\n  /**\n   * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n   * Expects both touchSizeX and touchSizeY to be set when set.\n   * @type {?Number}\n   * @default null\n   */\n  touchSizeY = 0;\n\n  /**\n   * Css cursor style to display when the control is hovered.\n   * if the method `cursorStyleHandler` is provided, this property is ignored.\n   * @type {String}\n   * @default 'crosshair'\n   */\n  cursorStyle = 'crosshair';\n\n  /**\n   * If controls has an offsetY or offsetX, draw a line that connects\n   * the control to the bounding box\n   * @type {Boolean}\n   * @default false\n   */\n  withConnection = false;\n\n  constructor(options?: Partial<Control>) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * The control actionHandler, provide one to handle action ( control being moved )\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare actionHandler: TransformActionHandler;\n\n  /**\n   * The control handler for mouse down, provide one to handle mouse down on control\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseDownHandler?: ControlActionHandler;\n\n  /**\n   * The control mouseUpHandler, provide one to handle an effect on mouse up.\n   * @param {Event} eventData the native mouse event\n   * @param {Transform} transformData properties of the current transform\n   * @param {Number} x x position of the cursor\n   * @param {Number} y y position of the cursor\n   * @return {Boolean} true if the action/event modified the object\n   */\n  declare mouseUpHandler?: ControlActionHandler;\n\n  shouldActivate(\n    controlKey: string,\n    fabricObject: InteractiveFabricObject,\n    pointer: Point,\n    { tl, tr, br, bl }: TCornerPoint,\n  ) {\n    // TODO: locking logic can be handled here instead of in the control handler logic\n    return (\n      fabricObject.canvas?.getActiveObject() === fabricObject &&\n      fabricObject.isControlVisible(controlKey) &&\n      Intersection.isPointInPolygon(pointer, [tl, tr, br, bl])\n    );\n  }\n\n  /**\n   * Returns control actionHandler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getActionHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): TransformActionHandler | undefined {\n    return this.actionHandler;\n  }\n\n  /**\n   * Returns control mouseDown handler\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseDownHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseDownHandler;\n  }\n\n  /**\n   * Returns control mouseUp handler.\n   * During actions the fabricObject or the control can be of different obj\n   * @param {Event} eventData the native mouse event\n   * @param {FabricObject} fabricObject on which the control is displayed\n   * @param {Control} control control for which the action handler is being asked\n   * @return {Function} the action handler\n   */\n  getMouseUpHandler(\n    eventData: TPointerEvent,\n    fabricObject: InteractiveFabricObject,\n    control: Control,\n  ): ControlActionHandler | undefined {\n    return this.mouseUpHandler;\n  }\n\n  /**\n   * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n   * function you can pass one in the constructor\n   * the cursorStyle property\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  cursorStyleHandler(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.cursorStyle;\n  }\n\n  /**\n   * Returns the action name. The basic implementation just return the actionName property.\n   * @param {Event} eventData the native mouse event\n   * @param {Control} control the current control ( likely this)\n   * @param {FabricObject} object on which the control is displayed\n   * @return {String}\n   */\n  getActionName(\n    eventData: TPointerEvent,\n    control: Control,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    return control.actionName;\n  }\n\n  /**\n   * Returns controls visibility\n   * @param {FabricObject} object on which the control is displayed\n   * @param {String} controlKey key where the control is memorized on the\n   * @return {Boolean}\n   */\n  getVisibility(fabricObject: InteractiveFabricObject, controlKey: string) {\n    return fabricObject._controlsVisibility?.[controlKey] ?? this.visible;\n  }\n\n  /**\n   * Sets controls visibility\n   * @param {Boolean} visibility for the object\n   * @return {Void}\n   */\n  setVisibility(\n    visibility: boolean,\n    name: string,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    this.visible = visibility;\n  }\n\n  positionHandler(\n    dim: Point,\n    finalMatrix: TMat2D,\n    fabricObject: InteractiveFabricObject,\n    currentControl: Control,\n  ) {\n    return new Point(\n      this.x * dim.x + this.offsetX,\n      this.y * dim.y + this.offsetY,\n    ).transform(finalMatrix);\n  }\n\n  /**\n   * Returns the coords for this control based on object values.\n   * @param {Number} objectAngle angle from the fabric object holding the control\n   * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n   *   isTouch is true)\n   * @param {Number} centerX x coordinate where the control center should be\n   * @param {Number} centerY y coordinate where the control center should be\n   * @param {boolean} isTouch true if touch corner, false if normal corner\n   */\n  calcCornerCoords(\n    angle: TDegree,\n    objectCornerSize: number,\n    centerX: number,\n    centerY: number,\n    isTouch: boolean,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    const t = multiplyTransformMatrixArray([\n      createTranslateMatrix(centerX, centerY),\n      createRotateMatrix({ angle }),\n      createScaleMatrix(\n        (isTouch ? this.touchSizeX : this.sizeX) || objectCornerSize,\n        (isTouch ? this.touchSizeY : this.sizeY) || objectCornerSize,\n      ),\n    ]);\n    return {\n      tl: new Point(-0.5, -0.5).transform(t),\n      tr: new Point(0.5, -0.5).transform(t),\n      br: new Point(0.5, 0.5).transform(t),\n      bl: new Point(-0.5, 0.5).transform(t),\n    };\n  }\n\n  /**\n   * Render function for the control.\n   * When this function runs the context is unscaled. unrotate. Just retina scaled.\n   * all the functions will have to translate to the point left,top before starting Drawing\n   * if they want to draw a control where the position is detected.\n   * left and top are the result of the positionHandler function\n   * @param {RenderingContext2D} ctx the context where the control will be drawn\n   * @param {Number} left position of the canvas where we are about to render the control.\n   * @param {Number} top position of the canvas where we are about to render the control.\n   * @param {Object} styleOverride\n   * @param {FabricObject} fabricObject the object where the control is about to be rendered\n   */\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: InteractiveFabricObject,\n  ) {\n    styleOverride = styleOverride || {};\n    switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n      case 'circle':\n        renderCircleControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n        break;\n      default:\n        renderSquareControl.call(\n          this,\n          ctx,\n          left,\n          top,\n          styleOverride,\n          fabricObject,\n        );\n    }\n  }\n}\n", "import type {\n  ControlCursorCallback,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { ROTATING } from '../constants';\nimport { radiansToDegrees } from '../util/misc/radiansDegreesConversion';\nimport { isLocked, NOT_ALLOWED_CURSOR } from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\n\n/**\n * Find the correct style for the control that is used for rotation.\n * this function is very simple and it just take care of not-allowed or standard cursor\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const rotationStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (fabricObject.lockRotation) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  return control.cursorStyle;\n};\n\n/**\n * Action handler for rotation and snapping, without anchor point.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n * @private\n */\nconst rotateObjectWithSnapping: TransformActionHandler = (\n  eventData,\n  { target, ex, ey, theta, originX, originY },\n  x,\n  y,\n) => {\n  const pivotPoint = target.translateToOriginPoint(\n    target.getRelativeCenterPoint(),\n    originX,\n    originY,\n  );\n\n  if (isLocked(target, 'lockRotation')) {\n    return false;\n  }\n\n  const lastAngle = Math.atan2(ey - pivotPoint.y, ex - pivotPoint.x),\n    curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x);\n  let angle = radiansToDegrees(curAngle - lastAngle + theta);\n\n  if (target.snapAngle && target.snapAngle > 0) {\n    const snapAngle = target.snapAngle,\n      snapThreshold = target.snapThreshold || snapAngle,\n      rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n      leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n    if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n      angle = leftAngleLocked;\n    } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n      angle = rightAngleLocked;\n    }\n  }\n\n  // normalize angle to positive value\n  if (angle < 0) {\n    angle = 360 + angle;\n  }\n  angle %= 360;\n\n  const hasRotated = target.angle !== angle;\n  // TODO: why aren't we using set?\n  target.angle = angle;\n  return hasRotated;\n};\n\nexport const rotationWithSnapping = wrapWithFireEvent(\n  ROTATING,\n  wrapWithFixedAnchor(rotateObjectWithSnapping),\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxis } from '../typedefs';\nimport type { Canvas } from '../canvas/Canvas';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  invertOrigin,\n  isLocked,\n  isTransformCentered,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport { SCALE_X, SCALE_Y, SCALING } from '../constants';\n\ntype ScaleTransform = Transform & {\n  gestureScale?: number;\n  signX?: number;\n  signY?: number;\n};\n\ntype ScaleBy = TAxis | 'equally' | '' | undefined;\n\n/**\n * Inspect event and fabricObject properties to understand if the scaling action\n * @param {Event} eventData from the user action\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @return {Boolean} true if scale is proportional\n */\nexport function scaleIsProportional(\n  eventData: TPointerEvent,\n  fabricObject: FabricObject,\n): boolean {\n  const canvas = fabricObject.canvas as Canvas,\n    uniformIsToggled = eventData[canvas.uniScaleKey!];\n  return (\n    (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled)\n  );\n}\n\n/**\n * Inspect fabricObject to understand if the current scaling action is allowed\n * @param {FabricObject} fabricObject the fabric object about to scale\n * @param {String} by 'x' or 'y' or ''\n * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n * @return {Boolean} true if scaling is not allowed at current conditions\n */\nexport function scalingIsForbidden(\n  fabricObject: FabricObject,\n  by: ScaleBy,\n  scaleProportionally: boolean,\n) {\n  const lockX = isLocked(fabricObject, 'lockScalingX'),\n    lockY = isLocked(fabricObject, 'lockScalingY');\n  if (lockX && lockY) {\n    return true;\n  }\n  if (!by && (lockX || lockY) && scaleProportionally) {\n    return true;\n  }\n  if (lockX && by === 'x') {\n    return true;\n  }\n  if (lockY && by === 'y') {\n    return true;\n  }\n  // code crashes because of a division by 0 if a 0 sized object is scaled\n  // forbid to prevent scaling to happen. ISSUE-9475\n  const { width, height, strokeWidth } = fabricObject;\n  if (width === 0 && strokeWidth === 0 && by !== 'y') {\n    return true;\n  }\n  if (height === 0 && strokeWidth === 0 && by !== 'x') {\n    return true;\n  }\n  return false;\n}\n\nconst scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];\n\n/**\n * return the correct cursor style for the scale action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  const scaleProportionally = scaleIsProportional(eventData, fabricObject),\n    by =\n      control.x !== 0 && control.y === 0\n        ? 'x'\n        : control.x === 0 && control.y !== 0\n          ? 'y'\n          : '';\n  if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control);\n  return `${scaleMap[n]}-resize`;\n};\n\n/**\n * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @param {Object} options additional information for scaling\n * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n * @return {Boolean} true if some change happened\n * @private\n */\nfunction scaleObject(\n  eventData: TPointerEvent,\n  transform: ScaleTransform,\n  x: number,\n  y: number,\n  options: { by?: ScaleBy } = {},\n) {\n  const target = transform.target,\n    by = options.by,\n    scaleProportionally = scaleIsProportional(eventData, target),\n    forbidScaling = scalingIsForbidden(target, by, scaleProportionally);\n  let newPoint, scaleX, scaleY, dim, signX, signY;\n\n  if (forbidScaling) {\n    return false;\n  }\n  if (transform.gestureScale) {\n    scaleX = transform.scaleX * transform.gestureScale;\n    scaleY = transform.scaleY * transform.gestureScale;\n  } else {\n    newPoint = getLocalPoint(\n      transform,\n      transform.originX,\n      transform.originY,\n      x,\n      y,\n    );\n    // use of sign: We use sign to detect change of direction of an action. sign usually change when\n    // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n    // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n    // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n    // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n    signX = by !== 'y' ? Math.sign(newPoint.x || transform.signX || 1) : 1;\n    signY = by !== 'x' ? Math.sign(newPoint.y || transform.signY || 1) : 1;\n    if (!transform.signX) {\n      transform.signX = signX;\n    }\n    if (!transform.signY) {\n      transform.signY = signY;\n    }\n\n    if (\n      isLocked(target, 'lockScalingFlip') &&\n      (transform.signX !== signX || transform.signY !== signY)\n    ) {\n      return false;\n    }\n\n    dim = target._getTransformedDimensions();\n    // missing detection of flip and logic to switch the origin\n    if (scaleProportionally && !by) {\n      // uniform scaling\n      const distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n        { original } = transform,\n        originalDistance =\n          Math.abs((dim.x * original.scaleX) / target.scaleX) +\n          Math.abs((dim.y * original.scaleY) / target.scaleY),\n        scale = distance / originalDistance;\n      scaleX = original.scaleX * scale;\n      scaleY = original.scaleY * scale;\n    } else {\n      scaleX = Math.abs((newPoint.x * target.scaleX) / dim.x);\n      scaleY = Math.abs((newPoint.y * target.scaleY) / dim.y);\n    }\n    // if we are scaling by center, we need to double the scale\n    if (isTransformCentered(transform)) {\n      scaleX *= 2;\n      scaleY *= 2;\n    }\n    if (transform.signX !== signX && by !== 'y') {\n      transform.originX = invertOrigin(transform.originX);\n      scaleX *= -1;\n      transform.signX = signX;\n    }\n    if (transform.signY !== signY && by !== 'x') {\n      transform.originY = invertOrigin(transform.originY);\n      scaleY *= -1;\n      transform.signY = signY;\n    }\n  }\n  // minScale is taken care of in the setter.\n  const oldScaleX = target.scaleX,\n    oldScaleY = target.scaleY;\n  if (!by) {\n    !isLocked(target, 'lockScalingX') && target.set(SCALE_X, scaleX);\n    !isLocked(target, 'lockScalingY') && target.set(SCALE_Y, scaleY);\n  } else {\n    // forbidden cases already handled on top here.\n    by === 'x' && target.set(SCALE_X, scaleX);\n    by === 'y' && target.set(SCALE_Y, scaleY);\n  }\n  return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n}\n\n/**\n * Generic scaling logic, to scale from corners either equally or freely.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scaleObjectFromCorner: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y);\n};\n\n/**\n * Scaling logic for the X axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectX: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'x' });\n};\n\n/**\n * Scaling logic for the Y axis.\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nconst scaleObjectY: TransformActionHandler<ScaleTransform> = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return scaleObject(eventData, transform, x, y, { by: 'y' });\n};\n\nexport const scalingEqually = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectFromCorner),\n);\n\nexport const scalingX = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectX),\n);\n\nexport const scalingY = wrapWithFireEvent(\n  SCALING,\n  wrapWithFixedAnchor(scaleObjectY),\n);\n", "import type {\n  ControlCursorCallback,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { Point } from '../Point';\nimport type { TAxis, TAxisKey } from '../typedefs';\nimport {\n  degreesToRadians,\n  radiansToDegrees,\n} from '../util/misc/radiansDegreesConversion';\nimport {\n  findCornerQuadrant,\n  getLocalPoint,\n  isLocked,\n  NOT_ALLOWED_CURSOR,\n} from './util';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { wrapWithFixedAnchor } from './wrapWithFixedAnchor';\nimport {\n  CENTER,\n  SCALE_X,\n  SCALE_Y,\n  SKEWING,\n  SKEW_X,\n  SKEW_Y,\n} from '../constants';\n\nexport type SkewTransform = Transform & { skewingSide: -1 | 1 };\n\nconst AXIS_KEYS: Record<\n  TAxis,\n  {\n    counterAxis: TAxis;\n    scale: TAxisKey<'scale'>;\n    skew: TAxisKey<'skew'>;\n    lockSkewing: TAxisKey<'lockSkewing'>;\n    origin: TAxisKey<'origin'>;\n    flip: TAxisKey<'flip'>;\n  }\n> = {\n  x: {\n    counterAxis: 'y',\n    scale: SCALE_X,\n    skew: SKEW_X,\n    lockSkewing: 'lockSkewingX',\n    origin: 'originX',\n    flip: 'flipX',\n  },\n  y: {\n    counterAxis: 'x',\n    scale: SCALE_Y,\n    skew: SKEW_Y,\n    lockSkewing: 'lockSkewingY',\n    origin: 'originY',\n    flip: 'flipY',\n  },\n};\n\nconst skewMap = ['ns', 'nesw', 'ew', 'nwse'];\n\n/**\n * return the correct cursor style for the skew action\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const skewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  if (control.x !== 0 && isLocked(fabricObject, 'lockSkewingY')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  if (control.y !== 0 && isLocked(fabricObject, 'lockSkewingX')) {\n    return NOT_ALLOWED_CURSOR;\n  }\n  const n = findCornerQuadrant(fabricObject, control) % 4;\n  return `${skewMap[n]}-resize`;\n};\n\n/**\n * Since skewing is applied before scaling, calculations are done in a scaleless plane\n * @see https://github.com/fabricjs/fabric.js/pull/8380\n */\nfunction skewObject(\n  axis: TAxis,\n  { target, ex, ey, skewingSide, ...transform }: SkewTransform,\n  pointer: Point,\n) {\n  const { skew: skewKey } = AXIS_KEYS[axis],\n    offset = pointer\n      .subtract(new Point(ex, ey))\n      .divide(new Point(target.scaleX, target.scaleY))[axis],\n    skewingBefore = target[skewKey],\n    skewingStart = transform[skewKey],\n    shearingStart = Math.tan(degreesToRadians(skewingStart)),\n    // let a, b be the size of target\n    // let a' be the value of a after applying skewing\n    // then:\n    // a' = a + b * skewA => skewA = (a' - a) / b\n    // the value b is tricky since skewY is applied before skewX\n    b =\n      axis === 'y'\n        ? target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n            // since skewY is applied before skewX, b (=width) is not affected by skewX\n            skewX: 0,\n          }).x\n        : target._getTransformedDimensions({\n            scaleX: 1,\n            scaleY: 1,\n          }).y;\n\n  const shearing =\n    (2 * offset * skewingSide) /\n      // we max out fractions to safeguard from asymptotic behavior\n      Math.max(b, 1) +\n    // add starting state\n    shearingStart;\n\n  const skewing = radiansToDegrees(Math.atan(shearing));\n\n  target.set(skewKey, skewing);\n  const changed = skewingBefore !== target[skewKey];\n\n  if (changed && axis === 'y') {\n    // we don't want skewing to affect scaleX\n    // so we factor it by the inverse skewing diff to make it seem unchanged to the viewer\n    const { skewX, scaleX } = target,\n      dimBefore = target._getTransformedDimensions({ skewY: skewingBefore }),\n      dimAfter = target._getTransformedDimensions(),\n      compensationFactor = skewX !== 0 ? dimBefore.x / dimAfter.x : 1;\n    compensationFactor !== 1 &&\n      target.set(SCALE_X, compensationFactor * scaleX);\n  }\n\n  return changed;\n}\n\n/**\n * Wrapped Action handler for skewing on a given axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nfunction skewHandler(\n  axis: TAxis,\n  eventData: TPointerEvent,\n  transform: Transform,\n  x: number,\n  y: number,\n) {\n  const { target } = transform,\n    {\n      counterAxis,\n      origin: originKey,\n      lockSkewing: lockSkewingKey,\n      skew: skewKey,\n      flip: flipKey,\n    } = AXIS_KEYS[axis];\n  if (isLocked(target, lockSkewingKey)) {\n    return false;\n  }\n\n  const { origin: counterOriginKey, flip: counterFlipKey } =\n      AXIS_KEYS[counterAxis],\n    counterOriginFactor =\n      resolveOrigin(transform[counterOriginKey]) *\n      (target[counterFlipKey] ? -1 : 1),\n    // if the counter origin is top/left (= -0.5) then we are skewing x/y values on the bottom/right side of target respectively.\n    // if the counter origin is bottom/right (= 0.5) then we are skewing x/y values on the top/left side of target respectively.\n    // skewing direction on the top/left side of target is OPPOSITE to the direction of the movement of the pointer,\n    // so we factor skewing direction by this value.\n    skewingSide = (-Math.sign(counterOriginFactor) *\n      (target[flipKey] ? -1 : 1)) as 1 | -1,\n    skewingDirection =\n      ((target[skewKey] === 0 &&\n        // in case skewing equals 0 we use the pointer offset from target center to determine the direction of skewing\n        getLocalPoint(transform, CENTER, CENTER, x, y)[axis] > 0) ||\n      // in case target has skewing we use that as the direction\n      target[skewKey] > 0\n        ? 1\n        : -1) * skewingSide,\n    // anchor to the opposite side of the skewing direction\n    // normalize value from [-1, 1] to origin value [0, 1]\n    origin = -skewingDirection * 0.5 + 0.5;\n\n  const finalHandler = wrapWithFireEvent<SkewTransform>(\n    SKEWING,\n    wrapWithFixedAnchor((eventData, transform, x, y) =>\n      skewObject(axis, transform, new Point(x, y)),\n    ),\n  );\n\n  return finalHandler(\n    eventData,\n    {\n      ...transform,\n      [originKey]: origin,\n      skewingSide,\n    },\n    x,\n    y,\n  );\n}\n\n/**\n * Wrapped Action handler for skewing on the X axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('x', eventData, transform, x, y);\n};\n\n/**\n * Wrapped Action handler for skewing on the Y axis, takes care of the\n * skew direction and determines the correct transform origin for the anchor point\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const skewHandlerY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return skewHandler('y', eventData, transform, x, y);\n};\n", "import type {\n  ControlCallback,\n  ControlCursorCallback,\n  TPointerEvent,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { SCALE_X, SCALE_Y, SKEW_X, SKEW_Y } from '../constants';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TAxisKey } from '../typedefs';\nimport { scaleCursorStyleHandler, scalingX, scalingY } from './scale';\nimport { skewCursorStyleHandler, skewHandlerX, skewHandlerY } from './skew';\n\nfunction isAltAction(eventData: TPointerEvent, target: FabricObject) {\n  return eventData[target.canvas!.altActionKey!];\n}\n\n/**\n * Inspect event, control and fabricObject to return the correct action name\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} an action name\n */\nexport const scaleOrSkewActionName: ControlCallback<\n  TAxisKey<'skew' | 'scale'> | ''\n> = (eventData, control, fabricObject) => {\n  const isAlternative = isAltAction(eventData, fabricObject);\n  if (control.x === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_X : SCALE_Y;\n  }\n  if (control.y === 0) {\n    // then is scaleY or skewX\n    return isAlternative ? SKEW_Y : SCALE_X;\n  }\n  return '';\n};\n\n/**\n * Combine skew and scale style handlers to cover fabric standard use case\n * @param {Event} eventData the javascript event that is causing the scale\n * @param {Control} control the control that is interested in the action\n * @param {FabricObject} fabricObject the fabric object that is interested in the action\n * @return {String} a valid css string for the cursor\n */\nexport const scaleSkewCursorStyleHandler: ControlCursorCallback = (\n  eventData,\n  control,\n  fabricObject,\n) => {\n  return isAltAction(eventData, fabricObject)\n    ? skewCursorStyleHandler(eventData, control, fabricObject)\n    : scaleCursorStyleHandler(eventData, control, fabricObject);\n};\n/**\n * Composed action handler to either scale X or skew Y\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingXOrSkewingY: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerY(eventData, transform, x, y)\n    : scalingX(eventData, transform, x, y);\n};\n\n/**\n * Composed action handler to either scale Y or skew X\n * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n * @param {Event} eventData javascript event that is doing the transform\n * @param {Object} transform javascript object containing a series of information around the current transform\n * @param {number} x current mouse x position, canvas normalized\n * @param {number} y current mouse y position, canvas normalized\n * @return {Boolean} true if some change happened\n */\nexport const scalingYOrSkewingX: TransformActionHandler = (\n  eventData,\n  transform,\n  x,\n  y,\n) => {\n  return isAltAction(eventData, transform.target)\n    ? skewHandlerX(eventData, transform, x, y)\n    : scalingY(eventData, transform, x, y);\n};\n", "import { RESIZING, ROTATE } from '../constants';\nimport { changeWidth } from './changeWidth';\nimport { Control } from './Control';\nimport { rotationStyleHandler, rotationWithSnapping } from './rotate';\nimport { scaleCursorStyleHandler, scalingEqually } from './scale';\nimport {\n  scaleOrSkewActionName,\n  scaleSkewCursorStyleHandler,\n  scalingXOrSkewingY,\n  scalingYOrSkewingX,\n} from './scaleSkew';\n\n// use this function if you want to generate new controls for every instance\nexport const createObjectDefaultControls = () => ({\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mb: new Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  mt: new Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  }),\n\n  tl: new Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  tr: new Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  bl: new Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  br: new Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleCursorStyleHandler,\n    actionHandler: scalingEqually,\n  }),\n\n  mtr: new Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: rotationWithSnapping,\n    cursorStyleHandler: rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: ROTATE,\n  }),\n});\n\nexport const createResizeControls = () => ({\n  mr: new Control({\n    x: 0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n  ml: new Control({\n    x: -0.5,\n    y: 0,\n    actionHandler: changeWidth,\n    cursorStyleHandler: scaleSkewCursorStyleHandler,\n    actionName: RESIZING,\n  }),\n});\n\nexport const createTextboxDefaultControls = () => ({\n  ...createObjectDefaultControls(),\n  ...createResizeControls(),\n});\n", "import { Point, ZERO } from '../../Point';\nimport type { TCornerPoint, TDegree } from '../../typedefs';\nimport { FabricObject } from './Object';\nimport { degreesToRadians } from '../../util/misc/radiansDegreesConversion';\nimport type { TQrDecomposeOut } from '../../util/misc/matrix';\nimport {\n  calcDimensionsMatrix,\n  createRotateMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../../util/misc/matrix';\nimport type { Control } from '../../controls/Control';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport type { ObjectEvents, TPointerEvent } from '../../EventTypeDefs';\nimport type { Canvas } from '../../canvas/Canvas';\nimport type { ControlRenderingStyleOverride } from '../../controls/controlRendering';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { createObjectDefaultControls } from '../../controls/commonControls';\nimport { interactiveObjectDefaultValues } from './defaultValues';\nimport { SCALE } from '../../constants';\n\nexport type TOCoord = Point & {\n  corner: TCornerPoint;\n  touchCorner: TCornerPoint;\n};\n\nexport type TControlSet = Record<string, Control>;\n\nexport type TBorderRenderingStyleOverride = Partial<\n  Pick<InteractiveFabricObject, 'borderColor' | 'borderDashArray'>\n>;\n\nexport type TStyleOverride = ControlRenderingStyleOverride &\n  TBorderRenderingStyleOverride &\n  Partial<\n    Pick<InteractiveFabricObject, 'hasBorders' | 'hasControls'> & {\n      forActiveSelection: boolean;\n    }\n  >;\n\nexport class InteractiveFabricObject<\n    Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  declare noScaleCache: boolean;\n\n  declare snapAngle?: TDegree;\n  declare snapThreshold?: TDegree;\n\n  declare lockMovementX: boolean;\n  declare lockMovementY: boolean;\n  declare lockRotation: boolean;\n  declare lockScalingX: boolean;\n  declare lockScalingY: boolean;\n  declare lockSkewingX: boolean;\n  declare lockSkewingY: boolean;\n  declare lockScalingFlip: boolean;\n\n  declare cornerSize: number;\n  declare touchCornerSize: number;\n  declare transparentCorners: boolean;\n  declare cornerColor: string;\n  declare cornerStrokeColor: string;\n  declare cornerStyle: 'rect' | 'circle';\n  declare cornerDashArray: number[] | null;\n  declare hasControls: boolean;\n\n  declare borderColor: string;\n  declare borderDashArray: number[] | null;\n  declare borderOpacityWhenMoving: number;\n  declare borderScaleFactor: number;\n  declare hasBorders: boolean;\n  declare selectionBackgroundColor: string;\n\n  declare selectable: boolean;\n  declare evented: boolean;\n  declare perPixelTargetFind: boolean;\n  declare activeOn: 'down' | 'up';\n\n  declare hoverCursor: CSSStyleDeclaration['cursor'] | null;\n  declare moveCursor: CSSStyleDeclaration['cursor'] | null;\n\n  /**\n   * The object's controls' position in viewport coordinates\n   * Calculated by {@link Control#positionHandler} and {@link Control#calcCornerCoords}, depending on {@link padding}.\n   * `corner/touchCorner` describe the 4 points forming the interactive area of the corner.\n   * Used to draw and locate controls.\n   */\n  declare oCoords: Record<string, TOCoord>;\n\n  /**\n   * keeps the value of the last hovered corner during mouse move.\n   * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n   * It should be private, but there is no harm in using it as\n   * a read-only property.\n   * this isn't cleaned automatically. Non selected objects may have wrong values\n   * @type [string]\n   */\n  declare __corner?: string;\n\n  /**\n   * a map of control visibility for this object.\n   * this was left when controls were introduced to not break the api too much\n   * this takes priority over the generic control visibility\n   */\n  declare _controlsVisibility: Record<string, boolean>;\n\n  /**\n   * holds the controls for the object.\n   * controls are added by default_controls.js\n   */\n  declare controls: TControlSet;\n\n  /**\n   * internal boolean to signal the code that the object is\n   * part of the move action.\n   */\n  declare isMoving?: boolean;\n\n  /**\n   * A boolean used from the gesture module to keep tracking of a scaling\n   * action when there is no scaling transform in place.\n   * This is an edge case and is used twice in all codebase.\n   * Probably added to keep track of some performance issues\n   * @TODO use git blame to investigate why it was added\n   * DON'T USE IT. WE WILL TRY TO REMOVE IT\n   */\n  declare _scaling?: boolean;\n\n  declare canvas?: Canvas;\n\n  static ownDefaults = interactiveObjectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...InteractiveFabricObject.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(\n      this,\n      (this.constructor as typeof InteractiveFabricObject).createControls(),\n      InteractiveFabricObject.ownDefaults,\n    );\n    this.setOptions(options);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults\n   * @param {Object} [options] Options object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createObjectDefaultControls() };\n  }\n\n  /**\n   * Update width and height of the canvas for cache\n   * returns true or false if canvas needed resize.\n   * @private\n   * @return {Boolean} true if the canvas has been resized\n   */\n  _updateCacheCanvas() {\n    const targetCanvas = this.canvas;\n    if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n      const transform = targetCanvas._currentTransform,\n        target = transform.target,\n        action = transform.action;\n      if (\n        this === (target as unknown as this) &&\n        action &&\n        action.startsWith(SCALE)\n      ) {\n        return false;\n      }\n    }\n    return super._updateCacheCanvas();\n  }\n\n  getActiveControl() {\n    const key = this.__corner;\n    return key\n      ? {\n          key,\n          control: this.controls[key],\n          coord: this.oCoords[key],\n        }\n      : undefined;\n  }\n\n  /**\n   * Determines which corner is under the mouse cursor, represented by `pointer`.\n   * This function is return a corner only if the object is the active one.\n   * This is done to avoid selecting corner of non active object and activating transformations\n   * rather than drag action. The default behavior of fabricJS is that if you want to transform\n   * an object, first you select it to show the control set\n   * @private\n   * @param {Object} pointer The pointer indicating the mouse position\n   * @param {boolean} forTouch indicates if we are looking for interaction area with a touch action\n   * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or 0 if nothing is found.\n   */\n  findControl(\n    pointer: Point,\n    forTouch = false,\n  ): { key: string; control: Control; coord: TOCoord } | undefined {\n    if (!this.hasControls || !this.canvas) {\n      return undefined;\n    }\n\n    this.__corner = undefined;\n    const cornerEntries = Object.entries(this.oCoords);\n    for (let i = cornerEntries.length - 1; i >= 0; i--) {\n      const [key, corner] = cornerEntries[i];\n      const control = this.controls[key];\n\n      if (\n        control.shouldActivate(\n          key,\n          this,\n          pointer,\n          forTouch ? corner.touchCorner : corner.corner,\n        )\n      ) {\n        // this.canvas.contextTop.fillRect(pointer.x - 1, pointer.y - 1, 2, 2);\n        this.__corner = key;\n\n        return { key, control, coord: this.oCoords[key] };\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Calculates the coordinates of the center of each control plus the corners of the control itself\n   * This basically just delegates to each control positionHandler\n   * WARNING: changing what is passed to positionHandler is a breaking change, since position handler\n   * is a public api and should be done just if extremely necessary\n   * @return {Record<string, TOCoord>}\n   */\n  calcOCoords(): Record<string, TOCoord> {\n    const vpt = this.getViewportTransform(),\n      center = this.getCenterPoint(),\n      tMatrix = createTranslateMatrix(center.x, center.y),\n      rMatrix = createRotateMatrix({\n        angle: this.getTotalAngle() - (!!this.group && this.flipX ? 180 : 0),\n      }),\n      positionMatrix = multiplyTransformMatrices(tMatrix, rMatrix),\n      startMatrix = multiplyTransformMatrices(vpt, positionMatrix),\n      finalMatrix = multiplyTransformMatrices(startMatrix, [\n        1 / vpt[0],\n        0,\n        0,\n        1 / vpt[3],\n        0,\n        0,\n      ]),\n      transformOptions = this.group\n        ? qrDecompose(this.calcTransformMatrix())\n        : undefined;\n    // decomposing could bring negative scaling and `_calculateCurrentDimensions` can't take it\n    if (transformOptions) {\n      transformOptions.scaleX = Math.abs(transformOptions.scaleX);\n      transformOptions.scaleY = Math.abs(transformOptions.scaleY);\n    }\n    const dim = this._calculateCurrentDimensions(transformOptions),\n      coords: Record<string, TOCoord> = {};\n\n    this.forEachControl((control, key) => {\n      const position = control.positionHandler(dim, finalMatrix, this, control);\n      // coords[key] are sometimes used as points. Those are points to which we add\n      // the property corner and touchCorner from `_calcCornerCoords`.\n      // don't remove this assign for an object spread.\n      coords[key] = Object.assign(\n        position,\n        this._calcCornerCoords(control, position),\n      );\n    });\n\n    // debug code\n    /*\n      const canvas = this.canvas;\n      setTimeout(function () {\n      if (!canvas) return;\n        canvas.contextTop.clearRect(0, 0, 700, 700);\n        canvas.contextTop.fillStyle = 'green';\n        Object.keys(coords).forEach(function(key) {\n          const control = coords[key];\n          canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n        });\n      } 50);\n    */\n    return coords;\n  }\n\n  /**\n   * Sets the coordinates that determine the interaction area of each control\n   * note: if we would switch to ROUND corner area, all of this would disappear.\n   * everything would resolve to a single point and a pythagorean theorem for the distance\n   * @todo evaluate simplification of code switching to circle interaction area at runtime\n   * @private\n   */\n  private _calcCornerCoords(control: Control, position: Point) {\n    const angle = this.getTotalAngle();\n    const corner = control.calcCornerCoords(\n      angle,\n      this.cornerSize,\n      position.x,\n      position.y,\n      false,\n      this,\n    );\n    const touchCorner = control.calcCornerCoords(\n      angle,\n      this.touchCornerSize,\n      position.x,\n      position.y,\n      true,\n      this,\n    );\n    return { corner, touchCorner };\n  }\n\n  /**\n   * @override set controls' coordinates as well\n   * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n   * @return {void}\n   */\n  setCoords(): void {\n    super.setCoords();\n    this.canvas && (this.oCoords = this.calcOCoords());\n  }\n\n  /**\n   * Calls a function for each control. The function gets called,\n   * with the control, the control's key and the object that is calling the iterator\n   * @param {Function} fn function to iterate over the controls over\n   */\n  forEachControl(\n    fn: (\n      control: Control,\n      key: string,\n      fabricObject: InteractiveFabricObject,\n    ) => any,\n  ) {\n    for (const i in this.controls) {\n      fn(this.controls[i], i, this);\n    }\n  }\n\n  /**\n   * Draws a colored layer behind the object, inside its selection borders.\n   * Requires public options: padding, selectionBackgroundColor\n   * this function is called when the context is transformed\n   * has checks to be skipped when the object is on a staticCanvas\n   * @todo evaluate if make this disappear in favor of a pre-render hook for objects\n   * this was added by Andrea Bogazzi to make possible some feature for work reasons\n   * it seemed a good option, now is an edge case\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   */\n  drawSelectionBackground(ctx: CanvasRenderingContext2D): void {\n    if (\n      !this.selectionBackgroundColor ||\n      (this.canvas && (this.canvas._activeObject as unknown as this) !== this)\n    ) {\n      return;\n    }\n    ctx.save();\n    const center = this.getRelativeCenterPoint(),\n      wh = this._calculateCurrentDimensions(),\n      vpt = this.getViewportTransform();\n    ctx.translate(center.x, center.y);\n    ctx.scale(1 / vpt[0], 1 / vpt[3]);\n    ctx.rotate(degreesToRadians(this.angle));\n    ctx.fillStyle = this.selectionBackgroundColor;\n    ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n    ctx.restore();\n  }\n\n  /**\n   * @public override this function in order to customize the drawing of the control box, e.g. rounded corners, different border style.\n   * @param {CanvasRenderingContext2D} ctx ctx is rotated and translated so that (0,0) is at object's center\n   * @param {Point} size the control box size used\n   */\n  strokeBorders(ctx: CanvasRenderingContext2D, size: Point): void {\n    ctx.strokeRect(-size.x / 2, -size.y / 2, size.x, size.y);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size\n   * @param {TStyleOverride} styleOverride object to override the object style\n   */\n  _drawBorders(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n    styleOverride: TStyleOverride = {},\n  ): void {\n    const options = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      borderDashArray: this.borderDashArray,\n      ...styleOverride,\n    };\n    ctx.save();\n    ctx.strokeStyle = options.borderColor;\n    this._setLineDash(ctx, options.borderDashArray);\n    this.strokeBorders(ctx, size);\n    options.hasControls && this.drawControlsConnectingLines(ctx, size);\n    ctx.restore();\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * the context here is not transformed\n   * @todo move to interactivity\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {TStyleOverride} [styleOverride] properties to override the object style\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: TStyleOverride = {},\n  ) {\n    const { hasBorders, hasControls } = this;\n    const styleOptions = {\n      hasBorders,\n      hasControls,\n      ...styleOverride,\n    };\n    const vpt = this.getViewportTransform(),\n      shouldDrawBorders = styleOptions.hasBorders,\n      shouldDrawControls = styleOptions.hasControls;\n    const matrix = multiplyTransformMatrices(vpt, this.calcTransformMatrix());\n    const options = qrDecompose(matrix);\n    ctx.save();\n    ctx.translate(options.translateX, options.translateY);\n    ctx.lineWidth = this.borderScaleFactor; // 1 * this.borderScaleFactor;\n    // since interactive groups have been introduced, an object could be inside a group and needing controls\n    // the following equality check `this.group === this.parent` covers:\n    // object without a group ( undefined === undefined )\n    // object inside a group\n    // excludes object inside a group but multi selected since group and parent will differ in value\n    if (this.group === this.parent) {\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    }\n    if (this.flipX) {\n      options.angle -= 180;\n    }\n    ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n    shouldDrawBorders && this.drawBorders(ctx, options, styleOverride);\n    shouldDrawControls && this.drawControls(ctx, styleOverride);\n    ctx.restore();\n  }\n\n  /**\n   * Draws borders of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {object} options object representing current object parameters\n   * @param {TStyleOverride} [styleOverride] object to override the object style\n   */\n  drawBorders(\n    ctx: CanvasRenderingContext2D,\n    options: TQrDecomposeOut,\n    styleOverride: TStyleOverride,\n  ): void {\n    let size;\n    if ((styleOverride && styleOverride.forActiveSelection) || this.group) {\n      const bbox = sizeAfterTransform(\n          this.width,\n          this.height,\n          calcDimensionsMatrix(options),\n        ),\n        stroke = !this.isStrokeAccountedForInDimensions()\n          ? (this.strokeUniform\n              ? new Point().scalarAdd(this.canvas ? this.canvas.getZoom() : 1)\n              : // this is extremely confusing. options comes from the upper function\n                // and is the qrDecompose of a matrix that takes in account zoom too\n                new Point(options.scaleX, options.scaleY)\n            ).scalarMultiply(this.strokeWidth)\n          : ZERO;\n      size = bbox\n        .add(stroke)\n        .scalarAdd(this.borderScaleFactor)\n        .scalarAdd(this.padding * 2);\n    } else {\n      size = this._calculateCurrentDimensions().scalarAdd(\n        this.borderScaleFactor,\n      );\n    }\n    this._drawBorders(ctx, size, styleOverride);\n  }\n\n  /**\n   * Draws lines from a borders of an object's bounding box to controls that have `withConnection` property set.\n   * Requires public properties: width, height\n   * Requires public options: padding, borderColor\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {Point} size object size x = width, y = height\n   */\n  drawControlsConnectingLines(\n    ctx: CanvasRenderingContext2D,\n    size: Point,\n  ): void {\n    let shouldStroke = false;\n\n    ctx.beginPath();\n    this.forEachControl((control, key) => {\n      // in this moment, the ctx is centered on the object.\n      // width and height of the above function are the size of the bbox.\n      if (control.withConnection && control.getVisibility(this, key)) {\n        // reset movement for each control\n        shouldStroke = true;\n        ctx.moveTo(control.x * size.x, control.y * size.y);\n        ctx.lineTo(\n          control.x * size.x + control.offsetX,\n          control.y * size.y + control.offsetY,\n        );\n      }\n    });\n    shouldStroke && ctx.stroke();\n  }\n\n  /**\n   * Draws corners of an object's bounding box.\n   * Requires public properties: width, height\n   * Requires public options: cornerSize, padding\n   * Be aware that since fabric 6.0 this function does not call setCoords anymore.\n   * setCoords needs to be called manually if the object of which we are rendering controls\n   * is outside the standard selection and transform process.\n   * @param {CanvasRenderingContext2D} ctx Context to draw on\n   * @param {ControlRenderingStyleOverride} styleOverride object to override the object style\n   */\n  drawControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride: ControlRenderingStyleOverride = {},\n  ) {\n    ctx.save();\n    const retinaScaling = this.getCanvasRetinaScaling();\n    const { cornerStrokeColor, cornerDashArray, cornerColor } = this;\n    const options = {\n      cornerStrokeColor,\n      cornerDashArray,\n      cornerColor,\n      ...styleOverride,\n    };\n    ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n    ctx.strokeStyle = ctx.fillStyle = options.cornerColor;\n    if (!this.transparentCorners) {\n      ctx.strokeStyle = options.cornerStrokeColor;\n    }\n    this._setLineDash(ctx, options.cornerDashArray);\n    this.forEachControl((control, key) => {\n      if (control.getVisibility(this, key)) {\n        const p = this.oCoords[key];\n        control.render(ctx, p.x, p.y, options, this);\n      }\n    });\n    ctx.restore();\n  }\n\n  /**\n   * Returns true if the specified control is visible, false otherwise.\n   * @param {string} controlKey The key of the control. Possible values are usually 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr',\n   * but since the control api allow for any control name, can be any string.\n   * @returns {boolean} true if the specified control is visible, false otherwise\n   */\n  isControlVisible(controlKey: string): boolean {\n    return (\n      this.controls[controlKey] &&\n      this.controls[controlKey].getVisibility(this, controlKey)\n    );\n  }\n\n  /**\n   * Sets the visibility of the specified control.\n   * please do not use.\n   * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n   * but since the control api allow for any control name, can be any string.\n   * @param {Boolean} visible true to set the specified control visible, false otherwise\n   * @todo discuss this overlap of priority here with the team. Andrea Bogazzi for details\n   */\n  setControlVisible(controlKey: string, visible: boolean) {\n    if (!this._controlsVisibility) {\n      this._controlsVisibility = {};\n    }\n    this._controlsVisibility[controlKey] = visible;\n  }\n\n  /**\n   * Sets the visibility state of object controls, this is just a bulk option for setControlVisible;\n   * @param {Record<string, boolean>} [options] with an optional key per control\n   * example: {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n   */\n  setControlsVisibility(options: Record<string, boolean> = {}) {\n    Object.entries(options).forEach(([controlKey, visibility]) =>\n      this.setControlVisible(controlKey, visibility),\n    );\n  }\n\n  /**\n   * Clears the canvas.contextTop in a specific area that corresponds to the object's bounding box\n   * that is in the canvas.contextContainer.\n   * This function is used to clear pieces of contextTop where we render ephemeral effects on top of the object.\n   * Example: blinking cursor text selection, drag effects.\n   * @todo discuss swapping restoreManually with a renderCallback, but think of async issues\n   * @param {Boolean} [restoreManually] When true won't restore the context after clear, in order to draw something else.\n   * @return {CanvasRenderingContext2D|undefined} canvas.contextTop that is either still transformed\n   * with the object transformMatrix, or restored to neutral transform\n   */\n  clearContextTop(\n    restoreManually?: boolean,\n  ): CanvasRenderingContext2D | undefined {\n    if (!this.canvas) {\n      return;\n    }\n    const ctx = this.canvas.contextTop;\n    if (!ctx) {\n      return;\n    }\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    this.transform(ctx);\n    // we add 4 pixel, to be sure to do not leave any pixel out\n    const width = this.width + 4,\n      height = this.height + 4;\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n\n    restoreManually || ctx.restore();\n    return ctx;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to deselect this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {TPointerEvent} [options.e] event if the process is generated by an event\n   * @param {FabricObject} [options.object] next object we are setting as active, and reason why\n   * this is being deselected\n   */\n  onDeselect(_options?: {\n    e?: TPointerEvent;\n    object?: InteractiveFabricObject;\n  }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * This callback function is called every time _discardActiveObject or _setActiveObject\n   * try to to select this object. If the function returns true, the process is cancelled\n   * @param {Object} [_options] options sent from the upper functions\n   * @param {Event} [_options.e] event if the process is generated by an event\n   */\n  onSelect(_options?: { e?: TPointerEvent }): boolean {\n    // implemented by sub-classes, as needed.\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\n   * Fired from {@link Canvas#_onMouseMove}\n   * @returns true in order for the window to start a drag session\n   */\n  shouldStartDragging(_e: TPointerEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize Drag behavior\\\n   * Fired once a drag session has started\n   * @returns true to handle the drag event\n   */\n  onDragStart(_e: DragEvent) {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * @public\n   * @param {DragEvent} _e\n   * @returns {boolean} true if the object currently dragged can be dropped on the target\n   */\n  canDrop(_e: DragEvent): boolean {\n    return false;\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the source of a drag event\n   * example: render the selection status for the part of text that is being dragged from a text object\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDragSourceEffect(_e: DragEvent) {\n    // for subclasses\n  }\n\n  /**\n   * Override to customize drag and drop behavior\n   * render a specific effect when an object is the target of a drag event\n   * used to show that the underly object can receive a drop, or to show how the\n   * object will change when dropping. example: show the cursor where the text is about to be dropped\n   * @public\n   * @param {DragEvent} _e\n   */\n  renderDropTargetEffect(_e: DragEvent) {\n    // for subclasses\n  }\n}\n", "import type { Constructor } from '../typedefs';\n\n/***\n * https://www.typescriptlang.org/docs/handbook/mixins.html#alternative-pattern\n */\nexport function applyMixins<T extends Constructor, S extends Constructor>(\n  derivedCtor: T,\n  constructors: S[],\n) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      name !== 'constructor' &&\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n            Object.create(null),\n        );\n    });\n  });\n  return derivedCtor as T & { prototype: InstanceType<T & S> };\n}\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport { FabricObjectSVGExportMixin } from './FabricObjectSVGExportMixin';\nimport { InteractiveFabricObject } from './InteractiveObject';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps } from './types/FabricObjectProps';\nimport type { TFabricObjectProps, SerializedObjectProps } from './types';\nimport { classRegistry } from '../../ClassRegistry';\n\n// TODO somehow we have to make a tree-shakeable import\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface FabricObject<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObjectSVGExportMixin {}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class FabricObject<\n  Props extends TFabricObjectProps = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends InteractiveFabricObject<Props, SProps, EventSpec> {}\n\napplyMixins(FabricObject, [FabricObjectSVGExportMixin]);\n\nclassRegistry.setClass(FabricObject);\nclassRegistry.setClass(FabricObject, 'object');\n\nexport { cacheProperties } from './defaultValues';\n", "/**\n * Returns true if context has transparent pixel\n * at specified location (taking tolerance into account)\n * @param {CanvasRenderingContext2D} ctx context\n * @param {Number} x x coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} y y coordinate in canvasElementCoordinate, not fabric space. integer\n * @param {Number} tolerance Tolerance pixels around the point, not alpha tolerance, integer\n * @return {boolean} true if transparent\n */\nexport const isTransparent = (\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  tolerance: number,\n): boolean => {\n  tolerance = Math.round(tolerance);\n  const size = tolerance * 2 + 1;\n  const { data } = ctx.getImageData(x - tolerance, y - tolerance, size, size);\n\n  // Split image data - for tolerance > 1, pixelDataSize = 4;\n  for (let i = 3; i < data.length; i += 4) {\n    const alphaChannel = data[i];\n    if (alphaChannel > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport { createVector } from '../vectors';\nimport type { TProjectStrokeOnPointsOptions, TProjection } from './types';\n\n/**\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n * @todo consider removing skewing from points before calculating stroke projection,\n * see https://github.com/fabricjs/fabric.js/commit/494a10ee2f8c2278ae9a55b20bf50cf6ee25b064#commitcomment-94751537\n */\nexport abstract class StrokeProjectionsBase {\n  declare options: TProjectStrokeOnPointsOptions;\n  declare scale: Point;\n  declare strokeUniformScalar: Point;\n  declare strokeProjectionMagnitude: number;\n\n  constructor(options: TProjectStrokeOnPointsOptions) {\n    this.options = options;\n    this.strokeProjectionMagnitude = this.options.strokeWidth / 2;\n    this.scale = new Point(this.options.scaleX, this.options.scaleY);\n    this.strokeUniformScalar = this.options.strokeUniform\n      ? new Point(1 / this.options.scaleX, 1 / this.options.scaleY)\n      : new Point(1, 1);\n  }\n\n  /**\n   * When the stroke is uniform, scaling affects the arrangement of points. So we must take it into account.\n   */\n  protected createSideVector(from: XY, to: XY) {\n    const v = createVector(from, to);\n    return this.options.strokeUniform ? v.multiply(this.scale) : v;\n  }\n\n  protected abstract calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude?: number,\n  ): Point;\n\n  protected projectOrthogonally(from: Point, to: Point, magnitude?: number) {\n    return this.applySkew(\n      from.add(this.calcOrthogonalProjection(from, to, magnitude)),\n    );\n  }\n\n  protected isSkewed() {\n    return this.options.skewX !== 0 || this.options.skewY !== 0;\n  }\n\n  protected applySkew(point: Point) {\n    const p = new Point(point);\n    // skewY must be applied before skewX as this distortion affects skewX calculation\n    p.y += p.x * Math.tan(degreesToRadians(this.options.skewY));\n    p.x += p.y * Math.tan(degreesToRadians(this.options.skewX));\n    return p;\n  }\n\n  protected scaleUnitVector(unitVector: Point, scalar: number) {\n    return unitVector.multiply(this.strokeUniformScalar).scalarMultiply(scalar);\n  }\n\n  protected abstract projectPoints(): Point[];\n\n  public abstract project(): TProjection[];\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { halfPI, twoMathPi } from '../../../constants';\nimport type { TRadian } from '../../../typedefs';\nimport { degreesToRadians } from '../radiansDegreesConversion';\nimport {\n  calcAngleBetweenVectors,\n  calcVectorRotation,\n  crossProduct,\n  getOrthonormalVector,\n  getUnitVector,\n  isBetweenVectors,\n  magnitude,\n  rotateVector,\n} from '../vectors';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nconst zeroVector = new Point();\n\n/**\n * class in charge of finding projections for each type of line join\n * @see {@link [Closed path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#2-closed-path)}\n *\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linejoin\n * - Spec: https://svgwg.org/svg2-draft/painting.html#StrokeLinejoinProperty\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n *\n */\nexport class StrokeLineJoinProjections extends StrokeProjectionsBase {\n  /**\n   * The point being projected (the angle ∠BAC)\n   */\n  declare A: Point;\n  /**\n   * The point before A\n   */\n  declare B: Point;\n  /**\n   * The point after A\n   */\n  declare C: Point;\n  /**\n   * The AB vector\n   */\n  AB: Point;\n  /**\n   * The AC vector\n   */\n  AC: Point;\n  /**\n   * The angle of A (∠BAC)\n   */\n  alpha: TRadian;\n  /**\n   * The bisector of A (∠BAC)\n   */\n  bisector: Point;\n\n  static getOrthogonalRotationFactor(vector1: Point, vector2?: Point) {\n    const angle = vector2\n      ? calcAngleBetweenVectors(vector1, vector2)\n      : calcVectorRotation(vector1);\n    return Math.abs(angle) < halfPI ? -1 : 1;\n  }\n\n  constructor(A: XY, B: XY, C: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.B = new Point(B);\n    this.C = new Point(C);\n    this.AB = this.createSideVector(this.A, this.B);\n    this.AC = this.createSideVector(this.A, this.C);\n    this.alpha = calcAngleBetweenVectors(this.AB, this.AC);\n    this.bisector = getUnitVector(\n      // if AC is also the zero vector nothing will be projected\n      // in that case the next point will handle the projection\n      rotateVector(this.AB.eq(zeroVector) ? this.AC : this.AB, this.alpha / 2),\n    );\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    const orthogonalProjection = getOrthonormalVector(vector);\n    const correctSide = StrokeLineJoinProjections.getOrthogonalRotationFactor(\n      orthogonalProjection,\n      this.bisector,\n    );\n    return this.scaleUnitVector(orthogonalProjection, magnitude * correctSide);\n  }\n\n  /**\n   * BEVEL\n   * Calculation: the projection points are formed by the vector orthogonal to the vertex.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-2-bevel\n   */\n  projectBevel() {\n    const projections: Point[] = [];\n    // if `alpha` equals 0 or 2*PI, the projections are the same for `B` and `C`\n    (this.alpha % twoMathPi === 0 ? [this.B] : [this.B, this.C]).forEach(\n      (to) => {\n        projections.push(this.projectOrthogonally(this.A, to));\n        projections.push(\n          this.projectOrthogonally(this.A, to, -this.strokeProjectionMagnitude),\n        );\n      },\n    );\n    return projections;\n  }\n\n  /**\n   * MITER\n   * Calculation: the corner is formed by extending the outer edges of the stroke\n   * at the tangents of the path segments until they intersect.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-1-miter\n   */\n  projectMiter() {\n    const projections: Point[] = [],\n      alpha = Math.abs(this.alpha),\n      hypotUnitScalar = 1 / Math.sin(alpha / 2),\n      miterVector = this.scaleUnitVector(\n        this.bisector,\n        -this.strokeProjectionMagnitude * hypotUnitScalar,\n      );\n\n    // When two line segments meet at a sharp angle, it is possible for the join to extend,\n    // far beyond the thickness of the line stroking the path. The stroke-miterlimit imposes\n    // a limit on the extent of the line join.\n    // MDN: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n    // When the stroke is uniform, scaling changes the arrangement of points, this changes the miter-limit\n    const strokeMiterLimit = this.options.strokeUniform\n      ? magnitude(\n          this.scaleUnitVector(this.bisector, this.options.strokeMiterLimit),\n        )\n      : this.options.strokeMiterLimit;\n\n    if (\n      magnitude(miterVector) / this.strokeProjectionMagnitude <=\n      strokeMiterLimit\n    ) {\n      projections.push(this.applySkew(this.A.add(miterVector)));\n    }\n    /* when the miter-limit is reached, the stroke line join becomes of type bevel.\n      We always need two orthogonal projections which are basically bevel-type projections,\n      so regardless of whether the miter-limit was reached or not, we include these projections.\n    */\n    projections.push(...this.projectBevel());\n\n    return projections;\n  }\n\n  /**\n   * ROUND (without skew)\n   * Calculation: the projections are the two vectors parallel to X and Y axes\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-1-round-without-skew\n   */\n  private projectRoundNoSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [],\n      // correctSide is used to only consider projecting for the outer side\n      correctSide = new Point(\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(this.bisector),\n        StrokeLineJoinProjections.getOrthogonalRotationFactor(\n          new Point(this.bisector.y, this.bisector.x),\n        ),\n      ),\n      radiusOnAxisX = new Point(1, 0)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide),\n      radiusOnAxisY = new Point(0, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar)\n        .multiply(correctSide);\n\n    [radiusOnAxisX, radiusOnAxisY].forEach((vector) => {\n      if (isBetweenVectors(vector, startCircle, endCircle)) {\n        projections.push(this.A.add(vector));\n      }\n    });\n    return projections;\n  }\n\n  /**\n   * ROUND (with skew)\n   * Calculation: the projections are the points furthest from the vertex in\n   * the direction of the X and Y axes after distortion.\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#2-3-2-round-skew\n   */\n  private projectRoundWithSkew(startCircle: Point, endCircle: Point) {\n    const projections: Point[] = [];\n\n    const { skewX, skewY, scaleX, scaleY, strokeUniform } = this.options,\n      shearing = new Point(\n        Math.tan(degreesToRadians(skewX)),\n        Math.tan(degreesToRadians(skewY)),\n      );\n    // The points furthest from the vertex in the direction of the X and Y axes after distortion\n    const circleRadius = this.strokeProjectionMagnitude,\n      newY = strokeUniform\n        ? circleRadius /\n          scaleY /\n          Math.sqrt(1 / scaleY ** 2 + (1 / scaleX ** 2) * shearing.y ** 2)\n        : circleRadius / Math.sqrt(1 + shearing.y ** 2),\n      furthestY = new Point(\n        // Safe guard due to floating point precision. In some situations the square root\n        // was returning NaN because of a negative number close to zero.\n        Math.sqrt(Math.max(circleRadius ** 2 - newY ** 2, 0)),\n        newY,\n      ),\n      newX = strokeUniform\n        ? circleRadius /\n          Math.sqrt(\n            1 +\n              (shearing.x ** 2 * (1 / scaleY) ** 2) /\n                (1 / scaleX + (1 / scaleX) * shearing.x * shearing.y) ** 2,\n          )\n        : circleRadius /\n          Math.sqrt(1 + shearing.x ** 2 / (1 + shearing.x * shearing.y) ** 2),\n      furthestX = new Point(\n        newX,\n        Math.sqrt(Math.max(circleRadius ** 2 - newX ** 2, 0)),\n      );\n\n    [\n      furthestX,\n      furthestX.scalarMultiply(-1),\n      furthestY,\n      furthestY.scalarMultiply(-1),\n    ]\n      // We need to skew the vector here as this information is used to check if\n      // it is between the start and end of the circle segment\n      .map((vector) =>\n        this.applySkew(\n          strokeUniform ? vector.multiply(this.strokeUniformScalar) : vector,\n        ),\n      )\n      .forEach((vector) => {\n        if (isBetweenVectors(vector, startCircle, endCircle)) {\n          projections.push(this.applySkew(this.A).add(vector));\n        }\n      });\n\n    return projections;\n  }\n\n  projectRound() {\n    const projections: Point[] = [];\n    /* Include the start and end points of the circle segment, so that only\n      the projections contained within it are included */\n    // add the orthogonal projections (start and end points of circle segment)\n    projections.push(...this.projectBevel());\n    // let's determines which one of the orthogonal projection is the beginning and end of the circle segment.\n    // when `alpha` equals 0 or 2*PI, we have a straight line, so the way to find the start/end is different.\n    const isStraightLine = this.alpha % twoMathPi === 0,\n      // change the origin of the projections to point A\n      // so that the cross product calculation is correct\n      newOrigin = this.applySkew(this.A),\n      proj0 = projections[isStraightLine ? 0 : 2].subtract(newOrigin),\n      proj1 = projections[isStraightLine ? 1 : 0].subtract(newOrigin),\n      // when `isStraightLine` === true, we compare with the vector opposite AB, otherwise we compare with the bisector.\n      comparisonVector = isStraightLine\n        ? this.applySkew(this.AB.scalarMultiply(-1))\n        : this.applySkew(\n            this.bisector.multiply(this.strokeUniformScalar).scalarMultiply(-1),\n          ),\n      // the beginning of the circle segment is always to the right of the comparison vector (cross product > 0)\n      isProj0Start = crossProduct(proj0, comparisonVector) > 0,\n      startCircle = isProj0Start ? proj0 : proj1,\n      endCircle = isProj0Start ? proj1 : proj0;\n    if (!this.isSkewed()) {\n      projections.push(...this.projectRoundNoSkew(startCircle, endCircle));\n    } else {\n      projections.push(...this.projectRoundWithSkew(startCircle, endCircle));\n    }\n    return projections;\n  }\n\n  /**\n   * Project stroke width on points returning projections for each point as follows:\n   * - `miter`: 1 point corresponding to the outer boundary. If the miter limit is exceeded, it will be 2 points (becomes bevel)\n   * - `bevel`: 2 points corresponding to the bevel possible boundaries, orthogonal to the stroke.\n   * - `round`: same as `bevel` when it has no skew, with skew are 4 points.\n   */\n  protected projectPoints() {\n    switch (this.options.strokeLineJoin) {\n      case 'miter':\n        return this.projectMiter();\n      case 'round':\n        return this.projectRound();\n      default:\n        return this.projectBevel();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n      angle: this.alpha,\n      bisector: this.bisector,\n    }));\n  }\n}\n", "import type { XY } from '../../../Point';\nimport { Point } from '../../../Point';\nimport { getOrthonormalVector, getUnitVector } from '../vectors';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport { StrokeProjectionsBase } from './StrokeProjectionsBase';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\n/**\n * class in charge of finding projections for each type of line cap for start/end of an open path\n * @see {@link [Open path projections at #8344](https://github.com/fabricjs/fabric.js/pull/8344#1-open-path)}\n *\n * Reference:\n * - MDN:\n *   - https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap\n *   - https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n * - Spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-linecap-dev\n * - Playground to understand how the line joins works: https://hypertolosana.github.io/efficient-webgl-stroking/index.html\n * - View the calculated projections for each of the control points: https://codesandbox.io/s/project-stroke-points-with-context-to-trace-b8jc4j?file=/src/index.js\n */\nexport class StrokeLineCapProjections extends StrokeProjectionsBase {\n  /**\n   * edge point\n   */\n  declare A: Point;\n  /**\n   * point next to edge point\n   */\n  declare T: Point;\n\n  constructor(A: XY, T: XY, options: TProjectStrokeOnPointsOptions) {\n    super(options);\n    this.A = new Point(A);\n    this.T = new Point(T);\n  }\n\n  calcOrthogonalProjection(\n    from: Point,\n    to: Point,\n    magnitude: number = this.strokeProjectionMagnitude,\n  ) {\n    const vector = this.createSideVector(from, to);\n    return this.scaleUnitVector(getOrthonormalVector(vector), magnitude);\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Butt\n   * Calculation: to find the projections, just find the points orthogonal to the stroke\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-1-butt\n   */\n  projectButt() {\n    return [\n      this.projectOrthogonally(this.A, this.T, this.strokeProjectionMagnitude),\n      this.projectOrthogonally(this.A, this.T, -this.strokeProjectionMagnitude),\n    ];\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Round\n   * Calculation: same as stroke line join `round`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-2-round\n   */\n  projectRound() {\n    const projections: Point[] = [];\n\n    if (!this.isSkewed() && this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(\n        this.applySkew(this.A.add(projection)),\n        this.applySkew(this.A.subtract(projection)),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(\n          this.A,\n          this.T,\n          this.T,\n          this.options,\n        ).projectRound(),\n      );\n    }\n\n    return projections;\n  }\n\n  /**\n   * OPEN PATH START/END - Line cap: Square\n   * Calculation: project a rectangle of points on the stroke in the opposite direction of the vector `AT`\n   *\n   * @see https://github.com/fabricjs/fabric.js/pull/8344#1-3-square\n   */\n  projectSquare() {\n    const projections: Point[] = [];\n\n    if (this.A.eq(this.T)) {\n      /* 1 point case without `skew`\n        When `strokeUniform` is true, scaling has no effect.\n        So we divide by scale, to remove its effect.\n      */\n      const projection = new Point(1, 1)\n        .scalarMultiply(this.strokeProjectionMagnitude)\n        .multiply(this.strokeUniformScalar);\n      projections.push(this.A.add(projection), this.A.subtract(projection));\n    } else {\n      const orthogonalProjection = this.calcOrthogonalProjection(\n        this.A,\n        this.T,\n        this.strokeProjectionMagnitude,\n      );\n      const strokePointingOut = this.scaleUnitVector(\n        getUnitVector(this.createSideVector(this.A, this.T)),\n        -this.strokeProjectionMagnitude,\n      );\n      const projectedA = this.A.add(strokePointingOut);\n      projections.push(\n        projectedA.add(orthogonalProjection),\n        projectedA.subtract(orthogonalProjection),\n      );\n    }\n\n    return projections.map((p) => this.applySkew(p));\n  }\n\n  protected projectPoints() {\n    switch (this.options.strokeLineCap) {\n      case 'round':\n        return this.projectRound();\n      case 'square':\n        return this.projectSquare();\n      default:\n        return this.projectButt();\n    }\n  }\n\n  public project(): TProjection[] {\n    return this.projectPoints().map((point) => ({\n      originPoint: this.A,\n      projectedPoint: point,\n    }));\n  }\n}\n", "import { Point, type XY } from '../../../Point';\nimport { findIndexRight } from '../../internals/findRight';\nimport { StrokeLineCapProjections } from './StrokeLineCapProjections';\nimport { StrokeLineJoinProjections } from './StrokeLineJoinProjections';\nimport type { TProjection, TProjectStrokeOnPointsOptions } from './types';\n\nexport * from './types';\n\n/**\n *\n * Used to calculate object's bounding box\n *\n * @see https://github.com/fabricjs/fabric.js/pull/8344\n *\n */\nexport const projectStrokeOnPoints = (\n  points: XY[],\n  options: TProjectStrokeOnPointsOptions,\n  openPath = false,\n): TProjection[] => {\n  const projections: TProjection[] = [];\n\n  if (points.length === 0) {\n    return projections;\n  }\n\n  // first we remove duplicate neighboring points\n  const reduced = points.reduce(\n    (reduced, point) => {\n      if (!reduced[reduced.length - 1].eq(point)) {\n        reduced.push(new Point(point));\n      }\n      return reduced;\n    },\n    [new Point(points[0])],\n  );\n\n  if (reduced.length === 1) {\n    openPath = true;\n  } else if (!openPath) {\n    // remove points from end in case they equal the first point\n    // in order to correctly project the first point\n    const start = reduced[0];\n    const index = findIndexRight(reduced, (point) => !point.eq(start));\n    reduced.splice(index + 1);\n  }\n\n  reduced.forEach((A, index, points) => {\n    let B: XY, C: XY;\n    if (index === 0) {\n      C = points[1];\n      B = openPath ? A : points[points.length - 1];\n    } else if (index === points.length - 1) {\n      B = points[index - 1];\n      C = openPath ? A : points[0];\n    } else {\n      B = points[index - 1];\n      C = points[index + 1];\n    }\n\n    if (openPath && points.length === 1) {\n      projections.push(\n        ...new StrokeLineCapProjections(A, A, options).project(),\n      );\n    } else if (openPath && (index === 0 || index === points.length - 1)) {\n      projections.push(\n        ...new StrokeLineCapProjections(\n          A,\n          index === 0 ? C : B,\n          options,\n        ).project(),\n      );\n    } else {\n      projections.push(\n        ...new StrokeLineJoinProjections(A, B, C, options).project(),\n      );\n    }\n  });\n\n  return projections;\n};\n", "export const findIndexRight = <T>(\n  array: T[],\n  predicate: (value: T, index: number, array: T[]) => boolean,\n) => {\n  for (let index = array.length - 1; index >= 0; index--) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n};\n", "import type { TextStyle } from '../../shapes/Text/StyledText';\n\nexport const cloneStyles = (style: TextStyle): TextStyle => {\n  const newObj: TextStyle = {};\n  Object.keys(style).forEach((key) => {\n    newObj[key] = {};\n    Object.keys(style[key]).forEach((keyInner) => {\n      newObj[key][keyInner] = { ...style[key][keyInner] };\n    });\n  });\n  return newObj;\n};\n", "/**\n * Capitalizes a string\n * @param {String} string String to capitalize\n * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n * and other letters stay untouched, if false first letter is capitalized\n * and other letters are converted to lowercase.\n * @return {String} Capitalized version of a string\n */\nexport const capitalize = (string: string, firstLetterOnly = false): string =>\n  `${string.charAt(0).toUpperCase()}${\n    firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase()\n  }`;\n\n/**\n * Escapes XML in a string\n * @param {String} string String to escape\n * @return {String} Escaped version of a string\n */\nexport const escapeXml = (string: string): string =>\n  string\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&apos;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n\n/**\n * Divide a string in the user perceived single units\n * @param {String} textstring String to escape\n * @return {Array} array containing the graphemes\n */\nexport const graphemeSplit = (textstring: string): string[] => {\n  const graphemes = [];\n  for (let i = 0, chr; i < textstring.length; i++) {\n    if ((chr = getWholeChar(textstring, i)) === false) {\n      continue;\n    }\n    graphemes.push(chr as string);\n  }\n  return graphemes;\n};\n\n// taken from mdn in the charAt doc page.\nconst getWholeChar = (str: string, i: number): string | boolean => {\n  const code = str.charCodeAt(i);\n  if (isNaN(code)) {\n    return ''; // Position not found\n  }\n  if (code < 0xd800 || code > 0xdfff) {\n    return str.charAt(i);\n  }\n\n  // High surrogate (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 <= code && code <= 0xdbff) {\n    if (str.length <= i + 1) {\n      throw 'High surrogate without following low surrogate';\n    }\n    const next = str.charCodeAt(i + 1);\n    if (0xdc00 > next || next > 0xdfff) {\n      throw 'High surrogate without following low surrogate';\n    }\n    return str.charAt(i) + str.charAt(i + 1);\n  }\n  // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n  if (i === 0) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  const prev = str.charCodeAt(i - 1);\n\n  // (could change last hex to 0xDB7F to treat high private\n  // surrogates as single characters)\n  if (0xd800 > prev || prev > 0xdbff) {\n    throw 'Low surrogate without preceding high surrogate';\n  }\n  // We can pass over low surrogates now as the second component\n  // in a pair which we have already processed\n  return false;\n};\n", "import { reNewline } from '../../constants';\nimport type {\n  TextStyle,\n  TextStyleDeclaration,\n} from '../../shapes/Text/StyledText';\nimport { cloneStyles } from '../internals/cloneStyles';\nimport { graphemeSplit } from '../lang_string';\n\nexport type TextStyleArray = {\n  start: number;\n  end: number;\n  style: TextStyleDeclaration;\n}[];\n\n/**\n * @param {Object} prevStyle first style to compare\n * @param {Object} thisStyle second style to compare\n * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n * @return {boolean} true if the style changed\n */\nexport const hasStyleChanged = (\n  prevStyle: TextStyleDeclaration,\n  thisStyle: TextStyleDeclaration,\n  forTextSpans = false,\n) =>\n  prevStyle.fill !== thisStyle.fill ||\n  prevStyle.stroke !== thisStyle.stroke ||\n  prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n  prevStyle.fontSize !== thisStyle.fontSize ||\n  prevStyle.fontFamily !== thisStyle.fontFamily ||\n  prevStyle.fontWeight !== thisStyle.fontWeight ||\n  prevStyle.fontStyle !== thisStyle.fontStyle ||\n  prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||\n  prevStyle.deltaY !== thisStyle.deltaY ||\n  (forTextSpans &&\n    (prevStyle.overline !== thisStyle.overline ||\n      prevStyle.underline !== thisStyle.underline ||\n      prevStyle.linethrough !== thisStyle.linethrough));\n\n/**\n * Returns the array form of a text object's inline styles property with styles grouped in ranges\n * rather than per character. This format is less verbose, and is better suited for storage\n * so it is used in serialization (not during runtime).\n * @param {object} styles per character styles for a text object\n * @param {String} text the text string that the styles are applied to\n * @return {{start: number, end: number, style: object}[]}\n */\nexport const stylesToArray = (\n  styles: TextStyle,\n  text: string,\n): TextStyleArray => {\n  const textLines = text.split('\\n'),\n    stylesArray = [];\n  let charIndex = -1,\n    prevStyle = {};\n  // clone style structure to prevent mutation\n  styles = cloneStyles(styles);\n\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n    if (!styles[i]) {\n      //no styles exist for this line, so add the line's length to the charIndex total and reset prevStyle\n      charIndex += chars.length;\n      prevStyle = {};\n      continue;\n    }\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      const thisStyle = styles[i][c];\n      //check if style exists for this character\n      if (thisStyle && Object.keys(thisStyle).length > 0) {\n        if (hasStyleChanged(prevStyle, thisStyle, true)) {\n          stylesArray.push({\n            start: charIndex,\n            end: charIndex + 1,\n            style: thisStyle,\n          });\n        } else {\n          //if style is the same as previous character, increase end index\n          stylesArray[stylesArray.length - 1].end++;\n        }\n      }\n      prevStyle = thisStyle || {};\n    }\n  }\n  return stylesArray;\n};\n\n/**\n * Returns the object form of the styles property with styles that are assigned per\n * character rather than grouped by range. This format is more verbose, and is\n * only used during runtime (not for serialization/storage)\n * @param {Array} styles the serialized form of a text object's styles\n * @param {String} text the text string that the styles are applied to\n * @return {Object}\n */\nexport const stylesFromArray = (\n  styles: TextStyleArray | TextStyle,\n  text: string,\n): TextStyle => {\n  if (!Array.isArray(styles)) {\n    // clone to prevent mutation\n    return cloneStyles(styles);\n  }\n  const textLines = text.split(reNewline),\n    stylesObject: TextStyle = {};\n  let charIndex = -1,\n    styleIndex = 0;\n  //loop through each textLine\n  for (let i = 0; i < textLines.length; i++) {\n    const chars = graphemeSplit(textLines[i]);\n\n    //loop through each character of the current line\n    for (let c = 0; c < chars.length; c++) {\n      charIndex++;\n      //check if there's a style collection that includes the current character\n      if (\n        styles[styleIndex] &&\n        styles[styleIndex].start <= charIndex &&\n        charIndex < styles[styleIndex].end\n      ) {\n        //create object for line index if it doesn't exist\n        stylesObject[i] = stylesObject[i] || {};\n        //assign a style at this character's index\n        stylesObject[i][c] = { ...styles[styleIndex].style };\n        //if character is at the end of the current style collection, move to the next\n        if (charIndex === styles[styleIndex].end - 1) {\n          styleIndex++;\n        }\n      }\n    }\n  }\n  return stylesObject;\n};\n", "import { FILL, STROKE } from '../constants';\n\n/**\n * Attributes parsed from all SVG elements\n * @type array\n */\nexport const SHARED_ATTRIBUTES = [\n  'display',\n  'transform',\n  FILL,\n  'fill-opacity',\n  'fill-rule',\n  'opacity',\n  STROKE,\n  'stroke-dasharray',\n  'stroke-linecap',\n  'stroke-dashoffset',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'id',\n  'paint-order',\n  'vector-effect',\n  'instantiated_by_use',\n  'clip-path',\n];\n", "export function selectorMatches(element: HTMLElement, selector: string) {\n  const nodeName = element.nodeName;\n  const classNames = element.getAttribute('class');\n  const id = element.getAttribute('id');\n  const azAz = '(?![a-zA-Z\\\\-]+)';\n  let matcher;\n  // i check if a selector matches slicing away part from it.\n  // if i get empty string i should match\n  matcher = new RegExp('^' + nodeName, 'i');\n  selector = selector.replace(matcher, '');\n  if (id && selector.length) {\n    matcher = new RegExp('#' + id + azAz, 'i');\n    selector = selector.replace(matcher, '');\n  }\n  if (classNames && selector.length) {\n    const splitClassNames = classNames.split(' ');\n    for (let i = splitClassNames.length; i--; ) {\n      matcher = new RegExp('\\\\.' + splitClassNames[i] + azAz, 'i');\n      selector = selector.replace(matcher, '');\n    }\n  }\n  return selector.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\nimport { doesSomeParentMatch } from './doesSomeParentMatch';\n\n/**\n * @private\n */\n\nexport function elementMatchesRule(element: HTMLElement, selectors: string[]) {\n  let parentMatching = true;\n  // start from rightmost selector.\n  const firstMatching = selectorMatches(element, selectors.pop()!);\n  if (firstMatching && selectors.length) {\n    parentMatching = doesSomeParentMatch(element, selectors);\n  }\n  return firstMatching && parentMatching && selectors.length === 0;\n}\n", "import { selectorMatches } from './selectorMatches';\n\nexport function doesSomeParentMatch(element: HTMLElement, selectors: string[]) {\n  let selector: string,\n    parentMatching = true;\n  while (\n    element.parentElement &&\n    element.parentElement.nodeType === 1 &&\n    selectors.length\n  ) {\n    if (parentMatching) {\n      selector = selectors.pop()!;\n    }\n    element = element.parentElement;\n    parentMatching = selectorMatches(element, selector!);\n  }\n  return selectors.length === 0;\n}\n", "import { attributesMap } from './constants';\n\nexport const normalizeAttr = (\n  attr: keyof typeof attributesMap | string,\n): string => attributesMap[attr as keyof typeof attributesMap] ?? attr;\n", "import { reNum } from '../../parser/constants';\n\nconst regex = new RegExp(`(${reNum})`, 'gi');\n\nexport const cleanupSvgAttribute = (attributeValue: string) =>\n  attributeValue\n    .replace(regex, ' $1 ')\n    // replace annoying commas and arbitrary whitespace with single spaces\n    .replace(/,/gi, ' ')\n    .replace(/\\s+/gi, ' ');\n", "import { ROTATE, SCALE, SKEW_X, SKEW_Y, iMatrix } from '../constants';\nimport { reNum } from './constants';\nimport type { TMat2D } from '../typedefs';\nimport { cleanupSvgAttribute } from '../util/internals/cleanupSvgAttribute';\nimport {\n  createRotateMatrix,\n  createScaleMatrix,\n  createSkewXMatrix,\n  createSkewYMatrix,\n  createTranslateMatrix,\n  multiplyTransformMatrixArray,\n} from '../util/misc/matrix';\n\n// == begin transform regexp\nconst p = `(${reNum})`;\nconst skewX = String.raw`(skewX)\\(${p}\\)`;\nconst skewY = String.raw`(skewY)\\(${p}\\)`;\nconst rotate = String.raw`(rotate)\\(${p}(?: ${p} ${p})?\\)`;\nconst scale = String.raw`(scale)\\(${p}(?: ${p})?\\)`;\nconst translate = String.raw`(translate)\\(${p}(?: ${p})?\\)`;\nconst matrix = String.raw`(matrix)\\(${p} ${p} ${p} ${p} ${p} ${p}\\)`;\nconst transform = `(?:${matrix}|${translate}|${rotate}|${scale}|${skewX}|${skewY})`;\nconst transforms = `(?:${transform}*)`;\nconst transformList = String.raw`^\\s*(?:${transforms}?)\\s*$`;\n// http://www.w3.org/TR/SVG/coords.html#TransformAttribute\nconst reTransformList = new RegExp(transformList);\nconst reTransform = new RegExp(transform);\nconst reTransformAll = new RegExp(transform, 'g');\n// == end transform regexp\n\n/**\n * Parses \"transform\" attribute, returning an array of values\n * @static\n * @function\n * @memberOf fabric\n * @param {String} attributeValue String containing attribute value\n * @return {TTransformMatrix} Array of 6 elements representing transformation matrix\n */\nexport function parseTransformAttribute(attributeValue: string): TMat2D {\n  // first we clean the string\n  attributeValue = cleanupSvgAttribute(attributeValue)\n    // remove spaces around front parentheses\n    .replace(/\\s*([()])\\s*/gi, '$1');\n\n  // start with identity matrix\n  const matrices: TMat2D[] = [];\n\n  // return if no argument was given or\n  // an argument does not match transform attribute regexp\n  if (\n    !attributeValue ||\n    (attributeValue && !reTransformList.test(attributeValue))\n  ) {\n    return [...iMatrix];\n  }\n\n  for (const match of attributeValue.matchAll(reTransformAll)) {\n    const transformMatch = reTransform.exec(match[0]);\n    if (!transformMatch) {\n      continue;\n    }\n    let matrix: TMat2D = iMatrix;\n    const matchedParams = transformMatch.filter((m) => !!m);\n    const [, operation, ...rawArgs] = matchedParams;\n    const [arg0, arg1, arg2, arg3, arg4, arg5] = rawArgs.map((arg) =>\n      parseFloat(arg),\n    );\n\n    switch (operation) {\n      case 'translate':\n        matrix = createTranslateMatrix(arg0, arg1);\n        break;\n      case ROTATE:\n        matrix = createRotateMatrix({ angle: arg0 }, { x: arg1, y: arg2 });\n        break;\n      case SCALE:\n        matrix = createScaleMatrix(arg0, arg1);\n        break;\n      case SKEW_X:\n        matrix = createSkewXMatrix(arg0);\n        break;\n      case SKEW_Y:\n        matrix = createSkewYMatrix(arg0);\n        break;\n      case 'matrix':\n        matrix = [arg0, arg1, arg2, arg3, arg4, arg5];\n        break;\n    }\n\n    // snapshot current matrix into matrices array\n    matrices.push(matrix);\n  }\n\n  return multiplyTransformMatrixArray(matrices);\n}\n", "import { multiplyTransformMatrices } from '../util/misc/matrix';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { parseTransformAttribute } from './parseTransformAttribute';\nimport { CENTER, LEFT, RIGHT, NONE, FILL, STROKE } from '../constants';\n\nexport function normalizeValue(\n  attr: string,\n  value: any,\n  parentAttributes: Record<string, any>,\n  fontSize: number,\n): string | null | boolean | number[] | number {\n  const isArray = Array.isArray(value);\n  let parsed: number | number[];\n  let ouputValue: string | null | boolean | number[] | number = value;\n  if ((attr === FILL || attr === STROKE) && value === NONE) {\n    ouputValue = '';\n  } else if (attr === 'strokeUniform') {\n    return value === 'non-scaling-stroke';\n  } else if (attr === 'strokeDashArray') {\n    if (value === NONE) {\n      ouputValue = null;\n    } else {\n      ouputValue = value.replace(/,/g, ' ').split(/\\s+/).map(parseFloat);\n    }\n  } else if (attr === 'transformMatrix') {\n    if (parentAttributes && parentAttributes.transformMatrix) {\n      ouputValue = multiplyTransformMatrices(\n        parentAttributes.transformMatrix,\n        parseTransformAttribute(value),\n      );\n    } else {\n      ouputValue = parseTransformAttribute(value);\n    }\n  } else if (attr === 'visible') {\n    ouputValue = value !== NONE && value !== 'hidden';\n    // display=none on parent element always takes precedence over child element\n    if (parentAttributes && parentAttributes.visible === false) {\n      ouputValue = false;\n    }\n  } else if (attr === 'opacity') {\n    ouputValue = parseFloat(value);\n    if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {\n      ouputValue *= parentAttributes.opacity as number;\n    }\n  } else if (attr === 'textAnchor' /* text-anchor */) {\n    ouputValue = value === 'start' ? LEFT : value === 'end' ? RIGHT : CENTER;\n  } else if (attr === 'charSpacing') {\n    // parseUnit returns px and we convert it to em\n    parsed = (parseUnit(value, fontSize) / fontSize) * 1000;\n  } else if (attr === 'paintFirst') {\n    const fillIndex = value.indexOf(FILL);\n    const strokeIndex = value.indexOf(STROKE);\n    ouputValue = FILL;\n    if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {\n      ouputValue = STROKE;\n    } else if (fillIndex === -1 && strokeIndex > -1) {\n      ouputValue = STROKE;\n    }\n  } else if (\n    attr === 'href' ||\n    attr === 'xlink:href' ||\n    attr === 'font' ||\n    attr === 'id'\n  ) {\n    return value;\n  } else if (attr === 'imageSmoothing') {\n    return value === 'optimizeQuality';\n  } else {\n    parsed = isArray\n      ? (value as string[]).map(parseUnit)\n      : parseUnit(value, fontSize);\n  }\n\n  return !isArray && isNaN(parsed! as number) ? ouputValue : parsed!;\n}\n", "import { parseUnit } from '../util/misc/svgParsing';\nimport { reFontDeclaration } from './constants';\n\n/**\n * Parses a short font declaration, building adding its properties to a style object\n * @static\n * @function\n * @memberOf fabric\n * @param {String} value font declaration\n * @param {Object} oStyle definition\n */\nexport function parseFontDeclaration(\n  value: string,\n  oStyle: Record<string, any>,\n): void {\n  const match = value.match(reFontDeclaration);\n\n  if (!match) {\n    return;\n  }\n  const fontStyle = match[1],\n    // font variant is not used\n    // fontVariant = match[2],\n    fontWeight = match[3],\n    fontSize = match[4],\n    lineHeight = match[5],\n    fontFamily = match[6];\n\n  if (fontStyle) {\n    oStyle.fontStyle = fontStyle;\n  }\n  if (fontWeight) {\n    oStyle.fontWeight = isNaN(parseFloat(fontWeight))\n      ? fontWeight\n      : parseFloat(fontWeight);\n  }\n  if (fontSize) {\n    oStyle.fontSize = parseUnit(fontSize);\n  }\n  if (fontFamily) {\n    oStyle.fontFamily = fontFamily;\n  }\n  if (lineHeight) {\n    oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;\n  }\n}\n", "/**\n * Takes a style string and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleString(\n  style: string,\n  oStyle: Record<string, any>,\n): void {\n  style\n    .replace(/;\\s*$/, '')\n    .split(';')\n    .forEach((chunk) => {\n      if (!chunk) return;\n      const [attr, value] = chunk.split(':');\n      oStyle[attr.trim().toLowerCase()] = value.trim();\n    });\n}\n", "import { parseStyleObject } from './parseStyleObject';\nimport { parseStyleString } from './parseStyleString';\n\n/**\n * Parses \"style\" attribute, retuning an object with values\n * @static\n * @memberOf fabric\n * @param {SVGElement} element Element to parse\n * @return {Object} Objects with values parsed from style attribute of an element\n */\nexport function parseStyleAttribute(element: HTMLElement): Record<string, any> {\n  const oStyle: Record<string, any> = {},\n    style = element.getAttribute('style');\n\n  if (!style) {\n    return oStyle;\n  }\n\n  if (typeof style === 'string') {\n    parseStyleString(style, oStyle);\n  } else {\n    parseStyleObject(style, oStyle);\n  }\n\n  return oStyle;\n}\n", "/**\n * Takes a style object and parses it in one that has only defined values\n * and lowercases properties\n * @param style\n * @param oStyle\n */\nexport function parseStyleObject(\n  style: Record<string, any>,\n  oStyle: Record<string, any>,\n): void {\n  Object.entries(style).forEach(([prop, value]) => {\n    if (value === undefined) {\n      return;\n    }\n    oStyle[prop.toLowerCase()] = value;\n  });\n}\n", "import { Color } from '../color/Color';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject } from '../shapes/Object/FabricObject';\n\nconst colorAttributesMap = {\n  stroke: 'strokeOpacity',\n  fill: 'fillOpacity',\n};\n\n/**\n * @private\n * @param {Object} attributes Array of attributes to parse\n */\n\nexport function setStrokeFillOpacity(\n  attributes: Record<string, any>,\n): Record<string, any> {\n  const defaults = FabricObject.getDefaults();\n  Object.entries(colorAttributesMap).forEach(([attr, colorAttr]) => {\n    if (\n      typeof attributes[colorAttr] === 'undefined' ||\n      attributes[attr] === ''\n    ) {\n      return;\n    }\n    if (typeof attributes[attr] === 'undefined') {\n      if (!defaults[attr]) {\n        return;\n      }\n      attributes[attr] = defaults[attr];\n    }\n    if (attributes[attr].indexOf('url(') === 0) {\n      return;\n    }\n    const color = new Color(attributes[attr]);\n    attributes[attr] = color\n      .setAlpha(toFixed(color.getAlpha() * attributes[colorAttr], 2))\n      .toRgba();\n  });\n  return attributes;\n}\n", "import { DEFAULT_SVG_FONT_SIZE } from '../constants';\nimport { parseUnit } from '../util/misc/svgParsing';\nimport { cPath, fSize, svgValidParentsRegEx } from './constants';\nimport { getGlobalStylesForElement } from './getGlobalStylesForElement';\nimport { normalizeAttr } from './normalizeAttr';\nimport { normalizeValue } from './normalizeValue';\nimport { parseFontDeclaration } from './parseFontDeclaration';\nimport { parseStyleAttribute } from './parseStyleAttribute';\nimport { setStrokeFillOpacity } from './setStrokeFillOpacity';\nimport type { CSSRules } from './typedefs';\n\n/**\n * Returns an object of attributes' name/value, given element and an array of attribute names;\n * Parses parent \"g\" nodes recursively upwards.\n * @param {SVGElement | HTMLElement} element Element to parse\n * @param {Array} attributes Array of attributes to parse\n * @return {Object} object containing parsed attributes' names/values\n */\nexport function parseAttributes(\n  element: HTMLElement | null,\n  attributes: string[],\n  cssRules?: CSSRules,\n): Record<string, any> {\n  if (!element) {\n    return {};\n  }\n\n  let parentAttributes: Record<string, string> = {},\n    fontSize: number,\n    parentFontSize = DEFAULT_SVG_FONT_SIZE;\n\n  // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards\n  if (\n    element.parentNode &&\n    svgValidParentsRegEx.test(element.parentNode.nodeName)\n  ) {\n    parentAttributes = parseAttributes(\n      element.parentElement,\n      attributes,\n      cssRules,\n    );\n    if (parentAttributes.fontSize) {\n      fontSize = parentFontSize = parseUnit(parentAttributes.fontSize);\n    }\n  }\n\n  const ownAttributes: Record<string, string> = {\n    ...attributes.reduce<Record<string, string>>((memo, attr) => {\n      const value = element.getAttribute(attr);\n      if (value) {\n        memo[attr] = value;\n      }\n      return memo;\n    }, {}),\n    // add values parsed from style, which take precedence over attributes\n    // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)\n    ...getGlobalStylesForElement(element, cssRules),\n    ...parseStyleAttribute(element),\n  };\n\n  if (ownAttributes[cPath]) {\n    element.setAttribute(cPath, ownAttributes[cPath]);\n  }\n  if (ownAttributes[fSize]) {\n    // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.\n    fontSize = parseUnit(ownAttributes[fSize], parentFontSize);\n    ownAttributes[fSize] = `${fontSize}`;\n  }\n\n  // this should have its own complex type\n  const normalizedStyle: Record<\n    string,\n    string | boolean | number | number[] | null\n  > = {};\n  for (const attr in ownAttributes) {\n    const normalizedAttr = normalizeAttr(attr);\n    const normalizedValue = normalizeValue(\n      normalizedAttr,\n      ownAttributes[attr],\n      parentAttributes,\n      fontSize!,\n    );\n    normalizedStyle[normalizedAttr] = normalizedValue;\n  }\n  if (normalizedStyle && normalizedStyle.font) {\n    parseFontDeclaration(normalizedStyle.font as string, normalizedStyle);\n  }\n  const mergedAttrs = { ...parentAttributes, ...normalizedStyle };\n  return svgValidParentsRegEx.test(element.nodeName)\n    ? mergedAttrs\n    : setStrokeFillOpacity(mergedAttrs);\n}\n", "import { elementMatchesRule } from './elementMatchesRule';\nimport type { CSSRules } from './typedefs';\n\n/**\n * @private\n */\n\nexport function getGlobalStylesForElement(\n  element: HTMLElement,\n  cssRules: CSSRules = {},\n) {\n  let styles: Record<string, string> = {};\n  for (const rule in cssRules) {\n    if (elementMatchesRule(element, rule.split(' '))) {\n      styles = {\n        ...styles,\n        ...cssRules[rule],\n      };\n    }\n  }\n  return styles;\n}\n", "import { kRect } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const rectDefaultValues: Partial<TClassProperties<Rect>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueRectProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedRectProps\n  extends SerializedObjectProps,\n    UniqueRectProps {}\n\nexport interface RectProps extends FabricObjectProps, UniqueRectProps {}\n\nconst RECT_PROPS = ['rx', 'ry'] as const;\n\nexport class Rect<\n    Props extends TOptions<RectProps> = Partial<RectProps>,\n    SProps extends SerializedRectProps = SerializedRectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements RectProps\n{\n  /**\n   * Horizontal border radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical border radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Rect';\n\n  static cacheProperties = [...cacheProperties, ...RECT_PROPS];\n\n  static ownDefaults = rectDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Rect.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Rect.ownDefaults);\n    this.setOptions(options);\n    this._initRxRy();\n  }\n  /**\n   * Initializes rx/ry attributes\n   * @private\n   */\n  _initRxRy() {\n    const { rx, ry } = this;\n    if (rx && !ry) {\n      this.ry = rx;\n    } else if (ry && !rx) {\n      this.rx = ry;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const { width: w, height: h } = this;\n    const x = -w / 2;\n    const y = -h / 2;\n    const rx = this.rx ? Math.min(this.rx, w / 2) : 0;\n    const ry = this.ry ? Math.min(this.ry, h / 2) : 0;\n    const isRounded = rx !== 0 || ry !== 0;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x + rx, y);\n\n    ctx.lineTo(x + w - rx, y);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w - kRect * rx,\n        y,\n        x + w,\n        y + kRect * ry,\n        x + w,\n        y + ry,\n      );\n\n    ctx.lineTo(x + w, y + h - ry);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + w,\n        y + h - kRect * ry,\n        x + w - kRect * rx,\n        y + h,\n        x + w - rx,\n        y + h,\n      );\n\n    ctx.lineTo(x + rx, y + h);\n    isRounded &&\n      ctx.bezierCurveTo(\n        x + kRect * rx,\n        y + h,\n        x,\n        y + h - kRect * ry,\n        x,\n        y + h - ry,\n      );\n\n    ctx.lineTo(x, y + ry);\n    isRounded &&\n      ctx.bezierCurveTo(x, y + kRect * ry, x + kRect * rx, y, x + rx, y);\n\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...RECT_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { width, height, rx, ry } = this;\n    return [\n      '<rect ',\n      'COMMON_PARTS',\n      `x=\"${-width / 2}\" y=\"${\n        -height / 2\n      }\" rx=\"${rx}\" ry=\"${ry}\" width=\"${width}\" height=\"${height}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Rect.fromElement`)\n   * @static\n   * @memberOf Rect\n   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'rx',\n    'ry',\n    'width',\n    'height',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns {@link Rect} instance from an SVG element\n   * @static\n   * @memberOf Rect\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      left = 0,\n      top = 0,\n      width = 0,\n      height = 0,\n      visible = true,\n      ...restOfparsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n\n    return new this({\n      ...options,\n      ...restOfparsedAttributes,\n      left,\n      top,\n      width,\n      height,\n      visible: Boolean(visible && width && height),\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Rect);\nclassRegistry.setSVGClass(Rect);\n", "export const LAYOUT_TYPE_INITIALIZATION = 'initialization';\nexport const LAYOUT_TYPE_ADDED = 'added';\nexport const LAYOUT_TYPE_REMOVED = 'removed';\nexport const LAYOUT_TYPE_IMPERATIVE = 'imperative';\nexport const LAYOUT_TYPE_OBJECT_MODIFIED = 'object_modified';\nexport const LAYOUT_TYPE_OBJECT_MODIFYING = 'object_modifying';\n", "import { Point, ZERO } from '../../Point';\nimport type { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { multiplyTransformMatrixArray } from '../../util/misc/matrix';\nimport { sizeAfterTransform } from '../../util/misc/objectTransforms';\nimport {\n  calcPlaneChangeMatrix,\n  sendVectorToPlane,\n} from '../../util/misc/planeChange';\n\n/**\n * @returns 2 points, the tl and br corners of the non rotated bounding box of an object\n * in the {@link group} plane, taking into account objects that {@link group} is their parent\n * but also belong to the active selection.\n */\nexport const getObjectBounds = (\n  destinationGroup: Group,\n  object: FabricObject,\n): Point[] => {\n  const {\n    strokeUniform,\n    strokeWidth,\n    width,\n    height,\n    group: currentGroup,\n  } = object;\n  const t =\n    currentGroup && currentGroup !== destinationGroup\n      ? calcPlaneChangeMatrix(\n          currentGroup.calcTransformMatrix(),\n          destinationGroup.calcTransformMatrix(),\n        )\n      : null;\n  const objectCenter = t\n    ? object.getRelativeCenterPoint().transform(t)\n    : object.getRelativeCenterPoint();\n  const accountForStroke = !object['isStrokeAccountedForInDimensions']();\n  const strokeUniformVector =\n    strokeUniform && accountForStroke\n      ? sendVectorToPlane(\n          new Point(strokeWidth, strokeWidth),\n          undefined,\n          destinationGroup.calcTransformMatrix(),\n        )\n      : ZERO;\n  const scalingStrokeWidth =\n    !strokeUniform && accountForStroke ? strokeWidth : 0;\n  const sizeVector = sizeAfterTransform(\n    width + scalingStrokeWidth,\n    height + scalingStrokeWidth,\n    multiplyTransformMatrixArray([t, object.calcOwnMatrix()], true),\n  )\n    .add(strokeUniformVector)\n    .scalarDivide(2);\n  return [objectCenter.subtract(sizeVector), objectCenter.add(sizeVector)];\n};\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_IMPERATIVE,\n} from '../constants';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { getObjectBounds } from './utils';\n\n/**\n * Exposes a main public method {@link calcLayoutResult} that is used by the `LayoutManager` to perform layout.\n * Returning `undefined` signals the `LayoutManager` to skip the layout.\n *\n * In charge of calculating the bounding box of the passed objects.\n */\nexport abstract class LayoutStrategy {\n  /**\n   * override by subclass for persistence (TS does not support `static abstract`)\n   */\n  static type = 'strategy';\n\n  /**\n   * Used by the `LayoutManager` to perform layout\n   * @TODO/fix: if this method is calcResult, should calc unconditionally.\n   * the condition to not calc should be evaluated by the layoutManager.\n   * @returns layout result **OR** `undefined` to skip layout\n   */\n  public calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    if (this.shouldPerformLayout(context)) {\n      return this.calcBoundingBox(objects, context);\n    }\n  }\n\n  shouldPerformLayout({ type, prevStrategy, strategy }: StrictLayoutContext) {\n    return (\n      type === LAYOUT_TYPE_INITIALIZATION ||\n      type === LAYOUT_TYPE_IMPERATIVE ||\n      (!!prevStrategy && strategy !== prevStrategy)\n    );\n  }\n\n  shouldLayoutClipPath({ type, target: { clipPath } }: StrictLayoutContext) {\n    return (\n      type !== LAYOUT_TYPE_INITIALIZATION &&\n      clipPath &&\n      !clipPath.absolutePositioned\n    );\n  }\n\n  getInitialSize(\n    context: StrictLayoutContext & InitializationLayoutContext,\n    result: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ) {\n    return result.size;\n  }\n\n  /**\n   * Override this method to customize layout.\n   */\n  calcBoundingBox(\n    objects: FabricObject[],\n    context: StrictLayoutContext,\n  ): LayoutStrategyResult | undefined {\n    const { type, target } = context;\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.overrides) {\n      return context.overrides;\n    }\n    if (objects.length === 0) {\n      return;\n    }\n    const { left, top, width, height } = makeBoundingBoxFromPoints(\n      objects\n        .map((object) => getObjectBounds(target, object))\n        .reduce<Point[]>((coords, curr) => coords.concat(curr), []),\n    );\n    const bboxSize = new Point(width, height);\n    const bboxLeftTop = new Point(left, top);\n    const bboxCenter = bboxLeftTop.add(bboxSize.scalarDivide(2));\n\n    if (type === LAYOUT_TYPE_INITIALIZATION) {\n      const actualSize = this.getInitialSize(context, {\n        size: bboxSize,\n        center: bboxCenter,\n      });\n      return {\n        // in `initialization` we do not account for target's transformation matrix\n        center: bboxCenter,\n        // TODO: investigate if this is still necessary\n        relativeCorrection: new Point(0, 0),\n        size: actualSize,\n      };\n    } else {\n      //  we send `relativeCenter` up to group's containing plane\n      const center = bboxCenter.transform(target.calcOwnMatrix());\n      return {\n        center,\n        size: bboxSize,\n      };\n    }\n  }\n}\n", "import type { StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to fit target's objects.\n */\nexport class FitContentLayout extends LayoutStrategy {\n  static readonly type = 'fit-content';\n\n  /**\n   * @override layout on all triggers\n   * Override at will\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldPerformLayout(context: StrictLayoutContext) {\n    return true;\n  }\n}\n\nclassRegistry.setClass(FitContentLayout);\n", "import { Point } from '../Point';\nimport {\n  CENTER,\n  CHANGED,\n  MODIFIED,\n  MODIFY_PATH,\n  MODIFY_POLY,\n  MOVING,\n  RESIZING,\n  ROTATING,\n  SCALING,\n  SKEWING,\n  iMatrix,\n} from '../constants';\nimport type { Group } from '../shapes/Group';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { invertTransform } from '../util/misc/matrix';\nimport { resolveOrigin } from '../util/misc/resolveOrigin';\nimport { FitContentLayout } from './LayoutStrategies/FitContentLayout';\nimport type { LayoutStrategy } from './LayoutStrategies/LayoutStrategy';\nimport {\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_OBJECT_MODIFIED,\n  LAYOUT_TYPE_OBJECT_MODIFYING,\n} from './constants';\nimport type {\n  LayoutContext,\n  LayoutResult,\n  RegistrationContext,\n  StrictLayoutContext,\n} from './types';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TModificationEvents } from '../EventTypeDefs';\n\nconst LAYOUT_MANAGER = 'layoutManager';\n\nexport type SerializedLayoutManager = {\n  type: string;\n  strategy: string;\n};\n\nexport class LayoutManager {\n  private declare _prevLayoutStrategy?: LayoutStrategy;\n  protected declare _subscriptions: Map<FabricObject, VoidFunction[]>;\n\n  strategy: LayoutStrategy;\n\n  constructor(strategy: LayoutStrategy = new FitContentLayout()) {\n    this.strategy = strategy;\n    this._subscriptions = new Map();\n  }\n\n  public performLayout(context: LayoutContext) {\n    const strictContext: StrictLayoutContext = {\n      bubbles: true,\n      strategy: this.strategy,\n      ...context,\n      prevStrategy: this._prevLayoutStrategy,\n      stopPropagation() {\n        this.bubbles = false;\n      },\n    };\n\n    this.onBeforeLayout(strictContext);\n\n    const layoutResult = this.getLayoutResult(strictContext);\n    if (layoutResult) {\n      this.commitLayout(strictContext, layoutResult);\n    }\n\n    this.onAfterLayout(strictContext, layoutResult);\n    this._prevLayoutStrategy = strictContext.strategy;\n  }\n\n  /**\n   * Attach handlers for events that we know will invalidate the layout when\n   * performed on child objects ( general transforms ).\n   * Returns the disposers for later unsubscribing and cleanup\n   * @param {FabricObject} object\n   * @param {RegistrationContext & Partial<StrictLayoutContext>} context\n   * @returns {VoidFunction[]} disposers remove the handlers\n   */\n  protected attachHandlers(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): VoidFunction[] {\n    const { target } = context;\n    return (\n      [\n        MODIFIED,\n        MOVING,\n        RESIZING,\n        ROTATING,\n        SCALING,\n        SKEWING,\n        CHANGED,\n        MODIFY_POLY,\n        MODIFY_PATH,\n      ] as (TModificationEvents & 'modified')[]\n    ).map((key) =>\n      object.on(key, (e) =>\n        this.performLayout(\n          key === MODIFIED\n            ? {\n                type: LAYOUT_TYPE_OBJECT_MODIFIED,\n                trigger: key,\n                e,\n                target,\n              }\n            : {\n                type: LAYOUT_TYPE_OBJECT_MODIFYING,\n                trigger: key,\n                e,\n                target,\n              },\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Subscribe an object to transform events that will trigger a layout change on the parent\n   * This is important only for interactive groups.\n   * @param object\n   * @param context\n   */\n  protected subscribe(\n    object: FabricObject,\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    this.unsubscribe(object, context);\n    const disposers = this.attachHandlers(object, context);\n    this._subscriptions.set(object, disposers);\n  }\n\n  /**\n   * unsubscribe object layout triggers\n   */\n  protected unsubscribe(\n    object: FabricObject,\n    _context?: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    (this._subscriptions.get(object) || []).forEach((d) => d());\n    this._subscriptions.delete(object);\n  }\n\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.unsubscribe(object, context));\n  }\n\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ) {\n    context.targets.forEach((object) => this.subscribe(object, context));\n  }\n\n  protected onBeforeLayout(context: StrictLayoutContext) {\n    const { target, type } = context;\n    const { canvas } = target;\n    // handle layout triggers subscription\n    // @TODO: gate the registration when the group is interactive\n    if (type === LAYOUT_TYPE_INITIALIZATION || type === LAYOUT_TYPE_ADDED) {\n      this.subscribeTargets(context);\n    } else if (type === LAYOUT_TYPE_REMOVED) {\n      this.unsubscribeTargets(context);\n    }\n    // fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:before', {\n      context,\n    });\n    canvas &&\n      canvas.fire('object:layout:before', {\n        target,\n        context,\n      });\n\n    if (type === LAYOUT_TYPE_IMPERATIVE && context.deep) {\n      const { strategy: _, ...tricklingContext } = context;\n      // traverse the tree\n      target.forEachObject(\n        (object) =>\n          (object as Group).layoutManager &&\n          (object as Group).layoutManager.performLayout({\n            ...tricklingContext,\n            bubbles: false,\n            target: object as Group,\n          }),\n      );\n    }\n  }\n\n  protected getLayoutResult(\n    context: StrictLayoutContext,\n  ): Required<LayoutResult> | undefined {\n    const { target, strategy, type } = context;\n\n    const result = strategy.calcLayoutResult(context, target.getObjects());\n\n    if (!result) {\n      return;\n    }\n\n    const prevCenter =\n      type === LAYOUT_TYPE_INITIALIZATION\n        ? new Point()\n        : target.getRelativeCenterPoint();\n\n    const {\n      center: nextCenter,\n      correction = new Point(),\n      relativeCorrection = new Point(),\n    } = result;\n    const offset = prevCenter\n      .subtract(nextCenter)\n      .add(correction)\n      .transform(\n        // in `initialization` we do not account for target's transformation matrix\n        type === LAYOUT_TYPE_INITIALIZATION\n          ? iMatrix\n          : invertTransform(target.calcOwnMatrix()),\n        true,\n      )\n      .add(relativeCorrection);\n\n    return {\n      result,\n      prevCenter,\n      nextCenter,\n      offset,\n    };\n  }\n\n  protected commitLayout(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    const {\n      result: { size },\n      nextCenter,\n    } = layoutResult;\n    // set dimensions\n    target.set({ width: size.x, height: size.y });\n    // layout descendants\n    this.layoutObjects(context, layoutResult);\n    //  set position\n    // in `initialization` we do not account for target's transformation matrix\n    if (context.type === LAYOUT_TYPE_INITIALIZATION) {\n      // TODO: what about strokeWidth?\n      target.set({\n        left:\n          context.x ?? nextCenter.x + size.x * resolveOrigin(target.originX),\n        top: context.y ?? nextCenter.y + size.y * resolveOrigin(target.originY),\n      });\n    } else {\n      target.setPositionByOrigin(nextCenter, CENTER, CENTER);\n      // invalidate\n      target.setCoords();\n      target.set('dirty', true);\n    }\n  }\n\n  protected layoutObjects(\n    context: StrictLayoutContext,\n    layoutResult: Required<LayoutResult>,\n  ) {\n    const { target } = context;\n    //  adjust objects to account for new center\n    target.forEachObject((object) => {\n      object.group === target &&\n        this.layoutObject(context, layoutResult, object);\n    });\n    // adjust clip path to account for new center\n    context.strategy.shouldLayoutClipPath(context) &&\n      this.layoutObject(context, layoutResult, target.clipPath as FabricObject);\n  }\n\n  /**\n   * @param {FabricObject} object\n   * @param {Point} offset\n   */\n  protected layoutObject(\n    context: StrictLayoutContext,\n    { offset }: Required<LayoutResult>,\n    object: FabricObject,\n  ) {\n    // TODO: this is here for cache invalidation.\n    // verify if this is necessary since we have explicit\n    // cache invalidation at the end of commitLayout\n    object.set({\n      left: object.left + offset.x,\n      top: object.top + offset.y,\n    });\n  }\n\n  protected onAfterLayout(\n    context: StrictLayoutContext,\n    layoutResult?: LayoutResult,\n  ) {\n    const {\n      target,\n      strategy,\n      bubbles,\n      prevStrategy: _,\n      ...bubblingContext\n    } = context;\n    const { canvas } = target;\n\n    //  fire layout event (event will fire only for layouts after initialization layout)\n    target.fire('layout:after', {\n      context,\n      result: layoutResult,\n    });\n    canvas &&\n      canvas.fire('object:layout:after', {\n        context,\n        result: layoutResult,\n        target,\n      });\n\n    //  bubble\n    const parent = target.parent;\n    if (bubbles && parent?.layoutManager) {\n      //  add target to context#path\n      (bubblingContext.path || (bubblingContext.path = [])).push(target);\n      //  all parents should invalidate their layout\n      parent.layoutManager.performLayout({\n        ...bubblingContext,\n        target: parent,\n      });\n    }\n    target.set('dirty', true);\n  }\n\n  dispose() {\n    const { _subscriptions } = this;\n    _subscriptions.forEach((disposers) => disposers.forEach((d) => d()));\n    _subscriptions.clear();\n  }\n\n  toObject() {\n    return {\n      type: LAYOUT_MANAGER,\n      strategy: (this.strategy.constructor as typeof LayoutStrategy).type,\n    };\n  }\n\n  toJSON() {\n    return this.toObject();\n  }\n}\n\nclassRegistry.setClass(LayoutManager, LAYOUT_MANAGER);\n", "import type { CollectionEvents, ObjectEvents } from '../EventTypeDefs';\nimport { createCollectionMixin } from '../Collection';\nimport type {\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n  Abortable,\n} from '../typedefs';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n} from '../util/misc/matrix';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n} from '../util/misc/objectEnlive';\nimport { applyTransformToObject } from '../util/misc/objectTransforms';\nimport { FabricObject } from './Object/FabricObject';\nimport { Rect } from './Rect';\nimport { classRegistry } from '../ClassRegistry';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport { log } from '../util/internals/console';\nimport type {\n  ImperativeLayoutOptions,\n  LayoutBeforeEvent,\n  LayoutAfterEvent,\n} from '../LayoutManager/types';\nimport { LayoutManager } from '../LayoutManager/LayoutManager';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_IMPERATIVE,\n  LAYOUT_TYPE_INITIALIZATION,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { SerializedLayoutManager } from '../LayoutManager/LayoutManager';\nimport type { FitContentLayout } from '../LayoutManager';\nimport type { DrawContext } from './Object/Object';\n\n/**\n * This class handles the specific case of creating a group using {@link Group#fromObject} and is not meant to be used in any other case.\n * We could have used a boolean in the constructor, as we did previously, but we think the boolean\n * would stay in the group's constructor interface and create confusion, therefore it was removed.\n * This layout manager doesn't do anything and therefore keeps the exact layout the group had when {@link Group#toObject} was called.\n */\nclass NoopLayoutManager extends LayoutManager {\n  performLayout() {}\n}\n\nexport interface GroupEvents extends ObjectEvents, CollectionEvents {\n  'layout:before': LayoutBeforeEvent;\n  'layout:after': LayoutAfterEvent;\n}\n\nexport interface GroupOwnProps {\n  subTargetCheck: boolean;\n  interactive: boolean;\n}\n\nexport interface SerializedGroupProps\n  extends SerializedObjectProps,\n    GroupOwnProps {\n  objects: SerializedObjectProps[];\n  layoutManager: SerializedLayoutManager;\n}\n\nexport interface GroupProps extends FabricObjectProps, GroupOwnProps {\n  layoutManager: LayoutManager;\n}\n\nexport const groupDefaultValues: Partial<TClassProperties<Group>> = {\n  strokeWidth: 0,\n  subTargetCheck: false,\n  interactive: false,\n};\n\n/**\n * @fires object:added\n * @fires object:removed\n * @fires layout:before\n * @fires layout:after\n */\nexport class Group\n  extends createCollectionMixin(\n    FabricObject<GroupProps, SerializedGroupProps, GroupEvents>,\n  )\n  implements GroupProps\n{\n  /**\n   * Used to optimize performance\n   * set to `false` if you don't need contained objects to be targets of events\n   * @default\n   * @type boolean\n   */\n  declare subTargetCheck: boolean;\n\n  /**\n   * Used to allow targeting of object inside groups.\n   * set to true if you want to select an object inside a group.\\\n   * **REQUIRES** `subTargetCheck` set to true\n   * This will be not removed but slowly replaced with a method setInteractive\n   * that will take care of enabling subTargetCheck and necessary object events.\n   * There is too much attached to group interactivity to just be evaluated by a\n   * boolean in the code\n   * @default\n   * @deprecated\n   * @type boolean\n   */\n  declare interactive: boolean;\n\n  declare layoutManager: LayoutManager;\n\n  /**\n   * Used internally to optimize performance\n   * Once an object is selected, instance is rendered without the selected object.\n   * This way instance is cached only once for the entire interaction with the selected object.\n   * @private\n   */\n  protected _activeObjects: FabricObject[] = [];\n\n  static type = 'Group';\n\n  static ownDefaults: Record<string, any> = groupDefaultValues;\n  private __objectSelectionTracker: (ev: ObjectEvents['selected']) => void;\n  private __objectSelectionDisposer: (ev: ObjectEvents['deselected']) => void;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Group.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {FabricObject[]} [objects] instance objects\n   * @param {Object} [options] Options object\n   */\n  constructor(objects: FabricObject[] = [], options: Partial<GroupProps> = {}) {\n    super();\n    Object.assign(this, Group.ownDefaults);\n    this.setOptions(options);\n    this.groupInit(objects, options);\n  }\n\n  /**\n   * Shared code between group and active selection\n   * Meant to be used by the constructor.\n   */\n  protected groupInit(\n    objects: FabricObject[],\n    options: {\n      layoutManager?: LayoutManager;\n      top?: number;\n      left?: number;\n    },\n  ) {\n    this._objects = [...objects]; // Avoid unwanted mutations of Collection to affect the caller\n\n    this.__objectSelectionTracker = this.__objectSelectionMonitor.bind(\n      this,\n      true,\n    );\n    this.__objectSelectionDisposer = this.__objectSelectionMonitor.bind(\n      this,\n      false,\n    );\n\n    this.forEachObject((object) => {\n      this.enterGroup(object, false);\n    });\n\n    // perform initial layout\n    this.layoutManager = options.layoutManager ?? new LayoutManager();\n    this.layoutManager.performLayout({\n      type: LAYOUT_TYPE_INITIALIZATION,\n      target: this,\n      targets: [...objects],\n      // @TODO remove this concept from the layout manager.\n      // Layout manager will calculate the correct position,\n      // group options can override it later.\n      x: options.left,\n      y: options.top,\n    });\n  }\n\n  /**\n   * Checks if object can enter group and logs relevant warnings\n   * @private\n   * @param {FabricObject} object\n   * @returns\n   */\n  canEnterGroup(object: FabricObject) {\n    if (object === this || this.isDescendantOf(object)) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'Group: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    } else if (this._objects.indexOf(object) !== -1) {\n      // is already in the objects array\n      log(\n        'error',\n        'Group: duplicate objects are not supported inside group, this call has no effect',\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Override this method to enhance performance (for groups with a lot of objects).\n   * If Overriding, be sure not pass illegal objects to group - it will break your app.\n   * @private\n   */\n  protected _filterObjectsBeforeEnteringGroup(objects: FabricObject[]) {\n    return objects.filter((object, index, array) => {\n      // can enter AND is the first occurrence of the object in the passed args (to prevent adding duplicates)\n      return this.canEnterGroup(object) && array.indexOf(object) === index;\n    });\n  }\n\n  /**\n   * Add objects\n   * @param {...FabricObject[]} objects\n   */\n  add(...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.add(...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Inserts an object into collection at specified index\n   * @param {FabricObject[]} objects Object to insert\n   * @param {Number} index Index to insert object at\n   */\n  insertAt(index: number, ...objects: FabricObject[]) {\n    const allowedObjects = this._filterObjectsBeforeEnteringGroup(objects);\n    const size = super.insertAt(index, ...allowedObjects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_ADDED, allowedObjects);\n    return size;\n  }\n\n  /**\n   * Remove objects\n   * @param {...FabricObject[]} objects\n   * @returns {FabricObject[]} removed objects\n   */\n  remove(...objects: FabricObject[]) {\n    const removed = super.remove(...objects);\n    this._onAfterObjectsChange(LAYOUT_TYPE_REMOVED, removed);\n    return removed;\n  }\n\n  _onObjectAdded(object: FabricObject) {\n    this.enterGroup(object, true);\n    this.fire('object:added', { target: object });\n    object.fire('added', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _onObjectRemoved(object: FabricObject, removeParentTransform?: boolean) {\n    this.exitGroup(object, removeParentTransform);\n    this.fire('object:removed', { target: object });\n    object.fire('removed', { target: this });\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    this.layoutManager.performLayout({\n      type,\n      targets,\n      target: this,\n    });\n  }\n\n  _onStackOrderChanged() {\n    this._set('dirty', true);\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    const prev = this[key as keyof this];\n    super._set(key, value);\n    if (key === 'canvas' && prev !== value) {\n      (this._objects || []).forEach((object) => {\n        object._set(key, value);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return this.subTargetCheck;\n  }\n\n  /**\n   * Remove all objects\n   * @returns {FabricObject[]} removed objects\n   */\n  removeAll() {\n    this._activeObjects = [];\n    return this.remove(...this._objects);\n  }\n\n  /**\n   * keeps track of the selected objects\n   * @private\n   */\n  __objectSelectionMonitor<T extends boolean>(\n    selected: T,\n    {\n      target: object,\n    }: ObjectEvents[T extends true ? 'selected' : 'deselected'],\n  ) {\n    const activeObjects = this._activeObjects;\n    if (selected) {\n      activeObjects.push(object);\n      this._set('dirty', true);\n    } else if (activeObjects.length > 0) {\n      const index = activeObjects.indexOf(object);\n      if (index > -1) {\n        activeObjects.splice(index, 1);\n        this._set('dirty', true);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {boolean} watch\n   * @param {FabricObject} object\n   */\n  _watchObject(watch: boolean, object: FabricObject) {\n    //  make sure we listen only once\n    watch && this._watchObject(false, object);\n    if (watch) {\n      object.on('selected', this.__objectSelectionTracker);\n      object.on('deselected', this.__objectSelectionDisposer);\n    } else {\n      object.off('selected', this.__objectSelectionTracker);\n      object.off('deselected', this.__objectSelectionDisposer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object.group && object.group.remove(object);\n    object._set('parent', this);\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  _enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    if (removeParentTransform) {\n      // can this be converted to utils (sendObjectToPlane)?\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          invertTransform(this.calcTransformMatrix()),\n          object.calcTransformMatrix(),\n        ),\n      );\n    }\n    this._shouldSetNestedCoords() && object.setCoords();\n    object._set('group', this);\n    object._set('canvas', this.canvas);\n    this._watchObject(true, object);\n    const activeObject =\n      this.canvas &&\n      this.canvas.getActiveObject &&\n      this.canvas.getActiveObject();\n    // if we are adding the activeObject in a group\n    if (\n      activeObject &&\n      (activeObject === object || object.isDescendantOf(activeObject))\n    ) {\n      this._activeObjects.push(object);\n    }\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    object._set('parent', undefined);\n    object._set('canvas', undefined);\n  }\n\n  /**\n   * Executes the inner fabric logic of exiting a group.\n   * - Stop watching the object\n   * - Remove the object from the optimization map this._activeObjects\n   * - unset the group property of the object\n   * @protected\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  _exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    object._set('group', undefined);\n    if (!removeParentTransform) {\n      applyTransformToObject(\n        object,\n        multiplyTransformMatrices(\n          this.calcTransformMatrix(),\n          object.calcTransformMatrix(),\n        ),\n      );\n      object.setCoords();\n    }\n    this._watchObject(false, object);\n    const index =\n      this._activeObjects.length > 0 ? this._activeObjects.indexOf(object) : -1;\n    if (index > -1) {\n      this._activeObjects.splice(index, 1);\n    }\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group is already cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    const ownCache = FabricObject.prototype.shouldCache.call(this);\n    if (ownCache) {\n      for (let i = 0; i < this._objects.length; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          this.ownCaching = false;\n          return false;\n        }\n      }\n    }\n    return ownCache;\n  }\n\n  /**\n   * Check if this object or a child object will cast a shadow\n   * @return {Boolean}\n   */\n  willDrawShadow() {\n    if (super.willDrawShadow()) {\n      return true;\n    }\n    for (let i = 0; i < this._objects.length; i++) {\n      if (this._objects[i].willDrawShadow()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if instance or its group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache(): boolean {\n    return this.ownCaching || (!!this.parent && this.parent.isOnACache());\n  }\n\n  /**\n   * Execute the drawing operation for an object on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawObject(\n    ctx: CanvasRenderingContext2D,\n    forClipping: boolean | undefined,\n    context: DrawContext,\n  ) {\n    this._renderBackground(ctx);\n    for (let i = 0; i < this._objects.length; i++) {\n      const obj = this._objects[i];\n      // TODO: handle rendering edge case somehow\n      if (this.canvas?.preserveObjectStacking && obj.group !== this) {\n        ctx.save();\n        ctx.transform(...invertTransform(this.calcTransformMatrix()));\n        obj.render(ctx);\n        ctx.restore();\n      } else if (obj.group === this) {\n        obj.render(ctx);\n      }\n    }\n    this._drawClipPath(ctx, this.clipPath, context);\n  }\n\n  /**\n   * @override\n   * @return {Boolean}\n   */\n  setCoords() {\n    super.setCoords();\n    this._shouldSetNestedCoords() &&\n      this.forEachObject((object) => object.setCoords());\n  }\n\n  triggerLayout(options: ImperativeLayoutOptions = {}) {\n    this.layoutManager.performLayout({\n      target: this,\n      type: LAYOUT_TYPE_IMPERATIVE,\n      ...options,\n    });\n  }\n\n  /**\n   * Renders instance on a given context\n   * @param {CanvasRenderingContext2D} ctx context to render instance on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    this._transformDone = true;\n    super.render(ctx);\n    this._transformDone = false;\n  }\n\n  /**\n   *\n   * @private\n   * @param {'toObject'|'toDatalessObject'} [method]\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @returns {FabricObject[]} serialized objects\n   */\n  __serializeObjects(\n    method: 'toObject' | 'toDatalessObject',\n    propertiesToInclude?: string[],\n  ) {\n    const _includeDefaultValues = this.includeDefaultValues;\n    return this._objects\n      .filter(function (obj) {\n        return !obj.excludeFromExport;\n      })\n      .map(function (obj) {\n        const originalDefaults = obj.includeDefaultValues;\n        obj.includeDefaultValues = _includeDefaultValues;\n        const data = obj[method || 'toObject'](propertiesToInclude);\n        obj.includeDefaultValues = originalDefaults;\n        // delete data.version;\n        return data;\n      });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<\n      GroupProps & TClassProperties<this>,\n      keyof SerializedGroupProps\n    >,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SerializedGroupProps {\n    const layoutManager = this.layoutManager.toObject();\n\n    return {\n      ...super.toObject([\n        'subTargetCheck',\n        'interactive',\n        ...propertiesToInclude,\n      ]),\n      ...(layoutManager.strategy !== 'fit-content' || this.includeDefaultValues\n        ? { layoutManager }\n        : {}),\n      objects: this.__serializeObjects(\n        'toObject',\n        propertiesToInclude as string[],\n      ),\n    };\n  }\n\n  toString() {\n    return `#<Group: (${this.complexity()})>`;\n  }\n\n  dispose() {\n    this.layoutManager.unsubscribeTargets({\n      targets: this.getObjects(),\n      target: this,\n    });\n    this._activeObjects = [];\n    this.forEachObject((object) => {\n      this._watchObject(false, object);\n      object.dispose();\n    });\n    super.dispose();\n  }\n\n  /**\n   * @private\n   */\n  _createSVGBgRect(reviver?: TSVGReviver) {\n    if (!this.backgroundColor) {\n      return '';\n    }\n    const fillStroke = Rect.prototype._toSVG.call(this);\n    const commons = fillStroke.indexOf('COMMON_PARTS');\n    fillStroke[commons] = 'for=\"group\" ';\n    const markup = fillStroke.join('');\n    return reviver ? reviver(markup) : markup;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {TSVGReviver} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  _toSVG(reviver?: TSVGReviver) {\n    const svgString = ['<g ', 'COMMON_PARTS', ' >\\n'];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t\\t', this._objects[i].toSVG(reviver));\n    }\n    svgString.push('</g>\\n');\n    return svgString;\n  }\n\n  /**\n   * Returns styles-string for svg-export, specific version for group\n   * @return {String}\n   */\n  getSvgStyles(): string {\n    const opacity =\n        typeof this.opacity !== 'undefined' && this.opacity !== 1\n          ? `opacity: ${this.opacity};`\n          : '',\n      visibility = this.visible ? '' : ' visibility: hidden;';\n    return [opacity, this.getSvgFilter(), visibility].join('');\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {String} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const svgString = [];\n    const bg = this._createSVGBgRect(reviver);\n    bg && svgString.push('\\t', bg);\n    for (let i = 0; i < this._objects.length; i++) {\n      svgString.push('\\t', this._objects[i].toClipPathSVG(reviver));\n    }\n    return this._createBaseClipPathSVGMarkup(svgString, {\n      reviver,\n    });\n  }\n\n  /**\n   * @todo support loading from svg\n   * @private\n   * @static\n   * @memberOf Group\n   * @param {Object} object Object to create a group from\n   * @returns {Promise<Group>}\n   */\n  static fromObject<T extends TOptions<SerializedGroupProps>>(\n    { type, objects = [], layoutManager, ...options }: T,\n    abortable?: Abortable,\n  ) {\n    return Promise.all([\n      enlivenObjects<FabricObject>(objects, abortable),\n      enlivenObjectEnlivables(options, abortable),\n    ]).then(([objects, hydratedOptions]) => {\n      const group = new this(objects, {\n        ...options,\n        ...hydratedOptions,\n        layoutManager: new NoopLayoutManager(),\n      });\n      if (layoutManager) {\n        const layoutClass = classRegistry.getClass<typeof LayoutManager>(\n          layoutManager.type,\n        );\n        const strategyClass = classRegistry.getClass<typeof FitContentLayout>(\n          layoutManager.strategy,\n        );\n        group.layoutManager = new layoutClass(new strategyClass());\n      } else {\n        group.layoutManager = new LayoutManager();\n      }\n      group.layoutManager.subscribeTargets({\n        type: LAYOUT_TYPE_INITIALIZATION,\n        target: group,\n        targets: group.getObjects(),\n      });\n      group.setCoords();\n      return group;\n    });\n  }\n}\n\nclassRegistry.setClass(Group);\n", "import type { GroupProps } from '../../shapes/Group';\nimport { Group } from '../../shapes/Group';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\n\n/**\n * TODO experiment with different layout manager and svg results ( fixed fit content )\n * Groups SVG elements (usually those retrieved from SVG document)\n * @static\n * @param {FabricObject[]} elements FabricObject(s) parsed from svg, to group\n * @return {FabricObject | Group}\n */\nexport const groupSVGElements = (\n  elements: FabricObject[],\n  options?: Partial<GroupProps>,\n) => {\n  if (elements && elements.length === 1) {\n    return elements[0];\n  }\n  return new Group(elements, options);\n};\n", "import type { TSize } from '../../typedefs';\n\n/**\n * Finds the scale for the object source to fit inside the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to fit into destination\n */\nexport const findScaleToFit = (source: TSize, destination: TSize) =>\n  Math.min(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n\n/**\n * Finds the scale for the object source to cover entirely the object destination,\n * keeping aspect ratio intact.\n * respect the total allowed area for the cache.\n * @param {TSize} source natural unscaled size of the object\n * @param {TSize} destination natural unscaled size of the object\n * @return {Number} scale factor to apply to source to cover destination\n */\nexport const findScaleToCover = (source: TSize, destination: TSize) =>\n  Math.max(\n    destination.width / source.width,\n    destination.height / source.height,\n  );\n", "import { reNum } from '../../parser/constants';\n\nconst commaWsp = `\\\\s*,?\\\\s*`;\n\n/**\n * p for param\n * using \"bad naming\" here because it makes the regex much easier to read\n * p is a number that is preceded by an arbitary number of spaces, maybe 0,\n * a comma or not, and then possibly more spaces or not.\n */\nconst p = `${commaWsp}(${reNum})`;\n\n// const reMoveToCommand = `(M) ?(?:${p}${p} ?)+`;\n\n// const reLineCommand = `(L) ?(?:${p}${p} ?)+`;\n\n// const reHorizontalLineCommand = `(H) ?(?:${p} ?)+`;\n\n// const reVerticalLineCommand = `(V) ?(?:${p} ?)+`;\n\n// const reClosePathCommand = String.raw`(Z)\\s*`;\n\n// const reCubicCurveCommand = `(C) ?(?:${p}${p}${p}${p}${p}${p} ?)+`;\n\n// const reCubicCurveShortcutCommand = `(S) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveCommand = `(Q) ?(?:${p}${p}${p}${p} ?)+`;\n\n// const reQuadraticCurveShortcutCommand = `(T) ?(?:${p}${p} ?)+`;\n\nexport const reArcCommandPoints = `${p}${p}${p}${commaWsp}([01])${commaWsp}([01])${p}${p}`;\n// const reArcCommand = `(A) ?(?:${reArcCommandPoints} ?)+`;\n\n// export const rePathCommandGroups =\n//   `(?:(?:${reMoveToCommand})` +\n//   `|(?:${reLineCommand})` +\n//   `|(?:${reHorizontalLineCommand})` +\n//   `|(?:${reVerticalLineCommand})` +\n//   `|(?:${reClosePathCommand})` +\n//   `|(?:${reCubicCurveCommand})` +\n//   `|(?:${reCubicCurveShortcutCommand})` +\n//   `|(?:${reQuadraticCurveCommand})` +\n//   `|(?:${reQuadraticCurveShortcutCommand})` +\n//   `|(?:${reArcCommand}))`;\n\nexport const rePathCommand = '[mzlhvcsqta][^mzlhvcsqta]*';\n", "import { cache } from '../../cache';\nimport { config } from '../../config';\nimport { halfPI, PiBy180 } from '../../constants';\nimport type { TMat2D, TRadian, TRectBounds } from '../../typedefs';\nimport { cos } from '../misc/cos';\nimport { multiplyTransformMatrices, transformPoint } from '../misc/matrix';\nimport { sin } from '../misc/sin';\nimport { toFixed } from '../misc/toFixed';\nimport type {\n  TCurveInfo,\n  TComplexPathData,\n  TParsedAbsoluteCubicCurveCommand,\n  TPathSegmentInfo,\n  TPointAngle,\n  TSimpleParsedCommand,\n  TSimplePathData,\n  TPathSegmentCommandInfo,\n  TComplexParsedCommand,\n  TPathSegmentInfoCommon,\n  TEndPathInfo,\n  TParsedArcCommand,\n  TComplexParsedCommandType,\n} from './typedefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { reArcCommandPoints, rePathCommand } from './regex';\nimport { reNum } from '../../parser/constants';\n\n/**\n * Commands that may be repeated\n */\nconst repeatedCommands: Record<string, 'l' | 'L'> = {\n  m: 'l',\n  M: 'L',\n};\n\n/**\n * Convert an arc of a rotated ellipse to a Bezier Curve\n * @param {TRadian} theta1 start of the arc\n * @param {TRadian} theta2 end of the arc\n * @param cosTh cosine of the angle of rotation\n * @param sinTh sine of the angle of rotation\n * @param rx x-axis radius (before rotation)\n * @param ry y-axis radius (before rotation)\n * @param cx1 center x of the ellipse\n * @param cy1 center y of the ellipse\n * @param mT\n * @param fromX starting point of arc x\n * @param fromY starting point of arc y\n */\nconst segmentToBezier = (\n  theta1: TRadian,\n  theta2: TRadian,\n  cosTh: number,\n  sinTh: number,\n  rx: number,\n  ry: number,\n  cx1: number,\n  cy1: number,\n  mT: number,\n  fromX: number,\n  fromY: number,\n): TParsedAbsoluteCubicCurveCommand => {\n  const costh1 = cos(theta1),\n    sinth1 = sin(theta1),\n    costh2 = cos(theta2),\n    sinth2 = sin(theta2),\n    toX = cosTh * rx * costh2 - sinTh * ry * sinth2 + cx1,\n    toY = sinTh * rx * costh2 + cosTh * ry * sinth2 + cy1,\n    cp1X = fromX + mT * (-cosTh * rx * sinth1 - sinTh * ry * costh1),\n    cp1Y = fromY + mT * (-sinTh * rx * sinth1 + cosTh * ry * costh1),\n    cp2X = toX + mT * (cosTh * rx * sinth2 + sinTh * ry * costh2),\n    cp2Y = toY + mT * (sinTh * rx * sinth2 - cosTh * ry * costh2);\n\n  return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];\n};\n\n/**\n * Adapted from {@link http://dxr.mozilla.org/mozilla-central/source/dom/svg/SVGPathDataParser.cpp}\n * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n * http://mozilla.org/MPL/2.0/\n * @param toX\n * @param toY\n * @param rx\n * @param ry\n * @param {number} large 0 or 1 flag\n * @param {number} sweep 0 or 1 flag\n * @param rotateX\n */\nconst arcToSegments = (\n  toX: number,\n  toY: number,\n  rx: number,\n  ry: number,\n  large: number,\n  sweep: number,\n  rotateX: TRadian,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  if (rx === 0 || ry === 0) {\n    return [];\n  }\n  let fromX = 0,\n    fromY = 0,\n    root = 0;\n  const PI = Math.PI,\n    theta = rotateX * PiBy180,\n    sinTheta = sin(theta),\n    cosTh = cos(theta),\n    px = 0.5 * (-cosTh * toX - sinTheta * toY),\n    py = 0.5 * (-cosTh * toY + sinTheta * toX),\n    rx2 = rx ** 2,\n    ry2 = ry ** 2,\n    py2 = py ** 2,\n    px2 = px ** 2,\n    pl = rx2 * ry2 - rx2 * py2 - ry2 * px2;\n  let _rx = Math.abs(rx);\n  let _ry = Math.abs(ry);\n\n  if (pl < 0) {\n    const s = Math.sqrt(1 - pl / (rx2 * ry2));\n    _rx *= s;\n    _ry *= s;\n  } else {\n    root =\n      (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n  }\n\n  const cx = (root * _rx * py) / _ry,\n    cy = (-root * _ry * px) / _rx,\n    cx1 = cosTh * cx - sinTheta * cy + toX * 0.5,\n    cy1 = sinTheta * cx + cosTh * cy + toY * 0.5;\n  let mTheta = calcVectorAngle(1, 0, (px - cx) / _rx, (py - cy) / _ry);\n  let dtheta = calcVectorAngle(\n    (px - cx) / _rx,\n    (py - cy) / _ry,\n    (-px - cx) / _rx,\n    (-py - cy) / _ry,\n  );\n\n  if (sweep === 0 && dtheta > 0) {\n    dtheta -= 2 * PI;\n  } else if (sweep === 1 && dtheta < 0) {\n    dtheta += 2 * PI;\n  }\n\n  // Convert into cubic bezier segments <= 90deg\n  const segments = Math.ceil(Math.abs((dtheta / PI) * 2)),\n    result = [],\n    mDelta = dtheta / segments,\n    mT =\n      ((8 / 3) * Math.sin(mDelta / 4) * Math.sin(mDelta / 4)) /\n      Math.sin(mDelta / 2);\n  let th3 = mTheta + mDelta;\n\n  for (let i = 0; i < segments; i++) {\n    result[i] = segmentToBezier(\n      mTheta,\n      th3,\n      cosTh,\n      sinTheta,\n      _rx,\n      _ry,\n      cx1,\n      cy1,\n      mT,\n      fromX,\n      fromY,\n    );\n    fromX = result[i][5];\n    fromY = result[i][6];\n    mTheta = th3;\n    th3 += mDelta;\n  }\n  return result;\n};\n\n/**\n * @private\n * Calculate the angle between two vectors\n * @param ux u endpoint x\n * @param uy u endpoint y\n * @param vx v endpoint x\n * @param vy v endpoint y\n */\nconst calcVectorAngle = (\n  ux: number,\n  uy: number,\n  vx: number,\n  vy: number,\n): TRadian => {\n  const ta = Math.atan2(uy, ux),\n    tb = Math.atan2(vy, vx);\n  if (tb >= ta) {\n    return tb - ta;\n  } else {\n    return 2 * Math.PI - (ta - tb);\n  }\n};\n\n// functions for the Cubic beizer\n// taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\nconst CB1 = (t: number) => t ** 3;\nconst CB2 = (t: number) => 3 * t ** 2 * (1 - t);\nconst CB3 = (t: number) => 3 * t * (1 - t) ** 2;\nconst CB4 = (t: number) => (1 - t) ** 3;\n\n/**\n * Calculate bounding box of a cubic Bezier curve\n * Taken from http://jsbin.com/ivomiq/56/edit (no credits available)\n * TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n * @param {number} begx starting point\n * @param {number} begy\n * @param {number} cp1x first control point\n * @param {number} cp1y\n * @param {number} cp2x second control point\n * @param {number} cp2y\n * @param {number} endx end of bezier\n * @param {number} endy\n * @return {TRectBounds} the rectangular bounds\n */\nexport function getBoundsOfCurve(\n  begx: number,\n  begy: number,\n  cp1x: number,\n  cp1y: number,\n  cp2x: number,\n  cp2y: number,\n  endx: number,\n  endy: number,\n): TRectBounds {\n  let argsString: string;\n  if (config.cachesBoundsOfCurve) {\n    // eslint-disable-next-line\n    argsString = [...arguments].join();\n    if (cache.boundsOfCurveCache[argsString]) {\n      return cache.boundsOfCurveCache[argsString];\n    }\n  }\n\n  const sqrt = Math.sqrt,\n    abs = Math.abs,\n    tvalues = [],\n    bounds: [[x: number, y: number], [x: number, y: number]] = [\n      [0, 0],\n      [0, 0],\n    ];\n\n  let b = 6 * begx - 12 * cp1x + 6 * cp2x;\n  let a = -3 * begx + 9 * cp1x - 9 * cp2x + 3 * endx;\n  let c = 3 * cp1x - 3 * begx;\n\n  for (let i = 0; i < 2; ++i) {\n    if (i > 0) {\n      b = 6 * begy - 12 * cp1y + 6 * cp2y;\n      a = -3 * begy + 9 * cp1y - 9 * cp2y + 3 * endy;\n      c = 3 * cp1y - 3 * begy;\n    }\n\n    if (abs(a) < 1e-12) {\n      if (abs(b) < 1e-12) {\n        continue;\n      }\n      const t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    const b2ac = b * b - 4 * c * a;\n    if (b2ac < 0) {\n      continue;\n    }\n    const sqrtb2ac = sqrt(b2ac);\n    const t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    const t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n\n  let j = tvalues.length;\n  const jlen = j;\n  const iterator = getPointOnCubicBezierIterator(\n    begx,\n    begy,\n    cp1x,\n    cp1y,\n    cp2x,\n    cp2y,\n    endx,\n    endy,\n  );\n  while (j--) {\n    const { x, y } = iterator(tvalues[j]);\n    bounds[0][j] = x;\n    bounds[1][j] = y;\n  }\n\n  bounds[0][jlen] = begx;\n  bounds[1][jlen] = begy;\n  bounds[0][jlen + 1] = endx;\n  bounds[1][jlen + 1] = endy;\n  const result: TRectBounds = [\n    new Point(Math.min(...bounds[0]), Math.min(...bounds[1])),\n    new Point(Math.max(...bounds[0]), Math.max(...bounds[1])),\n  ];\n  if (config.cachesBoundsOfCurve) {\n    cache.boundsOfCurveCache[argsString!] = result;\n  }\n  return result;\n}\n\n/**\n * Converts arc to a bunch of cubic Bezier curves\n * @param {number} fx starting point x\n * @param {number} fy starting point y\n * @param {TParsedArcCommand} coords Arc command\n */\nexport const fromArcToBeziers = (\n  fx: number,\n  fy: number,\n  [_, rx, ry, rot, large, sweep, tx, ty]: TParsedArcCommand,\n): TParsedAbsoluteCubicCurveCommand[] => {\n  const segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n  for (let i = 0, len = segsNorm.length; i < len; i++) {\n    segsNorm[i][1] += fx;\n    segsNorm[i][2] += fy;\n    segsNorm[i][3] += fx;\n    segsNorm[i][4] += fy;\n    segsNorm[i][5] += fx;\n    segsNorm[i][6] += fy;\n  }\n  return segsNorm;\n};\n\n/**\n * This function takes a parsed SVG path and makes it simpler for fabricJS logic.\n * Simplification consist of:\n * - All commands converted to absolute (lowercase to uppercase)\n * - S converted to C\n * - T converted to Q\n * - A converted to C\n * @param {TComplexPathData} path the array of commands of a parsed SVG path for `Path`\n * @return {TSimplePathData} the simplified array of commands of a parsed SVG path for `Path`\n * TODO: figure out how to remove the type assertions in a nice way\n */\nexport const makePathSimpler = (path: TComplexPathData): TSimplePathData => {\n  // x and y represent the last point of the path, AKA the previous command point.\n  // we add them to each relative command to make it an absolute comment.\n  // we also swap the v V h H with L, because are easier to transform.\n  let x = 0,\n    y = 0;\n  // x1 and y1 represent the last point of the subpath. the subpath is started with\n  // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n  // the last x1 and y1.\n  let x1 = 0,\n    y1 = 0;\n  // previous will host the letter of the previous command, to handle S and T.\n  // controlX and controlY will host the previous reflected control point\n  const destinationPath: TSimplePathData = [];\n  let previous,\n    // placeholders\n    controlX = 0,\n    controlY = 0;\n  for (const parsedCommand of path) {\n    const current: TComplexParsedCommand = [...parsedCommand];\n    let converted: TSimpleParsedCommand | undefined;\n    switch (\n      current[0] // first letter\n    ) {\n      case 'l': // lineto, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'L':\n        x = current[1];\n        y = current[2];\n        converted = ['L', x, y];\n        break;\n      case 'h': // horizontal lineto, relative\n        current[1] += x;\n      // falls through\n      case 'H':\n        x = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'v': // vertical lineto, relative\n        current[1] += y;\n      // falls through\n      case 'V':\n        y = current[1];\n        converted = ['L', x, y];\n        break;\n      case 'm': // moveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'M':\n        x = current[1];\n        y = current[2];\n        x1 = current[1];\n        y1 = current[2];\n        converted = ['M', x, y];\n        break;\n      case 'c': // bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n        current[5] += x;\n        current[6] += y;\n      // falls through\n      case 'C':\n        controlX = current[3];\n        controlY = current[4];\n        x = current[5];\n        y = current[6];\n        converted = ['C', current[1], current[2], controlX, controlY, x, y];\n        break;\n      case 's': // shorthand cubic bezierCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'S':\n        // would be sScC but since we are swapping sSc for C, we check just that.\n        if (previous === 'C') {\n          // calculate reflection of previous control points\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a C, c, S, or s,\n          // the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[3];\n        y = current[4];\n        converted = ['C', controlX, controlY, current[1], current[2], x, y];\n        // converted[3] and converted[4] are NOW the second control point.\n        // we keep it for the next reflection.\n        controlX = converted[3];\n        controlY = converted[4];\n        break;\n      case 'q': // quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n        current[3] += x;\n        current[4] += y;\n      // falls through\n      case 'Q':\n        controlX = current[1];\n        controlY = current[2];\n        x = current[3];\n        y = current[4];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 't': // shorthand quadraticCurveTo, relative\n        current[1] += x;\n        current[2] += y;\n      // falls through\n      case 'T':\n        if (previous === 'Q') {\n          // calculate reflection of previous control point\n          controlX = 2 * x - controlX;\n          controlY = 2 * y - controlY;\n        } else {\n          // If there is no previous command or if the previous command was not a Q, q, T or t,\n          // assume the control point is coincident with the current point\n          controlX = x;\n          controlY = y;\n        }\n        x = current[1];\n        y = current[2];\n        converted = ['Q', controlX, controlY, x, y];\n        break;\n      case 'a':\n        current[6] += x;\n        current[7] += y;\n      // falls through\n      case 'A':\n        fromArcToBeziers(x, y, current).forEach((b) => destinationPath.push(b));\n        x = current[6];\n        y = current[7];\n        break;\n      case 'z':\n      case 'Z':\n        x = x1;\n        y = y1;\n        converted = ['Z'];\n        break;\n      default:\n    }\n    if (converted) {\n      destinationPath.push(converted);\n      previous = converted[0];\n    } else {\n      previous = '';\n    }\n  }\n  return destinationPath;\n};\n\n// todo verify if we can just use the point class here\n/**\n * Calc length from point x1,y1 to x2,y2\n * @param {number} x1 starting point x\n * @param {number} y1 starting point y\n * @param {number} x2 starting point x\n * @param {number} y2 starting point y\n * @return {number} length of segment\n */\nconst calcLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n): number => Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n\n/**\n * Get an iterator that takes a percentage and returns a point\n * @param {number} begx\n * @param {number} begy\n * @param {number} cp1x\n * @param {number} cp1y\n * @param {number} cp2x\n * @param {number} cp2y\n * @param {number} endx\n * @param {number} endy\n */\nconst getPointOnCubicBezierIterator =\n  (\n    begx: number,\n    begy: number,\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    endx: number,\n    endy: number,\n  ) =>\n  (pct: number) => {\n    const c1 = CB1(pct),\n      c2 = CB2(pct),\n      c3 = CB3(pct),\n      c4 = CB4(pct);\n    return new Point(\n      endx * c1 + cp2x * c2 + cp1x * c3 + begx * c4,\n      endy * c1 + cp2y * c2 + cp1y * c3 + begy * c4,\n    );\n  };\n\nconst QB1 = (t: number) => t ** 2;\nconst QB2 = (t: number) => 2 * t * (1 - t);\nconst QB3 = (t: number) => (1 - t) ** 2;\n\nconst getTangentCubicIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n    p4x: number,\n    p4y: number,\n  ) =>\n  (pct: number) => {\n    const qb1 = QB1(pct),\n      qb2 = QB2(pct),\n      qb3 = QB3(pct),\n      tangentX =\n        3 * (qb3 * (p2x - p1x) + qb2 * (p3x - p2x) + qb1 * (p4x - p3x)),\n      tangentY =\n        3 * (qb3 * (p2y - p1y) + qb2 * (p3y - p2y) + qb1 * (p4y - p3y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\nconst getPointOnQuadraticBezierIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const c1 = QB1(pct),\n      c2 = QB2(pct),\n      c3 = QB3(pct);\n    return new Point(\n      p3x * c1 + p2x * c2 + p1x * c3,\n      p3y * c1 + p2y * c2 + p1y * c3,\n    );\n  };\n\nconst getTangentQuadraticIterator =\n  (\n    p1x: number,\n    p1y: number,\n    p2x: number,\n    p2y: number,\n    p3x: number,\n    p3y: number,\n  ) =>\n  (pct: number) => {\n    const invT = 1 - pct,\n      tangentX = 2 * (invT * (p2x - p1x) + pct * (p3x - p2x)),\n      tangentY = 2 * (invT * (p2y - p1y) + pct * (p3y - p2y));\n    return Math.atan2(tangentY, tangentX);\n  };\n\n// this will run over a path segment (a cubic or quadratic segment) and approximate it\n// with 100 segments. This will good enough to calculate the length of the curve\nconst pathIterator = (\n  iterator: (pct: number) => Point,\n  x1: number,\n  y1: number,\n) => {\n  let tempP = new Point(x1, y1),\n    tmpLen = 0;\n  for (let perc = 1; perc <= 100; perc += 1) {\n    const p = iterator(perc / 100);\n    tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    tempP = p;\n  }\n  return tmpLen;\n};\n\n/**\n * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n * that correspond to that pixels run over the path.\n * The percentage will be then used to find the correct point on the canvas for the path.\n * @param {Array} segInfo fabricJS collection of information on a parsed path\n * @param {number} distance from starting point, in pixels.\n * @return {TPointAngle} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n */\nconst findPercentageForDistance = (\n  segInfo: TCurveInfo<'Q' | 'C'>,\n  distance: number,\n): TPointAngle => {\n  let perc = 0,\n    tmpLen = 0,\n    tempP: XY = { x: segInfo.x, y: segInfo.y },\n    p: XY = { ...tempP },\n    nextLen: number,\n    nextStep = 0.01,\n    lastPerc = 0;\n  // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n  // the path\n  const iterator = segInfo.iterator,\n    angleFinder = segInfo.angleFinder;\n  while (tmpLen < distance && nextStep > 0.0001) {\n    p = iterator(perc);\n    lastPerc = perc;\n    nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n    // compare tmpLen each cycle with distance, decide next perc to test.\n    if (nextLen + tmpLen > distance) {\n      // we discard this step and we make smaller steps.\n      perc -= nextStep;\n      nextStep /= 2;\n    } else {\n      tempP = p;\n      perc += nextStep;\n      tmpLen += nextLen;\n    }\n  }\n  return { ...p, angle: angleFinder(lastPerc) };\n};\n\n/**\n * Run over a parsed and simplified path and extract some information (length of each command and starting point)\n * @param {TSimplePathData} path parsed path commands\n * @return {TPathSegmentInfo[]} path commands information\n */\nexport const getPathSegmentsInfo = (\n  path: TSimplePathData,\n): TPathSegmentInfo[] => {\n  let totalLength = 0,\n    //x2 and y2 are the coords of segment start\n    //x1 and y1 are the coords of the current point\n    x1 = 0,\n    y1 = 0,\n    x2 = 0,\n    y2 = 0,\n    iterator,\n    tempInfo: TPathSegmentInfo;\n  const info: TPathSegmentInfo[] = [];\n  for (const current of path) {\n    const basicInfo: TPathSegmentInfoCommon<keyof TPathSegmentCommandInfo> = {\n      x: x1,\n      y: y1,\n      command: current[0],\n      length: 0,\n    };\n    switch (\n      current[0] //first letter\n    ) {\n      case 'M':\n        tempInfo = <TPathSegmentInfoCommon<'M'>>basicInfo;\n        tempInfo.x = x2 = x1 = current[1];\n        tempInfo.y = y2 = y1 = current[2];\n        break;\n      case 'L':\n        tempInfo = <TPathSegmentInfoCommon<'L'>>basicInfo;\n        tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n        x1 = current[1];\n        y1 = current[2];\n        break;\n      case 'C':\n        iterator = getPointOnCubicBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo = <TCurveInfo<'C'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentCubicIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n          current[5],\n          current[6],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n\n        x1 = current[5];\n        y1 = current[6];\n        break;\n      case 'Q':\n        iterator = getPointOnQuadraticBezierIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo = <TCurveInfo<'Q'>>basicInfo;\n        tempInfo.iterator = iterator;\n        tempInfo.angleFinder = getTangentQuadraticIterator(\n          x1,\n          y1,\n          current[1],\n          current[2],\n          current[3],\n          current[4],\n        );\n        tempInfo.length = pathIterator(iterator, x1, y1);\n        x1 = current[3];\n        y1 = current[4];\n        break;\n      case 'Z':\n        // we add those in order to ease calculations later\n        tempInfo = <TEndPathInfo>basicInfo;\n        tempInfo.destX = x2;\n        tempInfo.destY = y2;\n        tempInfo.length = calcLineLength(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        break;\n    }\n    totalLength += tempInfo.length;\n    info.push(tempInfo);\n  }\n  info.push({ length: totalLength, x: x1, y: y1 });\n  return info;\n};\n\n/**\n * Get the point on the path that is distance along the path\n * @param path\n * @param distance\n * @param infos\n */\nexport const getPointOnPath = (\n  path: TSimplePathData,\n  distance: number,\n  infos: TPathSegmentInfo[] = getPathSegmentsInfo(path),\n): TPointAngle | undefined => {\n  let i = 0;\n  while (distance - infos[i].length > 0 && i < infos.length - 2) {\n    distance -= infos[i].length;\n    i++;\n  }\n  const segInfo = infos[i],\n    segPercent = distance / segInfo.length,\n    segment = path[i];\n\n  switch (segInfo.command) {\n    case 'M':\n      return { x: segInfo.x, y: segInfo.y, angle: 0 };\n    case 'Z':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segInfo.destX, segInfo.destY),\n          segPercent,\n        ),\n        angle: Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x),\n      };\n    case 'L':\n      return {\n        ...new Point(segInfo.x, segInfo.y).lerp(\n          new Point(segment[1]!, segment[2]!),\n          segPercent,\n        ),\n        angle: Math.atan2(segment[2]! - segInfo.y, segment[1]! - segInfo.x),\n      };\n    case 'C':\n      return findPercentageForDistance(segInfo, distance);\n    case 'Q':\n      return findPercentageForDistance(segInfo, distance);\n    default:\n    // throw Error('Invalid command');\n  }\n};\n\nconst rePathCmdAll = new RegExp(rePathCommand, 'gi');\nconst regExpArcCommandPoints = new RegExp(reArcCommandPoints, 'g');\nconst reMyNum = new RegExp(reNum, 'gi');\nconst commandLengths = {\n  m: 2,\n  l: 2,\n  h: 1,\n  v: 1,\n  c: 6,\n  s: 4,\n  q: 4,\n  t: 2,\n  a: 7,\n} as const;\n/**\n *\n * @param {string} pathString\n * @return {TComplexPathData} An array of SVG path commands\n * @example <caption>Usage</caption>\n * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n *   ['M', 3, 4],\n *   ['Q', 3, 5, 2, 1, 4, 0],\n *   ['Q', 9, 12, 2, 1, 4, 0],\n * ];\n */\nexport const parsePath = (pathString: string): TComplexPathData => {\n  const chain: TComplexPathData = [];\n  const all = pathString.match(rePathCmdAll) ?? [];\n  for (const matchStr of all) {\n    // take match string and save the first letter as the command\n    const commandLetter = matchStr[0] as TComplexParsedCommandType;\n    // in case of Z we have very little to do\n    if (commandLetter === 'z' || commandLetter === 'Z') {\n      chain.push([commandLetter]);\n      continue;\n    }\n    const commandLength =\n      commandLengths[\n        commandLetter.toLowerCase() as keyof typeof commandLengths\n      ];\n\n    let paramArr = [];\n    if (commandLetter === 'a' || commandLetter === 'A') {\n      // the arc command ha some peculariaties that requires a special regex other than numbers\n      // it is possible to avoid using a space between the sweep and large arc flags, making them either\n      // 00, 01, 10 or 11, making them identical to a plain number for the regex reMyNum\n      // reset the regexp\n      regExpArcCommandPoints.lastIndex = 0;\n      for (let out = null; (out = regExpArcCommandPoints.exec(matchStr)); ) {\n        paramArr.push(...out.slice(1));\n      }\n    } else {\n      paramArr = matchStr.match(reMyNum) || [];\n    }\n\n    // inspect the length of paramArr, if is longer than commandLength\n    // we are dealing with repeated commands\n    for (let i = 0; i < paramArr.length; i += commandLength) {\n      const newCommand = new Array(commandLength) as TComplexParsedCommand;\n      const transformedCommand = repeatedCommands[commandLetter];\n      newCommand[0] =\n        i > 0 && transformedCommand ? transformedCommand : commandLetter;\n      for (let j = 0; j < commandLength; j++) {\n        newCommand[j + 1] = parseFloat(paramArr[i + j]);\n      }\n      chain.push(newCommand);\n    }\n  }\n  return chain;\n};\n\n/**\n *\n * Converts points to a smooth SVG path\n * @param {XY[]} points Array of points\n * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n * @return {(string|number)[][]} An array of SVG path commands\n */\nexport const getSmoothPathFromPoints = (\n  points: Point[],\n  correction = 0,\n): TSimplePathData => {\n  let p1 = new Point(points[0]),\n    p2 = new Point(points[1]),\n    multSignX = 1,\n    multSignY = 0;\n  const path: TSimplePathData = [],\n    len = points.length,\n    manyPoints = len > 2;\n\n  if (manyPoints) {\n    multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n    multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n  }\n  path.push([\n    'M',\n    p1.x - multSignX * correction,\n    p1.y - multSignY * correction,\n  ]);\n  let i;\n  for (i = 1; i < len; i++) {\n    if (!p1.eq(p2)) {\n      const midPoint = p1.midPointFrom(p2);\n      // p1 is our bezier control point\n      // midpoint is our endpoint\n      // start point is p(i-1) value.\n      path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n    }\n    p1 = points[i];\n    if (i + 1 < points.length) {\n      p2 = points[i + 1];\n    }\n  }\n  if (manyPoints) {\n    multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n    multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n  }\n  path.push([\n    'L',\n    p1.x + multSignX * correction,\n    p1.y + multSignY * correction,\n  ]);\n  return path;\n};\n\n/**\n * Transform a path by transforming each segment.\n * it has to be a simplified path or it won't work.\n * WARNING: this depends from pathOffset for correct operation\n * @param {TSimplePathData} path fabricJS parsed and simplified path commands\n * @param {TMat2D} transform matrix that represent the transformation\n * @param {Point} [pathOffset] `Path.pathOffset`\n * @returns {TSimplePathData} the transformed path\n */\nexport const transformPath = (\n  path: TSimplePathData,\n  transform: TMat2D,\n  pathOffset: Point,\n): TSimplePathData => {\n  if (pathOffset) {\n    transform = multiplyTransformMatrices(transform, [\n      1,\n      0,\n      0,\n      1,\n      -pathOffset.x,\n      -pathOffset.y,\n    ]);\n  }\n  return path.map((pathSegment) => {\n    const newSegment: TSimpleParsedCommand = [...pathSegment];\n    for (let i = 1; i < pathSegment.length - 1; i += 2) {\n      // TODO: is there a way to get around casting to any?\n      const { x, y } = transformPoint(\n        {\n          x: pathSegment[i] as number,\n          y: pathSegment[i + 1] as number,\n        },\n        transform,\n      );\n      newSegment[i] = x;\n      newSegment[i + 1] = y;\n    }\n    return newSegment;\n  });\n};\n\n/**\n * Returns an array of path commands to create a regular polygon\n * @param {number} numVertexes\n * @param {number} radius\n * @returns {TSimplePathData} An array of SVG path commands\n */\nexport const getRegularPolygonPath = (\n  numVertexes: number,\n  radius: number,\n): TSimplePathData => {\n  const interiorAngle = (Math.PI * 2) / numVertexes;\n  // rotationAdjustment rotates the path by 1/2 the interior angle so that the polygon always has a flat side on the bottom\n  // This isn't strictly necessary, but it's how we tend to think of and expect polygons to be drawn\n  let rotationAdjustment = -halfPI;\n  if (numVertexes % 2 === 0) {\n    rotationAdjustment += interiorAngle / 2;\n  }\n  const d = new Array(numVertexes + 1);\n  for (let i = 0; i < numVertexes; i++) {\n    const rad = i * interiorAngle + rotationAdjustment;\n    const { x, y } = new Point(cos(rad), sin(rad)).scalarMultiply(radius);\n    d[i] = [i === 0 ? 'M' : 'L', x, y];\n  }\n  d[numVertexes] = ['Z'];\n  return d;\n};\n\n/**\n * Join path commands to go back to svg format\n * @param {TSimplePathData} pathData fabricJS parsed path commands\n * @param {number} fractionDigits number of fraction digits to \"leave\"\n * @return {String} joined path 'M 0 0 L 20 30'\n */\nexport const joinPath = (pathData: TSimplePathData, fractionDigits?: number) =>\n  pathData\n    .map((segment) => {\n      return segment\n        .map((arg, i) => {\n          if (i === 0) return arg;\n          return fractionDigits === undefined\n            ? arg\n            : toFixed(arg, fractionDigits);\n        })\n        .join(' ');\n    })\n    .join(' ');\n", "// TODO this file needs to go away, cross browser style support is not fabricjs domain.\n\n/**\n * wrapper for setting element's style\n * @param {HTMLElement} element\n * @param {Object | string} styles\n */\nexport function setStyle(\n  element: HTMLElement,\n  styles: string | Record<string, string>,\n) {\n  const elementStyle = element.style;\n  if (!elementStyle || !styles) {\n    return;\n  } else if (typeof styles === 'string') {\n    elementStyle.cssText += ';' + styles;\n  } else {\n    Object.entries(styles).forEach(([property, value]) =>\n      elementStyle.setProperty(property, value),\n    );\n  }\n}\n", "import type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { sendObjectToPlane } from './planeChange';\nimport { Group } from '../../shapes/Group';\n/**\n * Merges 2 clip paths into one visually equal clip path\n *\n * **IMPORTANT**:\\\n * Does **NOT** clone the arguments, clone them proir if necessary.\n *\n * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n *\n * In order to handle the `inverted` property we follow logic described in the following cases:\\\n * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n *\n * @memberOf fabric.util\n * @param {fabric.Object} c1\n * @param {fabric.Object} c2\n * @returns {fabric.Object} merged clip path\n */\nexport const mergeClipPaths = (c1: FabricObject, c2: FabricObject) => {\n  let a = c1,\n    b = c2;\n  if (a.inverted && !b.inverted) {\n    //  case (2)\n    a = c2;\n    b = c1;\n  }\n  //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n  sendObjectToPlane(b, b.group?.calcTransformMatrix(), a.calcTransformMatrix());\n  //  assign the `inverted` prop to the wrapping group\n  const inverted = a.inverted && b.inverted;\n  if (inverted) {\n    //  case (1)\n    a.inverted = b.inverted = false;\n  }\n  return new Group([a], { clipPath: b, inverted });\n};\n", "/**\n * Returns random number between 2 specified ones.\n * @param {Number} min lower limit\n * @param {Number} max upper limit\n * @return {Number} random value (between min and max)\n */\nexport const getRandomInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n", "import { getFabricWindow } from '../../env';\nimport { noop } from '../../constants';\nimport type { Abortable } from '../../typedefs';\nimport { SignalAbortedError } from './console';\n\ntype requestOptions = Abortable & {\n  onComplete?: (xhr: XMLHttpRequest) => void;\n};\n\n/**\n * Cross-browser abstraction for sending XMLHttpRequest\n * @deprecated this has to go away, we can use a modern browser method to do the same.\n * @param {String} url URL to send XMLHttpRequest to\n * @param {Object} [options] Options object\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @param {Function} options.onComplete Callback to invoke when request is completed\n * @return {XMLHttpRequest} request\n */\n\nexport function request(url: string, options: requestOptions = {}) {\n  const onComplete = options.onComplete || noop,\n    xhr = new (getFabricWindow().XMLHttpRequest)(),\n    signal = options.signal,\n    abort = function () {\n      xhr.abort();\n    },\n    removeListener = function () {\n      signal && signal.removeEventListener('abort', abort);\n      xhr.onerror = xhr.ontimeout = noop;\n    };\n\n  if (signal && signal.aborted) {\n    throw new SignalAbortedError('request');\n  } else if (signal) {\n    signal.addEventListener('abort', abort, { once: true });\n  }\n\n  /** @ignore */\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      removeListener();\n      onComplete(xhr);\n      xhr.onreadystatechange = noop;\n    }\n  };\n\n  xhr.onerror = xhr.ontimeout = removeListener;\n\n  xhr.open('get', url, true);\n\n  xhr.send();\n  return xhr;\n}\n", "import { CENTER, SCALE_X, SCALE_Y } from '../constants';\nimport type { FabricImage } from '../shapes/Image';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { qrDecompose } from './misc/matrix';\n\ntype FabricObjectWithTransformMatrix = FabricObject & {\n  transformMatrix?: TMat2D;\n};\n\n/**\n * This function is an helper for svg import. it decompose the transformMatrix\n * and assign properties to object.\n * untransformed coordinates\n * @private\n */\nconst _assignTransformMatrixProps = (\n  object: FabricObjectWithTransformMatrix,\n) => {\n  if (object.transformMatrix) {\n    const { scaleX, scaleY, angle, skewX } = qrDecompose(\n      object.transformMatrix,\n    );\n    object.flipX = false;\n    object.flipY = false;\n    object.set(SCALE_X, scaleX);\n    object.set(SCALE_Y, scaleY);\n    object.angle = angle;\n    object.skewX = skewX;\n    object.skewY = 0;\n  }\n};\n\n/**\n * This function is an helper for svg import. it removes the transform matrix\n * and set to object properties that fabricjs can handle\n * @private\n * @param {Object} preserveAspectRatioOptions\n */\nexport const removeTransformMatrixForSvgParsing = (\n  object: FabricObjectWithTransformMatrix,\n  preserveAspectRatioOptions?: any,\n) => {\n  let center = object._findCenterFromElement();\n  if (object.transformMatrix) {\n    _assignTransformMatrixProps(object);\n    center = center.transform(object.transformMatrix);\n  }\n  delete object.transformMatrix;\n  if (preserveAspectRatioOptions) {\n    object.scaleX *= preserveAspectRatioOptions.scaleX;\n    object.scaleY *= preserveAspectRatioOptions.scaleY;\n    (object as FabricImage).cropX = preserveAspectRatioOptions.cropX;\n    (object as FabricImage).cropY = preserveAspectRatioOptions.cropY;\n    center.x += preserveAspectRatioOptions.offsetLeft;\n    center.y += preserveAspectRatioOptions.offsetTop;\n    object.width = preserveAspectRatioOptions.width;\n    object.height = preserveAspectRatioOptions.height;\n  }\n  object.setPositionByOrigin(center, CENTER, CENTER);\n};\n", "import type { Point } from '../../Point';\nimport type { TRadian } from '../../typedefs';\n/**\n * Rotates `point` around `origin` with `radians`\n * @deprecated use the Point.rotate\n * @param {Point} origin The origin of the rotation\n * @param {Point} origin The origin of the rotation\n * @param {TRadian} radians The radians of the angle for the rotation\n * @return {Point} The new rotated point\n */\nexport const rotatePoint = (\n  point: Point,\n  origin: Point,\n  radians: TRadian,\n): Point => point.rotate(radians, origin);\n", "import { getEnv, getFabricDocument } from '../../env';\nimport type { TSize } from '../../typedefs';\nimport { createCanvasElement, setStyle } from '../../util';\nimport type { CSSDimensions } from './util';\nimport { makeElementUnselectable, setCSSDimensions } from './util';\nimport type { CanvasItem } from './StaticCanvasDOMManager';\nimport { StaticCanvasDOMManager } from './StaticCanvasDOMManager';\nimport { setCanvasDimensions } from './util';\nimport { NONE } from '../../constants';\n\nexport class CanvasDOMManager extends StaticCanvasDOMManager {\n  upper: CanvasItem;\n  container: HTMLDivElement;\n\n  constructor(\n    arg0?: string | HTMLCanvasElement,\n    {\n      allowTouchScrolling = false,\n      containerClass = '',\n    }: {\n      allowTouchScrolling?: boolean;\n      /**\n       * @deprecated here only for backward compatibility\n       */\n      containerClass?: string;\n    } = {},\n  ) {\n    super(arg0);\n    const { el: lowerCanvasEl } = this.lower;\n    const upperCanvasEl = this.createUpperCanvas();\n    this.upper = { el: upperCanvasEl, ctx: upperCanvasEl.getContext('2d')! };\n    this.applyCanvasStyle(lowerCanvasEl, {\n      allowTouchScrolling,\n    });\n    this.applyCanvasStyle(upperCanvasEl, {\n      allowTouchScrolling,\n      styles: {\n        position: 'absolute',\n        left: '0',\n        top: '0',\n      },\n    });\n    const container = this.createContainerElement();\n    container.classList.add(containerClass);\n    if (lowerCanvasEl.parentNode) {\n      lowerCanvasEl.parentNode.replaceChild(container, lowerCanvasEl);\n    }\n    container.append(lowerCanvasEl, upperCanvasEl);\n    this.container = container;\n  }\n\n  protected createUpperCanvas() {\n    const { el: lowerCanvasEl } = this.lower;\n    const el = createCanvasElement();\n    // we assign the same classname of the lowerCanvas\n    el.className = lowerCanvasEl.className;\n    // but then we remove the lower-canvas specific className\n    el.classList.remove('lower-canvas');\n    // we add the specific upper-canvas class\n    el.classList.add('upper-canvas');\n    el.setAttribute('data-fabric', 'top');\n    el.style.cssText = lowerCanvasEl.style.cssText;\n    el.setAttribute('draggable', 'true');\n    return el;\n  }\n\n  protected createContainerElement() {\n    const container = getFabricDocument().createElement('div');\n    container.setAttribute('data-fabric', 'wrapper');\n    setStyle(container, {\n      position: 'relative',\n    });\n    makeElementUnselectable(container);\n    return container;\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} element canvas element to apply styles on\n   */\n  protected applyCanvasStyle(\n    element: HTMLCanvasElement,\n    options: {\n      allowTouchScrolling?: boolean;\n      styles?: Record<string, string>;\n    },\n  ) {\n    const { styles, allowTouchScrolling } = options;\n    setStyle(element, {\n      ...styles,\n      'touch-action': allowTouchScrolling ? 'manipulation' : NONE,\n    });\n    makeElementUnselectable(element);\n  }\n\n  setDimensions(size: TSize, retinaScaling: number) {\n    super.setDimensions(size, retinaScaling);\n    const { el, ctx } = this.upper;\n    setCanvasDimensions(el, ctx, size, retinaScaling);\n  }\n\n  setCSSDimensions(size: Partial<CSSDimensions>): void {\n    super.setCSSDimensions(size);\n    setCSSDimensions(this.upper.el, size);\n    setCSSDimensions(this.container, size);\n  }\n\n  cleanupDOM(size: TSize) {\n    const container = this.container,\n      { el: lowerCanvasEl } = this.lower,\n      { el: upperCanvasEl } = this.upper;\n    super.cleanupDOM(size);\n    container.removeChild(upperCanvasEl);\n    container.removeChild(lowerCanvasEl);\n    if (container.parentNode) {\n      container.parentNode.replaceChild(lowerCanvasEl, container);\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    getEnv().dispose(this.upper.el);\n    // @ts-expect-error disposing\n    delete this.upper;\n    // @ts-expect-error disposing\n    delete this.container;\n  }\n}\n", "import { dragHandler } from '../controls/drag';\nimport { getActionFromCorner } from '../controls/util';\nimport { Point } from '../Point';\nimport { FabricObject } from '../shapes/Object/FabricObject';\nimport type {\n  CanvasEvents,\n  ModifierKey,\n  TOptionalModifierKey,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport {\n  addTransformToObject,\n  saveObjectTransform,\n} from '../util/misc/objectTransforms';\nimport type { TCanvasSizeOptions } from './StaticCanvas';\nimport { StaticCanvas } from './StaticCanvas';\nimport { isCollection } from '../Collection';\nimport { isTransparent } from '../util/misc/isTransparent';\nimport type {\n  TMat2D,\n  TOriginX,\n  TOriginY,\n  TSize,\n  TSVGReviver,\n} from '../typedefs';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { getPointer, isTouchEvent } from '../util/dom_event';\nimport type { IText } from '../shapes/IText/IText';\nimport type { BaseBrush } from '../brushes/BaseBrush';\nimport { pick } from '../util/misc/pick';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { cos, createCanvasElement, sin } from '../util';\nimport { CanvasDOMManager } from './DOMManagers/CanvasDOMManager';\nimport {\n  BOTTOM,\n  CENTER,\n  LEFT,\n  MODIFIED,\n  RESIZING,\n  RIGHT,\n  ROTATE,\n  SCALE,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CanvasOptions } from './CanvasOptions';\nimport { canvasDefaults } from './CanvasOptions';\nimport { Intersection } from '../Intersection';\nimport { isActiveSelection } from '../util/typeAssertions';\n\n/**\n * Canvas class\n * @class Canvas\n * @extends StaticCanvas\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n *\n * @fires object:modified at the end of a transform\n * @fires object:rotating while an object is being rotated from the control\n * @fires object:scaling while an object is being scaled by controls\n * @fires object:moving while an object is being dragged\n * @fires object:skewing while an object is being skewed from the controls\n *\n * @fires before:transform before a transform is is started\n * @fires before:selection:cleared\n * @fires selection:cleared\n * @fires selection:updated\n * @fires selection:created\n *\n * @fires path:created after a drawing operation ends and the path is added\n * @fires mouse:down\n * @fires mouse:move\n * @fires mouse:up\n * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n * @fires mouse:over\n * @fires mouse:out\n * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n *\n * @fires dragover\n * @fires dragenter\n * @fires dragleave\n * @fires drag:enter object drag enter\n * @fires drag:leave object drag leave\n * @fires drop:before before drop event. Prepare for the drop event (same native event).\n * @fires drop\n * @fires drop:after after drop event. Run logic on canvas after event has been accepted/declined (same native event).\n * @example\n * let a: fabric.Object, b: fabric.Object;\n * let flag = false;\n * canvas.add(a, b);\n * a.on('drop:before', opt => {\n *  //  we want a to accept the drop even though it's below b in the stack\n *  flag = this.canDrop(opt.e);\n * });\n * b.canDrop = function(e) {\n *  !flag && this.draggableTextDelegate.canDrop(e);\n * }\n * b.on('dragover', opt => b.set('fill', opt.dropTarget === b ? 'pink' : 'black'));\n * a.on('drop', opt => {\n *  opt.e.defaultPrevented  //  drop occurred\n *  opt.didDrop             //  drop occurred on canvas\n *  opt.target              //  drop target\n *  opt.target !== a && a.set('text', 'I lost');\n * });\n * canvas.on('drop:after', opt => {\n *  //  inform user who won\n *  if(!opt.e.defaultPrevented) {\n *    // no winners\n *  }\n *  else if(!opt.didDrop) {\n *    //  my objects didn't win, some other lucky object\n *  }\n *  else {\n *    //  we have a winner it's opt.target!!\n *  }\n * })\n *\n * @fires after:render at the end of the render process, receives the context in the callback\n * @fires before:render at start the render process, receives the context in the callback\n *\n * @fires contextmenu:before\n * @fires contextmenu\n * @example\n * let handler;\n * targets.forEach(target => {\n *   target.on('contextmenu:before', opt => {\n *     //  decide which target should handle the event before canvas hijacks it\n *     if (someCaseHappens && opt.targets.includes(target)) {\n *       handler = target;\n *     }\n *   });\n *   target.on('contextmenu', opt => {\n *     //  do something fantastic\n *   });\n * });\n * canvas.on('contextmenu', opt => {\n *   if (!handler) {\n *     //  no one takes responsibility, it's always left to me\n *     //  let's show them how it's done!\n *   }\n * });\n *\n */\nexport class SelectableCanvas<EventSpec extends CanvasEvents = CanvasEvents>\n  extends StaticCanvas<EventSpec>\n  implements Omit<CanvasOptions, 'enablePointerEvents'>\n{\n  declare _objects: FabricObject[];\n\n  // transform config\n  declare uniformScaling: boolean;\n  declare uniScaleKey: TOptionalModifierKey;\n  declare centeredScaling: boolean;\n  declare centeredRotation: boolean;\n  declare centeredKey: TOptionalModifierKey;\n  declare altActionKey: TOptionalModifierKey;\n\n  // selection config\n  declare selection: boolean;\n  declare selectionKey: TOptionalModifierKey | ModifierKey[];\n  declare altSelectionKey: TOptionalModifierKey;\n  declare selectionColor: string;\n  declare selectionDashArray: number[];\n  declare selectionBorderColor: string;\n  declare selectionLineWidth: number;\n  declare selectionFullyContained: boolean;\n\n  // cursors\n  declare hoverCursor: CSSStyleDeclaration['cursor'];\n  declare moveCursor: CSSStyleDeclaration['cursor'];\n  declare defaultCursor: CSSStyleDeclaration['cursor'];\n  declare freeDrawingCursor: CSSStyleDeclaration['cursor'];\n  declare notAllowedCursor: CSSStyleDeclaration['cursor'];\n\n  declare containerClass: string;\n\n  // target find config\n  declare perPixelTargetFind: boolean;\n  declare targetFindTolerance: number;\n  declare skipTargetFind: boolean;\n\n  /**\n   * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n   * After mousedown, mousemove creates a shape,\n   * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n   * @type Boolean\n   * @default\n   */\n  declare isDrawingMode: boolean;\n\n  declare preserveObjectStacking: boolean;\n\n  // event config\n  declare stopContextMenu: boolean;\n  declare fireRightClick: boolean;\n  declare fireMiddleClick: boolean;\n\n  /**\n   * Keep track of the subTargets for Mouse Events, ordered bottom up from innermost nested subTarget\n   * @type FabricObject[]\n   */\n  targets: FabricObject[] = [];\n\n  /**\n   * Keep track of the hovered target\n   * @type FabricObject | null\n   * @private\n   */\n  declare _hoveredTarget?: FabricObject;\n\n  /**\n   * hold the list of nested targets hovered\n   * @type FabricObject[]\n   * @private\n   */\n  _hoveredTargets: FabricObject[] = [];\n\n  /**\n   * hold the list of objects to render\n   * @type FabricObject[]\n   * @private\n   */\n  _objectsToRender?: FabricObject[];\n\n  /**\n   * hold a reference to a data structure that contains information\n   * on the current on going transform\n   * @type\n   * @private\n   */\n  _currentTransform: Transform | null = null;\n\n  /**\n   * hold a reference to a data structure used to track the selection\n   * box on canvas drag\n   * on the current on going transform\n   * x, y, deltaX and deltaY are in scene plane\n   * @type\n   * @private\n   */\n  protected _groupSelector: {\n    x: number;\n    y: number;\n    deltaX: number;\n    deltaY: number;\n  } | null = null;\n\n  /**\n   * internal flag used to understand if the context top requires a cleanup\n   * in case this is true, the contextTop will be cleared at the next render\n   * @type boolean\n   * @private\n   */\n  contextTopDirty = false;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _absolutePointer holds a reference to the pointer in fabricCanvas/design coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _absolutePointer?: Point;\n\n  /**\n   * During a mouse event we may need the pointer multiple times in multiple functions.\n   * _pointer holds a reference to the pointer in html coordinates that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * We do this because there are some HTML DOM inspection functions to get the actual pointer coordinates\n   * @type {Point}\n   */\n  protected declare _pointer?: Point;\n\n  /**\n   * During a mouse event we may need the target multiple times in multiple functions.\n   * _target holds a reference to the target that is valid for the event\n   * lifespan. Every fabricJS mouse event create and delete the cache every time\n   * @type {FabricObject}\n   */\n  protected declare _target?: FabricObject;\n\n  static ownDefaults = canvasDefaults;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...SelectableCanvas.ownDefaults };\n  }\n\n  declare elements: CanvasDOMManager;\n  get upperCanvasEl() {\n    return this.elements.upper?.el;\n  }\n  get contextTop() {\n    return this.elements.upper?.ctx;\n  }\n  get wrapperEl() {\n    return this.elements.container;\n  }\n  private declare pixelFindCanvasEl: HTMLCanvasElement;\n  private declare pixelFindContext: CanvasRenderingContext2D;\n\n  protected declare _isCurrentlyDrawing: boolean;\n  declare freeDrawingBrush?: BaseBrush;\n  declare _activeObject?: FabricObject;\n\n  protected initElements(el?: string | HTMLCanvasElement) {\n    this.elements = new CanvasDOMManager(el, {\n      allowTouchScrolling: this.allowTouchScrolling,\n      containerClass: this.containerClass,\n    });\n    this._createCacheCanvas();\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was added\n   */\n  _onObjectAdded(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    super._onObjectAdded(obj);\n  }\n\n  /**\n   * @private\n   * @param {FabricObject} obj Object that was removed\n   */\n  _onObjectRemoved(obj: FabricObject) {\n    this._objectsToRender = undefined;\n    // removing active object should fire \"selection:cleared\" events\n    if (obj === this._activeObject) {\n      this.fire('before:selection:cleared', { deselected: [obj] });\n      this._discardActiveObject();\n      this.fire('selection:cleared', { deselected: [obj] });\n      obj.fire('deselected', {\n        target: obj,\n      });\n    }\n    if (obj === this._hoveredTarget) {\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n    super._onObjectRemoved(obj);\n  }\n\n  _onStackOrderChanged() {\n    this._objectsToRender = undefined;\n    super._onStackOrderChanged();\n  }\n\n  /**\n   * Divides objects in two groups, one to render immediately\n   * and one to render as activeGroup.\n   * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n   */\n  _chooseObjectsToRender(): FabricObject[] {\n    const activeObject = this._activeObject;\n    return !this.preserveObjectStacking && activeObject\n      ? this._objects\n          .filter((object) => !object.group && object !== activeObject)\n          .concat(activeObject)\n      : this._objects;\n  }\n\n  /**\n   * Renders both the top canvas and the secondary container canvas.\n   */\n  renderAll() {\n    this.cancelRequestedRender();\n    if (this.destroyed) {\n      return;\n    }\n    if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n      this.clearContext(this.contextTop);\n      this.contextTopDirty = false;\n    }\n    if (this.hasLostContext) {\n      this.renderTopLayer(this.contextTop);\n      this.hasLostContext = false;\n    }\n    !this._objectsToRender &&\n      (this._objectsToRender = this._chooseObjectsToRender());\n    this.renderCanvas(this.getContext(), this._objectsToRender);\n  }\n\n  /**\n   * text selection is rendered by the active text instance during the rendering cycle\n   */\n  renderTopLayer(ctx: CanvasRenderingContext2D): void {\n    ctx.save();\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this.freeDrawingBrush && this.freeDrawingBrush._render();\n      this.contextTopDirty = true;\n    }\n    // we render the top context - last object\n    if (this.selection && this._groupSelector) {\n      this._drawSelection(ctx);\n      this.contextTopDirty = true;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Method to render only the top canvas.\n   * Also used to render the group selection box.\n   * Does not render text selection.\n   */\n  renderTop() {\n    const ctx = this.contextTop;\n    this.clearContext(ctx);\n    this.renderTopLayer(ctx);\n    // todo: how do i know if the after:render is for the top or normal contex?\n    this.fire('after:render', { ctx });\n  }\n\n  /**\n   * Set the canvas tolerance value for pixel taret find.\n   * Use only integer numbers.\n   * @private\n   */\n  setTargetFindTolerance(value: number) {\n    value = Math.round(value);\n    this.targetFindTolerance = value;\n    const retina = this.getRetinaScaling();\n    const size = Math.ceil((value * 2 + 1) * retina);\n    this.pixelFindCanvasEl.width = this.pixelFindCanvasEl.height = size;\n    this.pixelFindContext.scale(retina, retina);\n  }\n\n  /**\n   * Returns true if object is transparent at a certain location\n   * Clarification: this is `is target transparent at location X or are controls there`\n   * @TODO this seems dumb that we treat controls with transparency. we can find controls\n   * programmatically without painting them, the cache canvas optimization is always valid\n   * @param {FabricObject} target Object to check\n   * @param {Number} x Left coordinate in viewport space\n   * @param {Number} y Top coordinate in viewport space\n   * @return {Boolean}\n   */\n  isTargetTransparent(target: FabricObject, x: number, y: number): boolean {\n    const tolerance = this.targetFindTolerance;\n    const ctx = this.pixelFindContext;\n    this.clearContext(ctx);\n    ctx.save();\n    ctx.translate(-x + tolerance, -y + tolerance);\n    ctx.transform(...this.viewportTransform);\n    const selectionBgc = target.selectionBackgroundColor;\n    target.selectionBackgroundColor = '';\n    target.render(ctx);\n    target.selectionBackgroundColor = selectionBgc;\n    ctx.restore();\n    // our canvas is square, and made around tolerance.\n    // so tolerance in this case also represent the center of the canvas.\n    const enhancedTolerance = Math.round(tolerance * this.getRetinaScaling());\n    return isTransparent(\n      ctx,\n      enhancedTolerance,\n      enhancedTolerance,\n      enhancedTolerance,\n    );\n  }\n\n  /**\n   * takes an event and determines if selection key has been pressed\n   * @private\n   * @param {TPointerEvent} e Event object\n   */\n  _isSelectionKeyPressed(e: TPointerEvent): boolean {\n    const sKey = this.selectionKey;\n    if (!sKey) {\n      return false;\n    }\n    if (Array.isArray(sKey)) {\n      return !!sKey.find((key) => !!key && e[key] === true);\n    } else {\n      return e[sKey];\n    }\n  }\n\n  /**\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target\n   */\n  _shouldClearSelection(\n    e: TPointerEvent,\n    target?: FabricObject,\n  ): target is undefined {\n    const activeObjects = this.getActiveObjects(),\n      activeObject = this._activeObject;\n\n    return !!(\n      !target ||\n      (target &&\n        activeObject &&\n        activeObjects.length > 1 &&\n        activeObjects.indexOf(target) === -1 &&\n        activeObject !== target &&\n        !this._isSelectionKeyPressed(e)) ||\n      (target && !target.evented) ||\n      (target && !target.selectable && activeObject && activeObject !== target)\n    );\n  }\n\n  /**\n   * This method will take in consideration a modifier key pressed and the control we are\n   * about to drag, and try to guess the anchor point ( origin ) of the transormation.\n   * This should be really in the realm of controls, and we should remove specific code for legacy\n   * embedded actions.\n   * @TODO this probably deserve discussion/rediscovery and change/refactor\n   * @private\n   * @deprecated\n   * @param {FabricObject} target\n   * @param {string} action\n   * @param {boolean} altKey\n   * @returns {boolean} true if the transformation should be centered\n   */\n  private _shouldCenterTransform(\n    target: FabricObject,\n    action: string,\n    modifierKeyPressed: boolean,\n  ) {\n    if (!target) {\n      return;\n    }\n\n    let centerTransform;\n\n    if (\n      action === SCALE ||\n      action === SCALE_X ||\n      action === SCALE_Y ||\n      action === RESIZING\n    ) {\n      centerTransform = this.centeredScaling || target.centeredScaling;\n    } else if (action === ROTATE) {\n      centerTransform = this.centeredRotation || target.centeredRotation;\n    }\n\n    return centerTransform ? !modifierKeyPressed : modifierKeyPressed;\n  }\n\n  /**\n   * Given the control clicked, determine the origin of the transform.\n   * This is bad because controls can totally have custom names\n   * should disappear before release 4.0\n   * @private\n   * @deprecated\n   */\n  _getOriginFromCorner(\n    target: FabricObject,\n    controlName: string,\n  ): { x: TOriginX; y: TOriginY } {\n    const origin = {\n      x: target.originX,\n      y: target.originY,\n    };\n\n    if (!controlName) {\n      return origin;\n    }\n\n    // is a left control ?\n    if (['ml', 'tl', 'bl'].includes(controlName)) {\n      origin.x = RIGHT;\n      // is a right control ?\n    } else if (['mr', 'tr', 'br'].includes(controlName)) {\n      origin.x = LEFT;\n    }\n    // is a top control ?\n    if (['tl', 'mt', 'tr'].includes(controlName)) {\n      origin.y = BOTTOM;\n      // is a bottom control ?\n    } else if (['bl', 'mb', 'br'].includes(controlName)) {\n      origin.y = TOP;\n    }\n    return origin;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object\n   * @param {FabricObject} target\n   * @param {boolean} [alreadySelected] pass true to setup the active control\n   */\n  _setupCurrentTransform(\n    e: TPointerEvent,\n    target: FabricObject,\n    alreadySelected: boolean,\n  ): void {\n    const pointer = target.group\n      ? // transform pointer to target's containing coordinate plane\n        sendPointToPlane(\n          this.getScenePoint(e),\n          undefined,\n          target.group.calcTransformMatrix(),\n        )\n      : this.getScenePoint(e);\n    const { key: corner = '', control } = target.getActiveControl() || {},\n      actionHandler =\n        alreadySelected && control\n          ? control.getActionHandler(e, target, control)?.bind(control)\n          : dragHandler,\n      action = getActionFromCorner(alreadySelected, corner, e, target),\n      altKey = e[this.centeredKey as ModifierKey],\n      origin = this._shouldCenterTransform(target, action, altKey)\n        ? ({ x: CENTER, y: CENTER } as const)\n        : this._getOriginFromCorner(target, corner),\n      /**\n       * relative to target's containing coordinate plane\n       * both agree on every point\n       **/\n      transform: Transform = {\n        target: target,\n        action,\n        actionHandler,\n        actionPerformed: false,\n        corner,\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        offsetX: pointer.x - target.left,\n        offsetY: pointer.y - target.top,\n        originX: origin.x,\n        originY: origin.y,\n        ex: pointer.x,\n        ey: pointer.y,\n        lastX: pointer.x,\n        lastY: pointer.y,\n        theta: degreesToRadians(target.angle),\n        width: target.width,\n        height: target.height,\n        shiftKey: e.shiftKey,\n        altKey,\n        original: {\n          ...saveObjectTransform(target),\n          originX: origin.x,\n          originY: origin.y,\n        },\n      };\n\n    this._currentTransform = transform;\n\n    this.fire('before:transform', {\n      e,\n      transform,\n    });\n  }\n\n  /**\n   * Set the cursor type of the canvas element\n   * @param {String} value Cursor type of the canvas element.\n   * @see http://www.w3.org/TR/css3-ui/#cursor\n   */\n  setCursor(value: CSSStyleDeclaration['cursor']): void {\n    this.upperCanvasEl.style.cursor = value;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx to draw the selection on\n   */\n  _drawSelection(ctx: CanvasRenderingContext2D): void {\n    const { x, y, deltaX, deltaY } = this._groupSelector!,\n      start = new Point(x, y).transform(this.viewportTransform),\n      extent = new Point(x + deltaX, y + deltaY).transform(\n        this.viewportTransform,\n      ),\n      strokeOffset = this.selectionLineWidth / 2;\n    let minX = Math.min(start.x, extent.x),\n      minY = Math.min(start.y, extent.y),\n      maxX = Math.max(start.x, extent.x),\n      maxY = Math.max(start.y, extent.y);\n\n    if (this.selectionColor) {\n      ctx.fillStyle = this.selectionColor;\n      ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n    }\n\n    if (!this.selectionLineWidth || !this.selectionBorderColor) {\n      return;\n    }\n    ctx.lineWidth = this.selectionLineWidth;\n    ctx.strokeStyle = this.selectionBorderColor;\n\n    minX += strokeOffset;\n    minY += strokeOffset;\n    maxX -= strokeOffset;\n    maxY -= strokeOffset;\n    // selection border\n    // @TODO: is _setLineDash still necessary on modern canvas?\n    FabricObject.prototype._setLineDash.call(\n      this,\n      ctx,\n      this.selectionDashArray,\n    );\n    ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n  }\n\n  /**\n   * Method that determines what object we are clicking on\n   * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n   * or the outside part of the corner.\n   * @param {Event} e mouse event\n   * @return {FabricObject | null} the target found\n   */\n  findTarget(e: TPointerEvent): FabricObject | undefined {\n    if (this.skipTargetFind) {\n      return undefined;\n    }\n\n    const pointer = this.getViewportPoint(e),\n      activeObject = this._activeObject,\n      aObjects = this.getActiveObjects();\n\n    this.targets = [];\n\n    if (activeObject && aObjects.length >= 1) {\n      if (activeObject.findControl(pointer, isTouchEvent(e))) {\n        // if we hit the corner of the active object, let's return that.\n        return activeObject;\n      } else if (\n        aObjects.length > 1 &&\n        // check pointer is over active selection and possibly perform `subTargetCheck`\n        this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active selection does not select sub targets like normal groups\n        return activeObject;\n      } else if (\n        activeObject === this.searchPossibleTargets([activeObject], pointer)\n      ) {\n        // active object is not an active selection\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        } else {\n          const subTargets = this.targets;\n          this.targets = [];\n          const target = this.searchPossibleTargets(this._objects, pointer);\n          if (\n            e[this.altSelectionKey as ModifierKey] &&\n            target &&\n            target !== activeObject\n          ) {\n            // alt selection: select active object even though it is not the top most target\n            // restore targets\n            this.targets = subTargets;\n            return activeObject;\n          }\n          return target;\n        }\n      }\n    }\n\n    return this.searchPossibleTargets(this._objects, pointer);\n  }\n\n  /**\n   * Checks if the point is inside the object selection area including padding\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point in scene coordinates\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  private _pointIsInObjectSelectionArea(obj: FabricObject, point: Point) {\n    // getCoords will already take care of group de-nesting\n    let coords = obj.getCoords();\n    const viewportZoom = this.getZoom();\n    const padding = obj.padding / viewportZoom;\n    if (padding) {\n      const [tl, tr, br, bl] = coords;\n      // what is the angle of the object?\n      // we could use getTotalAngle, but is way easier to look at it\n      // from how coords are oriented, since if something went wrong\n      // at least we are consistent.\n      const angleRadians = Math.atan2(tr.y - tl.y, tr.x - tl.x),\n        cosP = cos(angleRadians) * padding,\n        sinP = sin(angleRadians) * padding,\n        cosPSinP = cosP + sinP,\n        cosPMinusSinP = cosP - sinP;\n\n      coords = [\n        new Point(tl.x - cosPMinusSinP, tl.y - cosPSinP),\n        new Point(tr.x + cosPSinP, tr.y - cosPMinusSinP),\n        new Point(br.x + cosPMinusSinP, br.y + cosPSinP),\n        new Point(bl.x - cosPSinP, bl.y + cosPMinusSinP),\n      ];\n      // in case of padding we calculate the new coords on the fly.\n      // otherwise we have to maintain 2 sets of coordinates for everything.\n      // we can reiterate on storing them.\n      // if this is slow, for now the semplification is large and doesn't impact\n      // rendering.\n      // the idea behind this is that outside target check we don't need ot know\n      // where those coords are\n    }\n    return Intersection.isPointInPolygon(point, coords);\n  }\n\n  /**\n   * Checks point is inside the object selection condition. Either area with padding\n   * or over pixels if perPixelTargetFind is enabled\n   * @param {FabricObject} obj Object to test against\n   * @param {Object} [pointer] point from viewport.\n   * @return {Boolean} true if point is contained within an area of given object\n   * @private\n   */\n  _checkTarget(obj: FabricObject, pointer: Point): boolean {\n    if (\n      obj &&\n      obj.visible &&\n      obj.evented &&\n      this._pointIsInObjectSelectionArea(\n        obj,\n        sendPointToPlane(pointer, undefined, this.viewportTransform),\n      )\n    ) {\n      if (\n        (this.perPixelTargetFind || obj.perPixelTargetFind) &&\n        !(obj as unknown as IText).isEditing\n      ) {\n        if (!this.isTargetTransparent(obj, pointer.x, pointer.y)) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Internal Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @param {Array} [objects] objects array to look into\n   * @param {Object} [pointer] x,y object of point coordinates we want to check.\n   * @return {FabricObject} **top most object from given `objects`** that contains pointer\n   * @private\n   */\n  _searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    // Cache all targets where their bounding box contains point.\n    let i = objects.length;\n    // Do not check for currently grouped objects, since we check the parent group itself.\n    // until we call this function specifically to search inside the activeGroup\n    while (i--) {\n      const target = objects[i];\n      if (this._checkTarget(target, pointer)) {\n        if (isCollection(target) && target.subTargetCheck) {\n          const subTarget = this._searchPossibleTargets(\n            target._objects as FabricObject[],\n            pointer,\n          );\n          subTarget && this.targets.push(subTarget);\n        }\n        return target;\n      }\n    }\n  }\n\n  /**\n   * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n   * @see {@link _searchPossibleTargets}\n   * @param {FabricObject[]} [objects] objects array to look into\n   * @param {Point} [pointer] coordinates from viewport to check.\n   * @return {FabricObject} **top most object on screen** that contains pointer\n   */\n  searchPossibleTargets(\n    objects: FabricObject[],\n    pointer: Point,\n  ): FabricObject | undefined {\n    const target = this._searchPossibleTargets(objects, pointer);\n\n    // if we found something in this.targets, and the group is interactive, return the innermost subTarget\n    // that is still interactive\n    // TODO: reverify why interactive. the target should be returned always, but selected only\n    // if interactive.\n    if (\n      target &&\n      isCollection(target) &&\n      target.interactive &&\n      this.targets[0]\n    ) {\n      /** targets[0] is the innermost nested target, but it could be inside non interactive groups and so not a selection target */\n      const targets = this.targets;\n      for (let i = targets.length - 1; i > 0; i--) {\n        const t = targets[i];\n        if (!(isCollection(t) && t.interactive)) {\n          // one of the subtargets was not interactive. that is the last subtarget we can return.\n          // we can't dig more deep;\n          return t;\n        }\n      }\n      return targets[0];\n    }\n\n    return target;\n  }\n\n  /**\n   * @returns point existing in the same plane as the {@link HTMLCanvasElement},\n   * `(0, 0)` being the top left corner of the {@link HTMLCanvasElement}.\n   * This means that changes to the {@link viewportTransform} do not change the values of the point\n   * and it remains unchanged from the viewer's perspective.\n   *\n   * @example\n   * const scenePoint = sendPointToPlane(\n   *  this.getViewportPoint(e),\n   *  undefined,\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getViewportPoint(e: TPointerEvent) {\n    if (this._pointer) {\n      return this._pointer;\n    }\n    return this.getPointer(e, true);\n  }\n\n  /**\n   * @returns point existing in the scene (the same plane as the plane {@link FabricObject#getCenterPoint} exists in).\n   * This means that changes to the {@link viewportTransform} do not change the values of the point,\n   * however, from the viewer's perspective, the point is changed.\n   *\n   * @example\n   * const viewportPoint = sendPointToPlane(\n   *  this.getScenePoint(e),\n   *  canvas.viewportTransform\n   * );\n   *\n   */\n  getScenePoint(e: TPointerEvent) {\n    if (this._absolutePointer) {\n      return this._absolutePointer;\n    }\n    return this.getPointer(e);\n  }\n\n  /**\n   * Returns pointer relative to canvas.\n   *\n   * @deprecated This method is deprecated since v6 to protect you from misuse.\n   * Use {@link getViewportPoint} or {@link getScenePoint} instead.\n   *\n   * @param {Event} e\n   * @param {Boolean} [fromViewport] whether to return the point from the viewport or in the scene\n   * @return {Point}\n   */\n  getPointer(e: TPointerEvent, fromViewport = false): Point {\n    const upperCanvasEl = this.upperCanvasEl,\n      bounds = upperCanvasEl.getBoundingClientRect();\n    let pointer = getPointer(e),\n      boundsWidth = bounds.width || 0,\n      boundsHeight = bounds.height || 0;\n\n    if (!boundsWidth || !boundsHeight) {\n      if (TOP in bounds && BOTTOM in bounds) {\n        boundsHeight = Math.abs(bounds.top - bounds.bottom);\n      }\n      if (RIGHT in bounds && LEFT in bounds) {\n        boundsWidth = Math.abs(bounds.right - bounds.left);\n      }\n    }\n\n    this.calcOffset();\n    pointer.x = pointer.x - this._offset.left;\n    pointer.y = pointer.y - this._offset.top;\n    if (!fromViewport) {\n      pointer = sendPointToPlane(pointer, undefined, this.viewportTransform);\n    }\n\n    const retinaScaling = this.getRetinaScaling();\n    if (retinaScaling !== 1) {\n      pointer.x /= retinaScaling;\n      pointer.y /= retinaScaling;\n    }\n\n    // If bounds are not available (i.e. not visible), do not apply scale.\n    const cssScale =\n      boundsWidth === 0 || boundsHeight === 0\n        ? new Point(1, 1)\n        : new Point(\n            upperCanvasEl.width / boundsWidth,\n            upperCanvasEl.height / boundsHeight,\n          );\n\n    return pointer.multiply(cssScale);\n  }\n\n  /**\n   * Internal use only\n   * @protected\n   */\n  protected _setDimensionsImpl(\n    dimensions: TSize,\n    options?: TCanvasSizeOptions,\n  ) {\n    // @ts-expect-error this method exists in the subclass - should be moved or declared as abstract\n    this._resetTransformEventData();\n    super._setDimensionsImpl(dimensions, options);\n    if (this._isCurrentlyDrawing) {\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush._setBrushStyles(this.contextTop);\n    }\n  }\n\n  protected _createCacheCanvas() {\n    this.pixelFindCanvasEl = createCanvasElement();\n    this.pixelFindContext = this.pixelFindCanvasEl.getContext('2d', {\n      willReadFrequently: true,\n    })!;\n    this.setTargetFindTolerance(this.targetFindTolerance);\n  }\n\n  /**\n   * Returns context of top canvas where interactions are drawn\n   * @returns {CanvasRenderingContext2D}\n   */\n  getTopContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns context of canvas where object selection is drawn\n   * @alias\n   * @return {CanvasRenderingContext2D}\n   */\n  getSelectionContext(): CanvasRenderingContext2D {\n    return this.elements.upper.ctx;\n  }\n\n  /**\n   * Returns &lt;canvas> element on which object selection is drawn\n   * @return {HTMLCanvasElement}\n   */\n  getSelectionElement(): HTMLCanvasElement {\n    return this.elements.upper.el;\n  }\n\n  /**\n   * Returns currently active object\n   * @return {FabricObject | null} active object\n   */\n  getActiveObject(): FabricObject | undefined {\n    return this._activeObject;\n  }\n\n  /**\n   * Returns an array with the current selected objects\n   * @return {FabricObject[]} active objects array\n   */\n  getActiveObjects(): FabricObject[] {\n    const active = this._activeObject;\n    return isActiveSelection(active)\n      ? active.getObjects()\n      : active\n        ? [active]\n        : [];\n  }\n\n  /**\n   * @private\n   * Compares the old activeObject with the current one and fires correct events\n   * @param {FabricObject[]} oldObjects old activeObject\n   * @param {TPointerEvent} e mouse event triggering the selection events\n   */\n  _fireSelectionEvents(oldObjects: FabricObject[], e?: TPointerEvent) {\n    let somethingChanged = false,\n      invalidate = false;\n    const objects = this.getActiveObjects(),\n      added: FabricObject[] = [],\n      removed: FabricObject[] = [];\n\n    oldObjects.forEach((target) => {\n      if (!objects.includes(target)) {\n        somethingChanged = true;\n        target.fire('deselected', {\n          e,\n          target,\n        });\n        removed.push(target);\n      }\n    });\n\n    objects.forEach((target) => {\n      if (!oldObjects.includes(target)) {\n        somethingChanged = true;\n        target.fire('selected', {\n          e,\n          target,\n        });\n        added.push(target);\n      }\n    });\n\n    if (oldObjects.length > 0 && objects.length > 0) {\n      invalidate = true;\n      somethingChanged &&\n        this.fire('selection:updated', {\n          e,\n          selected: added,\n          deselected: removed,\n        });\n    } else if (objects.length > 0) {\n      invalidate = true;\n      this.fire('selection:created', {\n        e,\n        selected: added,\n      });\n    } else if (oldObjects.length > 0) {\n      invalidate = true;\n      this.fire('selection:cleared', {\n        e,\n        deselected: removed,\n      });\n    }\n    invalidate && (this._objectsToRender = undefined);\n  }\n\n  /**\n   * Sets given object as the only active object on canvas\n   * @param {FabricObject} object Object to set as an active one\n   * @param {TPointerEvent} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    // we can't inline this, since _setActiveObject will change what getActiveObjects returns\n    const currentActives = this.getActiveObjects();\n    const selected = this._setActiveObject(object, e);\n    this._fireSelectionEvents(currentActives, e);\n    return selected;\n  }\n\n  /**\n   * This is supposed to be equivalent to setActiveObject but without firing\n   * any event. There is commitment to have this stay this way.\n   * This is the functional part of setActiveObject.\n   * @param {Object} object to set as active\n   * @param {Event} [e] Event (passed along when firing \"object:selected\")\n   * @return {Boolean} true if the object has been selected\n   */\n  _setActiveObject(object: FabricObject, e?: TPointerEvent) {\n    const prevActiveObject = this._activeObject;\n    if (prevActiveObject === object) {\n      return false;\n    }\n    // after calling this._discardActiveObject, this,_activeObject could be undefined\n    if (!this._discardActiveObject(e, object) && this._activeObject) {\n      // refused to deselect\n      return false;\n    }\n    if (object.onSelect({ e })) {\n      return false;\n    }\n\n    this._activeObject = object;\n\n    if (isActiveSelection(object) && prevActiveObject !== object) {\n      object.set('canvas', this);\n    }\n    object.setCoords();\n\n    return true;\n  }\n\n  /**\n   * This is supposed to be equivalent to discardActiveObject but without firing\n   * any selection events ( can still fire object transformation events ). There is commitment to have this stay this way.\n   * This is the functional part of discardActiveObject.\n   * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n   * @param {Object} object the next object to set as active, reason why we are discarding this\n   * @return {Boolean} true if the active object has been discarded\n   */\n  _discardActiveObject(\n    e?: TPointerEvent,\n    object?: FabricObject,\n  ): this is { _activeObject: undefined } {\n    const obj = this._activeObject;\n    if (obj) {\n      // onDeselect return TRUE to cancel selection;\n      if (obj.onDeselect({ e, object })) {\n        return false;\n      }\n      if (this._currentTransform && this._currentTransform.target === obj) {\n        this.endCurrentTransform(e);\n      }\n      if (isActiveSelection(obj) && obj === this._hoveredTarget) {\n        this._hoveredTarget = undefined;\n      }\n      this._activeObject = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Discards currently active object and fire events. If the function is called by fabric\n   * as a consequence of a mouse event, the event is passed as a parameter and\n   * sent to the fire function for the custom events. When used as a method the\n   * e param does not have any application.\n   * @param {event} e\n   * @return {Boolean} true if the active object has been discarded\n   */\n  discardActiveObject(e?: TPointerEvent): this is { _activeObject: undefined } {\n    const currentActives = this.getActiveObjects(),\n      activeObject = this.getActiveObject();\n    if (currentActives.length) {\n      this.fire('before:selection:cleared', {\n        e,\n        deselected: [activeObject!],\n      });\n    }\n    const discarded = this._discardActiveObject(e);\n    this._fireSelectionEvents(currentActives, e);\n    return discarded;\n  }\n\n  /**\n   * End the current transform.\n   * You don't usually need to call this method unless you are interrupting a user initiated transform\n   * because of some other event ( a press of key combination, or something that block the user UX )\n   * @param {Event} [e] send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  endCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform;\n    this._finalizeCurrentTransform(e);\n    if (transform && transform.target) {\n      // this could probably go inside _finalizeCurrentTransform\n      transform.target.isMoving = false;\n    }\n    this._currentTransform = null;\n  }\n\n  /**\n   * @private\n   * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n   */\n  _finalizeCurrentTransform(e?: TPointerEvent) {\n    const transform = this._currentTransform!,\n      target = transform.target,\n      options = {\n        e,\n        target,\n        transform,\n        action: transform.action,\n      };\n\n    if (target._scaling) {\n      target._scaling = false;\n    }\n\n    target.setCoords();\n\n    if (transform.actionPerformed) {\n      this.fire('object:modified', options);\n      target.fire(MODIFIED, options);\n    }\n  }\n\n  /**\n   * Sets viewport transformation of this canvas instance\n   * @param {Array} vpt a Canvas 2D API transform matrix\n   */\n  setViewportTransform(vpt: TMat2D) {\n    super.setViewportTransform(vpt);\n    const activeObject = this._activeObject;\n    if (activeObject) {\n      activeObject.setCoords();\n    }\n  }\n\n  /**\n   * @override clears active selection ref and interactive canvas elements and contexts\n   */\n  destroy() {\n    // dispose of active selection\n    const activeObject = this._activeObject;\n    if (isActiveSelection(activeObject)) {\n      activeObject.removeAll();\n      activeObject.dispose();\n    }\n\n    delete this._activeObject;\n\n    super.destroy();\n\n    // free resources\n\n    // pixel find canvas\n    // @ts-expect-error disposing\n    this.pixelFindContext = null;\n    // @ts-expect-error disposing\n    this.pixelFindCanvasEl = undefined;\n  }\n\n  /**\n   * Clears all contexts (background, main, top) of an instance\n   */\n  clear() {\n    // discard active object and fire events\n    this.discardActiveObject();\n    // make sure we clear the active object in case it refused to be discarded\n    this._activeObject = undefined;\n    this.clearContext(this.contextTop);\n    super.clear();\n  }\n\n  /**\n   * Draws objects' controls (borders/controls)\n   * @param {CanvasRenderingContext2D} ctx Context to render controls on\n   */\n  drawControls(ctx: CanvasRenderingContext2D) {\n    const activeObject = this._activeObject;\n\n    if (activeObject) {\n      activeObject._renderControls(ctx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  protected _toObject(\n    instance: FabricObject,\n    methodName: 'toObject' | 'toDatalessObject',\n    propertiesToInclude: string[],\n  ): Record<string, any> {\n    // If the object is part of the current selection group, it should\n    // be transformed appropriately\n    // i.e. it should be serialised as it would appear if the selection group\n    // were to be destroyed.\n    const originalProperties = this._realizeGroupTransformOnObject(instance),\n      object = super._toObject(instance, methodName, propertiesToInclude);\n    //Undo the damage we did by changing all of its properties\n    instance.set(originalProperties);\n    return object;\n  }\n\n  /**\n   * Realizes an object's group transformation on it\n   * @private\n   * @param {FabricObject} [instance] the object to transform (gets mutated)\n   * @returns the original values of instance which were changed\n   */\n  private _realizeGroupTransformOnObject(\n    instance: FabricObject,\n  ): Partial<typeof instance> {\n    const { group } = instance;\n    if (group && isActiveSelection(group) && this._activeObject === group) {\n      const layoutProps = [\n        'angle',\n        'flipX',\n        'flipY',\n        LEFT,\n        SCALE_X,\n        SCALE_Y,\n        SKEW_X,\n        SKEW_Y,\n        TOP,\n      ] as (keyof typeof instance)[];\n      const originalValues = pick<typeof instance>(instance, layoutProps);\n      addTransformToObject(instance, group.calcOwnMatrix());\n      return originalValues;\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setSVGObject(\n    markup: string[],\n    instance: FabricObject,\n    reviver?: TSVGReviver,\n  ) {\n    // If the object is in a selection group, simulate what would happen to that\n    // object when the group is deselected\n    const originalProperties = this._realizeGroupTransformOnObject(instance);\n    super._setSVGObject(markup, instance, reviver);\n    instance.set(originalProperties);\n  }\n}\n", "import type { ModifierKey, TOptionalModifierKey } from '../EventTypeDefs';\nimport type { TOptions } from '../typedefs';\nimport type { StaticCanvasOptions } from './StaticCanvasOptions';\n\nexport interface CanvasTransformOptions {\n  /**\n   * When true, objects can be transformed by one side (unproportionately)\n   * when dragged on the corners that normally would not do that.\n   * @type Boolean\n   * @default\n   * @since fabric 4.0 // changed name and default value\n   */\n  uniformScaling: boolean;\n\n  /**\n   * Indicates which key switches uniform scaling.\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * totally wrong named. this sounds like `uniform scaling`\n   * if Canvas.uniformScaling is true, pressing this will set it to false\n   * and viceversa.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  uniScaleKey: TOptionalModifierKey;\n\n  /**\n   * When true, objects use center point as the origin of scale transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredScaling: boolean;\n\n  /**\n   * When true, objects use center point as the origin of rotate transformation.\n   * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n   * @since 1.3.4\n   * @type Boolean\n   * @default\n   */\n  centeredRotation: boolean;\n\n  /**\n   * Indicates which key enable centered Transform\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  centeredKey: TOptionalModifierKey;\n\n  /**\n   * Indicates which key enable alternate action on corner\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled feature disabled.\n   * @since 1.6.2\n   * @type ModifierKey\n   * @default\n   */\n  altActionKey: TOptionalModifierKey;\n}\n\nexport interface CanvasSelectionOptions {\n  /**\n   * Indicates whether group selection should be enabled\n   * @type Boolean\n   * @default\n   */\n  selection: boolean;\n\n  /**\n   * Indicates which key or keys enable multiple click selection\n   * Pass value as a string or array of strings\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * If `null` or empty or containing any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.2\n   * @type ModifierKey|ModifierKey[]\n   * @default\n   */\n  selectionKey: TOptionalModifierKey | ModifierKey[];\n\n  /**\n   * Indicates which key enable alternative selection\n   * in case of target overlapping with active object\n   * values: 'altKey', 'shiftKey', 'ctrlKey'.\n   * For a series of reason that come from the general expectations on how\n   * things should work, this feature works only for preserveObjectStacking true.\n   * If `null` or 'none' or any other string that is not a modifier key\n   * feature is disabled.\n   * @since 1.6.5\n   * @type null|ModifierKey\n   * @default\n   */\n  altSelectionKey: TOptionalModifierKey;\n\n  /**\n   * Color of selection\n   * @type String\n   * @default\n   */\n  selectionColor: string;\n\n  /**\n   * Default dash array pattern\n   * If not empty the selection border is dashed\n   * @type Array\n   */\n  selectionDashArray: number[];\n\n  /**\n   * Color of the border of selection (usually slightly darker than color of selection itself)\n   * @type String\n   * @default\n   */\n  selectionBorderColor: string;\n\n  /**\n   * Width of a line used in object/group selection\n   * @type Number\n   * @default\n   */\n  selectionLineWidth: number;\n\n  /**\n   * Select only shapes that are fully contained in the dragged selection rectangle.\n   * @type Boolean\n   * @default\n   */\n  selectionFullyContained: boolean;\n}\n\nexport interface CanvasCursorOptions {\n  /**\n   * Default cursor value used when hovering over an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  hoverCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used when moving an object on canvas\n   * @type CSSStyleDeclaration['cursor']\n   * @default move\n   */\n  moveCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Default cursor value used for the entire canvas\n   * @type String\n   * @default default\n   */\n  defaultCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used during free drawing\n   * @type String\n   * @default crosshair\n   */\n  freeDrawingCursor: CSSStyleDeclaration['cursor'];\n\n  /**\n   * Cursor value used for disabled elements ( corners with disabled action )\n   * @type String\n   * @since 2.0.0\n   * @default not-allowed\n   */\n  notAllowedCursor: CSSStyleDeclaration['cursor'];\n}\n\nexport interface TargetFindOptions {\n  /**\n   * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n   * @type Boolean\n   * @default\n   */\n  perPixelTargetFind: boolean;\n\n  /**\n   * Number of pixels around target pixel to tolerate (consider active) during object detection\n   * @type Number\n   * @default\n   */\n  targetFindTolerance: number;\n\n  /**\n   * When true, target detection is skipped. Target detection will return always undefined.\n   * click selection won't work anymore, events will fire with no targets.\n   * if something is selected before setting it to true, it will be deselected at the first click.\n   * area selection will still work. check the `selection` property too.\n   * if you deactivate both, you should look into staticCanvas.\n   * @type Boolean\n   * @default\n   */\n  skipTargetFind: boolean;\n}\n\nexport interface CanvasEventsOptions {\n  /**\n   * Indicates if the right click on canvas can output the context menu or not\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  stopContextMenu: boolean;\n\n  /**\n   * Indicates if the canvas can fire right click events\n   * @type Boolean\n   * @since 1.6.5\n   * @default\n   */\n  fireRightClick: boolean;\n\n  /**\n   * Indicates if the canvas can fire middle click events\n   * @type Boolean\n   * @since 1.7.8\n   * @default\n   */\n  fireMiddleClick: boolean;\n\n  /**\n   * When the option is enabled, PointerEvent is used instead of TPointerEvent.\n   * @type Boolean\n   * @default\n   */\n  enablePointerEvents: boolean;\n}\n\nexport interface CanvasOptions\n  extends StaticCanvasOptions,\n    CanvasTransformOptions,\n    CanvasSelectionOptions,\n    CanvasCursorOptions,\n    TargetFindOptions,\n    CanvasEventsOptions {\n  /**\n   * Default element class that's given to wrapper (div) element of canvas\n   * @type String\n   * @default\n   * @deprecated customize {@link CanvasDOMManager} instead or access {@link elements} directly\n   */\n  containerClass: string;\n\n  /**\n   * Indicates whether objects should remain in current stack position when selected.\n   * When false objects are brought to top and rendered as part of the selection group\n   * @type Boolean\n   * @default\n   */\n  preserveObjectStacking: boolean;\n}\n\nexport type TCanvasOptions = TOptions<CanvasOptions>;\n\nexport const canvasDefaults: TOptions<CanvasOptions> = {\n  uniformScaling: true,\n  uniScaleKey: 'shiftKey',\n  centeredScaling: false,\n  centeredRotation: false,\n  centeredKey: 'altKey',\n  altActionKey: 'shiftKey',\n\n  selection: true,\n  selectionKey: 'shiftKey',\n  selectionColor: 'rgba(100, 100, 255, 0.3)',\n  selectionDashArray: [],\n  selectionBorderColor: 'rgba(255, 255, 255, 0.3)',\n  selectionLineWidth: 1,\n  selectionFullyContained: false,\n\n  hoverCursor: 'move',\n  moveCursor: 'move',\n  defaultCursor: 'default',\n  freeDrawingCursor: 'crosshair',\n  notAllowedCursor: 'not-allowed',\n\n  perPixelTargetFind: false,\n  targetFindTolerance: 0,\n  skipTargetFind: false,\n\n  stopContextMenu: false,\n  fireRightClick: false,\n  fireMiddleClick: false,\n  enablePointerEvents: false,\n\n  containerClass: 'canvas-container',\n\n  preserveObjectStacking: false,\n};\n", "import type { TPointerEvent } from '../EventTypeDefs';\nimport type { ITextBehavior } from '../shapes/IText/ITextBehavior';\nimport { removeFromArray } from '../util/internals/removeFromArray';\nimport type { Canvas } from './Canvas';\n\n/**\n * In charge of synchronizing all interactive text instances of a canvas\n */\nexport class TextEditingManager {\n  private targets: ITextBehavior[] = [];\n  private declare target?: ITextBehavior;\n  private __disposer: VoidFunction;\n\n  constructor(canvas: Canvas) {\n    const cb = () => {\n      const { hiddenTextarea } =\n        (canvas.getActiveObject() as ITextBehavior) || {};\n      hiddenTextarea && hiddenTextarea.focus();\n    };\n    const el = canvas.upperCanvasEl;\n    el.addEventListener('click', cb);\n    this.__disposer = () => el.removeEventListener('click', cb);\n  }\n\n  exitTextEditing() {\n    this.target = undefined;\n    this.targets.forEach((target) => {\n      if (target.isEditing) {\n        target.exitEditing();\n      }\n    });\n  }\n\n  add(target: ITextBehavior) {\n    this.targets.push(target);\n  }\n\n  remove(target: ITextBehavior) {\n    this.unregister(target);\n    removeFromArray(this.targets, target);\n  }\n\n  register(target: ITextBehavior) {\n    this.target = target;\n  }\n\n  unregister(target: ITextBehavior) {\n    if (target === this.target) {\n      this.target = undefined;\n    }\n  }\n\n  onMouseMove(e: TPointerEvent) {\n    this.target?.isEditing && this.target.updateSelectionOnMouseMove(e);\n  }\n\n  clear() {\n    this.targets = [];\n    this.target = undefined;\n  }\n\n  dispose() {\n    this.clear();\n    this.__disposer();\n    // @ts-expect-error disposing\n    delete this.__disposer;\n  }\n}\n", "import { classRegistry } from '../ClassRegistry';\nimport { NONE } from '../constants';\nimport type {\n  CanvasEvents,\n  DragEventData,\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventNames,\n  Transform,\n} from '../EventTypeDefs';\nimport { Point } from '../Point';\nimport type { ActiveSelection } from '../shapes/ActiveSelection';\nimport type { Group } from '../shapes/Group';\nimport type { IText } from '../shapes/IText/IText';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { isTouchEvent, stopEvent } from '../util/dom_event';\nimport { getDocumentFromElement, getWindowFromElement } from '../util/dom_misc';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { isActiveSelection } from '../util/typeAssertions';\nimport type { CanvasOptions, TCanvasOptions } from './CanvasOptions';\nimport { SelectableCanvas } from './SelectableCanvas';\nimport { TextEditingManager } from './TextEditingManager';\n\nconst addEventOptions = { passive: false } as EventListenerOptions;\n\nconst getEventPoints = (canvas: Canvas, e: TPointerEvent) => {\n  const viewportPoint = canvas.getViewportPoint(e);\n  const scenePoint = canvas.getScenePoint(e);\n  return {\n    viewportPoint,\n    scenePoint,\n    pointer: viewportPoint,\n    absolutePointer: scenePoint,\n  };\n};\n\n// just to be clear, the utils are now deprecated and those are here exactly as minifier helpers\n// because el.addEventListener can't me be minified while a const yes and we use it 47 times in this file.\n// few bytes but why give it away.\nconst addListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['addEventListener']>\n) => el.addEventListener(...args);\nconst removeListener = (\n  el: HTMLElement | Document,\n  ...args: Parameters<HTMLElement['removeEventListener']>\n) => el.removeEventListener(...args);\n\nconst syntheticEventConfig = {\n  mouse: {\n    in: 'over',\n    out: 'out',\n    targetIn: 'mouseover',\n    targetOut: 'mouseout',\n    canvasIn: 'mouse:over',\n    canvasOut: 'mouse:out',\n  },\n  drag: {\n    in: 'enter',\n    out: 'leave',\n    targetIn: 'dragenter',\n    targetOut: 'dragleave',\n    canvasIn: 'drag:enter',\n    canvasOut: 'drag:leave',\n  },\n} as const;\n\ntype TSyntheticEventContext = {\n  mouse: { e: TPointerEvent };\n  drag: DragEventData;\n};\n\nexport class Canvas extends SelectableCanvas implements CanvasOptions {\n  /**\n   * Contains the id of the touch event that owns the fabric transform\n   * @type Number\n   * @private\n   */\n  declare mainTouchId?: number;\n\n  declare enablePointerEvents: boolean;\n\n  /**\n   * Holds a reference to a setTimeout timer for event synchronization\n   * @type number\n   * @private\n   */\n  private declare _willAddMouseDown: number;\n\n  /**\n   * Holds a reference to an object on the canvas that is receiving the drag over event.\n   * @type FabricObject\n   * @private\n   */\n  private declare _draggedoverTarget?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas from where the drag operation started\n   * @type FabricObject\n   * @private\n   */\n  private declare _dragSource?: FabricObject;\n\n  /**\n   * Holds a reference to an object on the canvas that is the current drop target\n   * May differ from {@link _draggedoverTarget}\n   * @todo inspect whether {@link _draggedoverTarget} and {@link _dropTarget} should be merged somehow\n   * @type FabricObject\n   * @private\n   */\n  private declare _dropTarget: FabricObject<ObjectEvents> | undefined;\n\n  private _isClick: boolean;\n\n  textEditingManager = new TextEditingManager(this);\n\n  constructor(el?: string | HTMLCanvasElement, options: TCanvasOptions = {}) {\n    super(el, options);\n    // bind event handlers\n    (\n      [\n        '_onMouseDown',\n        '_onTouchStart',\n        '_onMouseMove',\n        '_onMouseUp',\n        '_onTouchEnd',\n        '_onResize',\n        // '_onGesture',\n        // '_onDrag',\n        // '_onShake',\n        // '_onLongPress',\n        // '_onOrientationChange',\n        '_onMouseWheel',\n        '_onMouseOut',\n        '_onMouseEnter',\n        '_onContextMenu',\n        '_onDoubleClick',\n        '_onDragStart',\n        '_onDragEnd',\n        '_onDragProgress',\n        '_onDragOver',\n        '_onDragEnter',\n        '_onDragLeave',\n        '_onDrop',\n      ] as (keyof this)[]\n    ).forEach((eventHandler) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n      this[eventHandler] = (this[eventHandler] as Function).bind(this);\n    });\n    // register event handlers\n    this.addOrRemove(addListener, 'add');\n  }\n\n  /**\n   * return an event prefix pointer or mouse.\n   * @private\n   */\n  private _getEventPrefix() {\n    return this.enablePointerEvents ? 'pointer' : 'mouse';\n  }\n\n  addOrRemove(functor: any, _eventjsFunctor: 'add' | 'remove') {\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    functor(getWindowFromElement(canvasElement), 'resize', this._onResize);\n    functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    functor(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove,\n      addEventOptions,\n    );\n    functor(canvasElement, `${eventTypePrefix}out`, this._onMouseOut);\n    functor(canvasElement, `${eventTypePrefix}enter`, this._onMouseEnter);\n    functor(canvasElement, 'wheel', this._onMouseWheel);\n    functor(canvasElement, 'contextmenu', this._onContextMenu);\n    functor(canvasElement, 'dblclick', this._onDoubleClick);\n    functor(canvasElement, 'dragstart', this._onDragStart);\n    functor(canvasElement, 'dragend', this._onDragEnd);\n    functor(canvasElement, 'dragover', this._onDragOver);\n    functor(canvasElement, 'dragenter', this._onDragEnter);\n    functor(canvasElement, 'dragleave', this._onDragLeave);\n    functor(canvasElement, 'drop', this._onDrop);\n    if (!this.enablePointerEvents) {\n      functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n    }\n    // if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n    //   eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n    //   eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n    //   eventjs[eventjsFunctor](\n    //     canvasElement,\n    //     'orientation',\n    //     this._onOrientationChange\n    //   );\n    //   eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n    //   eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n    // }\n  }\n\n  /**\n   * Removes all event listeners, used when disposing the instance\n   */\n  removeListeners() {\n    this.addOrRemove(removeListener, 'remove');\n    // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      `${eventTypePrefix}up`,\n      this._onMouseUp as EventListener,\n    );\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    clearTimeout(this._willAddMouseDown);\n  }\n\n  /**\n   * @private\n   * @param {Event} [e] Event object fired on wheel event\n   */\n  private _onMouseWheel(e: MouseEvent) {\n    this.__onMouseWheel(e);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onMouseOut(e: TPointerEvent) {\n    const target = this._hoveredTarget;\n    const shared = {\n      e,\n      ...getEventPoints(this, e),\n    };\n    this.fire('mouse:out', { ...shared, target });\n    this._hoveredTarget = undefined;\n    target && target.fire('mouseout', { ...shared });\n    this._hoveredTargets.forEach((nestedTarget) => {\n      this.fire('mouse:out', { ...shared, target: nestedTarget });\n      nestedTarget && nestedTarget.fire('mouseout', { ...shared });\n    });\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseenter\n   */\n  private _onMouseEnter(e: TPointerEvent) {\n    // This find target and consequent 'mouse:over' is used to\n    // clear old instances on hovered target.\n    // calling findTarget has the side effect of killing target.__corner.\n    // as a short term fix we are not firing this if we are currently transforming.\n    // as a long term fix we need to separate the action of finding a target with the\n    // side effects we added to it.\n    if (!this._currentTransform && !this.findTarget(e)) {\n      this.fire('mouse:over', {\n        e,\n        ...getEventPoints(this, e),\n      });\n      this._hoveredTarget = undefined;\n      this._hoveredTargets = [];\n    }\n  }\n\n  /**\n   * supports native like text dragging\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragStart(e: DragEvent) {\n    this._isClick = false;\n    const activeObject = this.getActiveObject();\n    if (activeObject && activeObject.onDragStart(e)) {\n      this._dragSource = activeObject;\n      const options = { e, target: activeObject };\n      this.fire('dragstart', options);\n      activeObject.fire('dragstart', options);\n      addListener(\n        this.upperCanvasEl,\n        'drag',\n        this._onDragProgress as EventListener,\n      );\n      return;\n    }\n    stopEvent(e);\n  }\n\n  /**\n   * First we clear top context where the effects are being rendered.\n   * Then we render the effects.\n   * Doing so will render the correct effect for all cases including an overlap between `source` and `target`.\n   * @private\n   */\n  private _renderDragEffects(\n    e: DragEvent,\n    source?: FabricObject,\n    target?: FabricObject,\n  ) {\n    let dirty = false;\n    // clear top context\n    const dropTarget = this._dropTarget;\n    if (dropTarget && dropTarget !== source && dropTarget !== target) {\n      dropTarget.clearContextTop();\n      dirty = true;\n    }\n    source?.clearContextTop();\n    target !== source && target?.clearContextTop();\n    // render effects\n    const ctx = this.contextTop;\n    ctx.save();\n    ctx.transform(...this.viewportTransform);\n    if (source) {\n      ctx.save();\n      source.transform(ctx);\n      source.renderDragSourceEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    if (target) {\n      ctx.save();\n      target.transform(ctx);\n      target.renderDropTargetEffect(e);\n      ctx.restore();\n      dirty = true;\n    }\n    ctx.restore();\n    dirty && (this.contextTopDirty = true);\n  }\n\n  /**\n   * supports native like text dragging\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragEnd(e: DragEvent) {\n    const didDrop = !!e.dataTransfer && e.dataTransfer.dropEffect !== NONE,\n      dropTarget = didDrop ? this._activeObject : undefined,\n      options = {\n        e,\n        target: this._dragSource as FabricObject,\n        subTargets: this.targets,\n        dragSource: this._dragSource as FabricObject,\n        didDrop,\n        dropTarget: dropTarget as FabricObject,\n      };\n    removeListener(\n      this.upperCanvasEl,\n      'drag',\n      this._onDragProgress as EventListener,\n    );\n    this.fire('dragend', options);\n    this._dragSource && this._dragSource.fire('dragend', options);\n    delete this._dragSource;\n    // we need to call mouse up synthetically because the browser won't\n    this._onMouseUp(e);\n  }\n\n  /**\n   * fire `drag` event on canvas and drag source\n   * @private\n   * @param {DragEvent} e\n   */\n  private _onDragProgress(e: DragEvent) {\n    const options = {\n      e,\n      target: this._dragSource as FabricObject | undefined,\n      dragSource: this._dragSource as FabricObject | undefined,\n      dropTarget: this._draggedoverTarget as FabricObject,\n    };\n    this.fire('drag', options);\n    this._dragSource && this._dragSource.fire('drag', options);\n  }\n\n  /**\n   * As opposed to {@link findTarget} we want the top most object to be returned w/o the active object cutting in line.\n   * Override at will\n   */\n  protected findDragTargets(e: DragEvent) {\n    this.targets = [];\n    const target = this._searchPossibleTargets(\n      this._objects,\n      this.getViewportPoint(e),\n    );\n    return {\n      target,\n      targets: [...this.targets],\n    };\n  }\n\n  /**\n   * prevent default to allow drop event to be fired\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#specifying_drop_targets\n   * @private\n   * @param {DragEvent} [e] Event object fired on Event.js shake\n   */\n  private _onDragOver(e: DragEvent) {\n    const eventType = 'dragover';\n    const { target, targets } = this.findDragTargets(e);\n    const dragSource = this._dragSource as FabricObject;\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource,\n      canDrop: false,\n      dropTarget: undefined,\n    };\n    let dropTarget;\n    //  fire on canvas\n    this.fire(eventType, options);\n    //  make sure we fire dragenter events before dragover\n    //  if dragleave is needed, object will not fire dragover so we don't need to trouble ourselves with it\n    this._fireEnterLeaveEvents(target, options);\n    if (target) {\n      if (target.canDrop(e)) {\n        dropTarget = target;\n      }\n      target.fire(eventType, options);\n    }\n    //  propagate the event to subtargets\n    for (let i = 0; i < targets.length; i++) {\n      const subTarget = targets[i];\n      // accept event only if previous targets didn't (the accepting target calls `preventDefault` to inform that the event is taken)\n      // TODO: verify if those should loop in inverse order then?\n      // what is the order of subtargets?\n      if (subTarget.canDrop(e)) {\n        dropTarget = subTarget;\n      }\n      subTarget.fire(eventType, options);\n    }\n    //  render drag effects now that relations between source and target is clear\n    this._renderDragEffects(e, dragSource, dropTarget);\n    this._dropTarget = dropTarget;\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragEnter(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragenter', options);\n    //  fire dragenter on targets\n    this._fireEnterLeaveEvents(target, options);\n  }\n\n  /**\n   * fire `dragleave` on `dragover` targets\n   * @private\n   * @param {Event} [e] Event object fired on Event.js shake\n   */\n  private _onDragLeave(e: DragEvent) {\n    const options = {\n      e,\n      target: this._draggedoverTarget,\n      subTargets: this.targets,\n      dragSource: this._dragSource,\n    };\n    this.fire('dragleave', options);\n\n    //  fire dragleave on targets\n    this._fireEnterLeaveEvents(undefined, options);\n    this._renderDragEffects(e, this._dragSource);\n    this._dropTarget = undefined;\n    //  clear targets\n    this.targets = [];\n    this._hoveredTargets = [];\n  }\n\n  /**\n   * `drop:before` is a an event that allows you to schedule logic\n   * before the `drop` event. Prefer `drop` event always, but if you need\n   * to run some drop-disabling logic on an event, since there is no way\n   * to handle event handlers ordering, use `drop:before`\n   * @private\n   * @param {Event} e\n   */\n  private _onDrop(e: DragEvent) {\n    const { target, targets } = this.findDragTargets(e);\n    const options = this._basicEventHandler('drop:before', {\n      e,\n      target,\n      subTargets: targets,\n      dragSource: this._dragSource,\n      ...getEventPoints(this, e),\n    });\n    //  will be set by the drop target\n    options.didDrop = false;\n    //  will be set by the drop target, used in case options.target refuses the drop\n    options.dropTarget = undefined;\n    //  fire `drop`\n    this._basicEventHandler('drop', options);\n    //  inform canvas of the drop\n    //  we do this because canvas was unaware of what happened at the time the `drop` event was fired on it\n    //  use for side effects\n    this.fire('drop:after', options);\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onContextMenu(e: TPointerEvent): false {\n    const target = this.findTarget(e),\n      subTargets = this.targets || [];\n    const options = this._basicEventHandler('contextmenu:before', {\n      e,\n      target,\n      subTargets,\n    });\n    // TODO: this line is silly because the dev can subscribe to the event and prevent it themselves\n    this.stopContextMenu && stopEvent(e);\n    this._basicEventHandler('contextmenu', options);\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  private _onDoubleClick(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'dblclick');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Return a the id of an event.\n   * returns either the pointerId or the identifier or 0 for the mouse event\n   * @private\n   * @param {Event} evt Event object\n   */\n  getPointerId(evt: TouchEvent | PointerEvent): number {\n    const changedTouches = (evt as TouchEvent).changedTouches;\n\n    if (changedTouches) {\n      return changedTouches[0] && changedTouches[0].identifier;\n    }\n\n    if (this.enablePointerEvents) {\n      return (evt as PointerEvent).pointerId;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines if an event has the id of the event that is considered main\n   * @private\n   * @param {evt} event Event object\n   */\n  _isMainEvent(evt: TPointerEvent): boolean {\n    if ((evt as PointerEvent).isPrimary === true) {\n      return true;\n    }\n    if ((evt as PointerEvent).isPrimary === false) {\n      return false;\n    }\n    if (evt.type === 'touchend' && (evt as TouchEvent).touches.length === 0) {\n      return true;\n    }\n    if ((evt as TouchEvent).changedTouches) {\n      return (\n        (evt as TouchEvent).changedTouches[0].identifier === this.mainTouchId\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchStart(e: TouchEvent) {\n    // we will prevent scrolling if allowTouchScrolling is not enabled and\n    let shouldPreventScrolling = !this.allowTouchScrolling;\n    const currentActiveObject = this._activeObject;\n    if (this.mainTouchId === undefined) {\n      this.mainTouchId = this.getPointerId(e);\n    }\n    this.__onMouseDown(e);\n    // after executing fabric logic for mouse down let's see\n    // if we didn't change target or if we are drawing\n    // we want to prevent scrolling anyway\n    if (\n      this.isDrawingMode ||\n      (currentActiveObject && this._target === currentActiveObject)\n    ) {\n      shouldPreventScrolling = true;\n    }\n    // prevent default, will block scrolling from start\n    shouldPreventScrolling && e.preventDefault();\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    // if we scroll don't register the touch move event\n    shouldPreventScrolling &&\n      addListener(\n        doc,\n        'touchmove',\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    // Unbind mousedown to prevent double triggers from touch devices\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}down`,\n      this._onMouseDown as EventListener,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDown(e: TPointerEvent) {\n    this.__onMouseDown(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    removeListener(\n      canvasElement,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    const doc = getDocumentFromElement(canvasElement);\n    addListener(doc, `${eventTypePrefix}up`, this._onMouseUp as EventListener);\n    addListener(\n      doc,\n      `${eventTypePrefix}move`,\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onTouchEnd(e: TouchEvent) {\n    if (e.touches.length > 0) {\n      // if there are still touches stop here\n      return;\n    }\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    delete this.mainTouchId;\n    const eventTypePrefix = this._getEventPrefix();\n    const doc = getDocumentFromElement(this.upperCanvasEl);\n    removeListener(\n      doc,\n      'touchend',\n      this._onTouchEnd as EventListener,\n      addEventOptions,\n    );\n    removeListener(\n      doc,\n      'touchmove',\n      this._onMouseMove as EventListener,\n      addEventOptions,\n    );\n    if (this._willAddMouseDown) {\n      clearTimeout(this._willAddMouseDown);\n    }\n    this._willAddMouseDown = setTimeout(() => {\n      // Wait 400ms before rebinding mousedown to prevent double triggers\n      // from touch devices\n      addListener(\n        this.upperCanvasEl,\n        `${eventTypePrefix}down`,\n        this._onMouseDown as EventListener,\n      );\n      this._willAddMouseDown = 0;\n    }, 400) as unknown as number;\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUp(e: TPointerEvent) {\n    this.__onMouseUp(e);\n    this._resetTransformEventData();\n    const canvasElement = this.upperCanvasEl,\n      eventTypePrefix = this._getEventPrefix();\n    if (this._isMainEvent(e)) {\n      const doc = getDocumentFromElement(this.upperCanvasEl);\n      removeListener(\n        doc,\n        `${eventTypePrefix}up`,\n        this._onMouseUp as EventListener,\n      );\n      removeListener(\n        doc,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n      addListener(\n        canvasElement,\n        `${eventTypePrefix}move`,\n        this._onMouseMove as EventListener,\n        addEventOptions,\n      );\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMove(e: TPointerEvent) {\n    const activeObject = this.getActiveObject();\n    !this.allowTouchScrolling &&\n      (!activeObject ||\n        // a drag event sequence is started by the active object flagging itself on mousedown / mousedown:before\n        // we must not prevent the event's default behavior in order for the window to start dragging\n        !activeObject.shouldStartDragging(e)) &&\n      e.preventDefault &&\n      e.preventDefault();\n    this.__onMouseMove(e);\n  }\n\n  /**\n   * @private\n   */\n  _onResize() {\n    this.calcOffset();\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n   * @private\n   * @param {Object} target\n   */\n  _shouldRender(target: FabricObject | undefined) {\n    const activeObject = this.getActiveObject();\n    // if just one of them is available or if they are both but are different objects\n    // this covers: switch of target, from target to no target, selection of target\n    // multiSelection with key and mouse\n    return (\n      !!activeObject !== !!target ||\n      (activeObject && target && activeObject !== target)\n    );\n  }\n\n  /**\n   * Method that defines the actions when mouse is released on canvas.\n   * The method resets the currentTransform parameters, store the image corner\n   * position in the image object and render the canvas on top.\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseUp(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'up:before');\n\n    const transform = this._currentTransform;\n    const isClick = this._isClick;\n    const target = this._target;\n\n    // if right/middle click just fire events and return\n    // target undefined will make the _handleEvent search the target\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'up');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode && this._isCurrentlyDrawing) {\n      this._onMouseUpInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n    let shouldRender = false;\n    if (transform) {\n      this._finalizeCurrentTransform(e);\n      shouldRender = transform.actionPerformed;\n    }\n    if (!isClick) {\n      const targetWasActive = target === this._activeObject;\n      this.handleSelection(e);\n      if (!shouldRender) {\n        shouldRender =\n          this._shouldRender(target) ||\n          (!targetWasActive && target === this._activeObject);\n      }\n    }\n    let pointer, corner;\n    if (target) {\n      const found = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      const { key, control } = found || {};\n      corner = key;\n      if (\n        target.selectable &&\n        target !== this._activeObject &&\n        target.activeOn === 'up'\n      ) {\n        this.setActiveObject(target, e);\n        shouldRender = true;\n      } else if (control) {\n        const mouseUpHandler = control.getMouseUpHandler(e, target, control);\n        if (mouseUpHandler) {\n          pointer = this.getScenePoint(e);\n          mouseUpHandler.call(control, e, transform!, pointer.x, pointer.y);\n        }\n      }\n      target.isMoving = false;\n    }\n    // if we are ending up a transform on a different control or a new object\n    // fire the original mouse up from the corner that started the transform\n    if (\n      transform &&\n      (transform.target !== target || transform.corner !== corner)\n    ) {\n      const originalControl =\n          transform.target && transform.target.controls[transform.corner],\n        originalMouseUpHandler =\n          originalControl &&\n          originalControl.getMouseUpHandler(\n            e,\n            transform.target,\n            originalControl,\n          );\n      pointer = pointer || this.getScenePoint(e);\n      originalMouseUpHandler &&\n        originalMouseUpHandler.call(\n          originalControl,\n          e,\n          transform,\n          pointer.x,\n          pointer.y,\n        );\n    }\n    this._setCursorFromEvent(e, target);\n    this._handleEvent(e, 'up');\n    this._groupSelector = null;\n    this._currentTransform = null;\n    // reset the target information about which corner is selected\n    target && (target.__corner = undefined);\n    if (shouldRender) {\n      this.requestRenderAll();\n    } else if (!isClick && !(this._activeObject as IText)?.isEditing) {\n      this.renderTop();\n    }\n  }\n\n  _basicEventHandler<T extends keyof (CanvasEvents | ObjectEvents)>(\n    eventType: T,\n    options: (CanvasEvents & ObjectEvents)[T],\n  ) {\n    const { target, subTargets = [] } = options as {\n      target?: FabricObject;\n      subTargets: FabricObject[];\n    };\n    this.fire(eventType, options);\n    target && target.fire(eventType, options);\n    for (let i = 0; i < subTargets.length; i++) {\n      subTargets[i] !== target && subTargets[i].fire(eventType, options);\n    }\n    return options;\n  }\n\n  /**\n   * @private\n   * Handle event firing for target and subtargets\n   * @param {TPointerEvent} e event from mouse\n   * @param {TPointerEventNames} eventType\n   */\n  _handleEvent<T extends TPointerEventNames>(e: TPointerEvent, eventType: T) {\n    const target = this._target,\n      targets = this.targets || [],\n      options: CanvasEvents[`mouse:${T}`] = {\n        e,\n        target,\n        subTargets: targets,\n        ...getEventPoints(this, e),\n        transform: this._currentTransform,\n        ...(eventType === 'up:before' || eventType === 'up'\n          ? {\n              isClick: this._isClick,\n              currentTarget: this.findTarget(e),\n              // set by the preceding `findTarget` call\n              currentSubTargets: this.targets,\n            }\n          : {}),\n      } as CanvasEvents[`mouse:${T}`];\n    this.fire(`mouse:${eventType}`, options);\n    // this may be a little be more complicated of what we want to handle\n    target && target.fire(`mouse${eventType}`, options);\n    for (let i = 0; i < targets.length; i++) {\n      targets[i] !== target && targets[i].fire(`mouse${eventType}`, options);\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  _onMouseDownInDrawingMode(e: TPointerEvent) {\n    this._isCurrentlyDrawing = true;\n    if (this.getActiveObject()) {\n      this.discardActiveObject(e);\n      this.requestRenderAll();\n    }\n    // TODO: this is a scene point so it should be renamed\n    const pointer = this.getScenePoint(e);\n    this.freeDrawingBrush &&\n      this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });\n    this._handleEvent(e, 'down');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  _onMouseMoveInDrawingMode(e: TPointerEvent) {\n    if (this._isCurrentlyDrawing) {\n      const pointer = this.getScenePoint(e);\n      this.freeDrawingBrush &&\n        this.freeDrawingBrush.onMouseMove(pointer, {\n          e,\n          // this is an absolute pointer, the naming is wrong\n          pointer,\n        });\n    }\n    this.setCursor(this.freeDrawingCursor);\n    this._handleEvent(e, 'move');\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event object fired on mouseup\n   */\n  _onMouseUpInDrawingMode(e: TPointerEvent) {\n    const pointer = this.getScenePoint(e);\n    if (this.freeDrawingBrush) {\n      this._isCurrentlyDrawing = !!this.freeDrawingBrush.onMouseUp({\n        e: e,\n        // this is an absolute pointer, the naming is wrong\n        pointer,\n      });\n    } else {\n      this._isCurrentlyDrawing = false;\n    }\n    this._handleEvent(e, 'up');\n  }\n\n  /**\n   * Method that defines the actions when mouse is clicked on canvas.\n   * The method inits the currentTransform parameters and renders all the\n   * canvas so the current image can be placed on the top canvas and the rest\n   * in on the container one.\n   * @private\n   * @param {Event} e Event object fired on mousedown\n   */\n  __onMouseDown(e: TPointerEvent) {\n    this._isClick = true;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'down:before');\n\n    let target: FabricObject | undefined = this._target;\n\n    // if right/middle click just fire events\n    const { button } = e as MouseEvent;\n    if (button) {\n      ((this.fireMiddleClick && button === 1) ||\n        (this.fireRightClick && button === 2)) &&\n        this._handleEvent(e, 'down');\n      this._resetTransformEventData();\n      return;\n    }\n\n    if (this.isDrawingMode) {\n      this._onMouseDownInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    // ignore if some object is being transformed at this moment\n    if (this._currentTransform) {\n      return;\n    }\n\n    let shouldRender = this._shouldRender(target);\n    let grouped = false;\n    if (this.handleMultiSelection(e, target)) {\n      // active object might have changed while grouping\n      target = this._activeObject;\n      grouped = true;\n      shouldRender = true;\n    } else if (this._shouldClearSelection(e, target)) {\n      this.discardActiveObject(e);\n    }\n    // we start a group selector rectangle if\n    // selection is enabled\n    // and there is no target, or the following 3 conditions are satisfied:\n    // target is not selectable ( otherwise we selected it )\n    // target is not editing\n    // target is not already selected ( otherwise we drag )\n    if (\n      this.selection &&\n      (!target ||\n        (!target.selectable &&\n          !(target as IText).isEditing &&\n          target !== this._activeObject))\n    ) {\n      const p = this.getScenePoint(e);\n      this._groupSelector = {\n        x: p.x,\n        y: p.y,\n        deltaY: 0,\n        deltaX: 0,\n      };\n    }\n\n    if (target) {\n      const alreadySelected = target === this._activeObject;\n      if (target.selectable && target.activeOn === 'down') {\n        this.setActiveObject(target, e);\n      }\n      const handle = target.findControl(\n        this.getViewportPoint(e),\n        isTouchEvent(e),\n      );\n      if (target === this._activeObject && (handle || !grouped)) {\n        this._setupCurrentTransform(e, target, alreadySelected);\n        const control = handle ? handle.control : undefined,\n          pointer = this.getScenePoint(e),\n          mouseDownHandler =\n            control && control.getMouseDownHandler(e, target, control);\n        mouseDownHandler &&\n          mouseDownHandler.call(\n            control,\n            e,\n            this._currentTransform!,\n            pointer.x,\n            pointer.y,\n          );\n      }\n    }\n    //  we clear `_objectsToRender` in case of a change in order to repopulate it at rendering\n    //  run before firing the `down` event to give the dev a chance to populate it themselves\n    shouldRender && (this._objectsToRender = undefined);\n    this._handleEvent(e, 'down');\n    // we must renderAll so that we update the visuals\n    shouldRender && this.requestRenderAll();\n  }\n\n  /**\n   * reset cache form common information needed during event processing\n   * @private\n   */\n  _resetTransformEventData() {\n    this._target = undefined;\n    this._pointer = undefined;\n    this._absolutePointer = undefined;\n  }\n\n  /**\n   * Cache common information needed during event processing\n   * @private\n   * @param {Event} e Event object fired on event\n   */\n  _cacheTransformEventData(e: TPointerEvent) {\n    // reset in order to avoid stale caching\n    this._resetTransformEventData();\n    this._pointer = this.getViewportPoint(e);\n    this._absolutePointer = sendPointToPlane(\n      this._pointer,\n      undefined,\n      this.viewportTransform,\n    );\n    this._target = this._currentTransform\n      ? this._currentTransform.target\n      : this.findTarget(e);\n  }\n\n  /**\n   * Method that defines the actions when mouse is hovering the canvas.\n   * The currentTransform parameter will define whether the user is rotating/scaling/translating\n   * an image or neither of them (only hovering). A group selection is also possible and would cancel\n   * all any other type of action.\n   * In case of an image transformation only the top canvas will be rendered.\n   * @private\n   * @param {Event} e Event object fired on mousemove\n   */\n  __onMouseMove(e: TPointerEvent) {\n    this._isClick = false;\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'move:before');\n\n    if (this.isDrawingMode) {\n      this._onMouseMoveInDrawingMode(e);\n      return;\n    }\n\n    if (!this._isMainEvent(e)) {\n      return;\n    }\n\n    const groupSelector = this._groupSelector;\n\n    // We initially clicked in an empty area, so we draw a box for multiple selection\n    if (groupSelector) {\n      const pointer = this.getScenePoint(e);\n\n      groupSelector.deltaX = pointer.x - groupSelector.x;\n      groupSelector.deltaY = pointer.y - groupSelector.y;\n\n      this.renderTop();\n    } else if (!this._currentTransform) {\n      const target = this.findTarget(e);\n      this._setCursorFromEvent(e, target);\n      this._fireOverOutEvents(e, target);\n    } else {\n      this._transformObject(e);\n    }\n    this.textEditingManager.onMouseMove(e);\n    this._handleEvent(e, 'move');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * Manage the mouseout, mouseover events for the fabric object on the canvas\n   * @param {Fabric.Object} target the target where the target from the mousemove event\n   * @param {Event} e Event object fired on mousemove\n   * @private\n   */\n  _fireOverOutEvents(e: TPointerEvent, target?: FabricObject) {\n    const _hoveredTarget = this._hoveredTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('mouse', {\n      e,\n      target,\n      oldTarget: _hoveredTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('mouse', {\n        e,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._hoveredTarget = target;\n    this._hoveredTargets = this.targets.concat();\n  }\n\n  /**\n   * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the onDrag event\n   * @param {Object} data Event object fired on dragover\n   * @private\n   */\n  _fireEnterLeaveEvents(target: FabricObject | undefined, data: DragEventData) {\n    const draggedoverTarget = this._draggedoverTarget,\n      _hoveredTargets = this._hoveredTargets,\n      targets = this.targets,\n      length = Math.max(_hoveredTargets.length, targets.length);\n\n    this.fireSyntheticInOutEvents('drag', {\n      ...data,\n      target,\n      oldTarget: draggedoverTarget,\n      fireCanvas: true,\n    });\n    for (let i = 0; i < length; i++) {\n      this.fireSyntheticInOutEvents('drag', {\n        ...data,\n        target: targets[i],\n        oldTarget: _hoveredTargets[i],\n      });\n    }\n    this._draggedoverTarget = target;\n  }\n\n  /**\n   * Manage the synthetic in/out events for the fabric objects on the canvas\n   * @param {Fabric.Object} target the target where the target from the supported events\n   * @param {Object} data Event object fired\n   * @param {Object} config configuration for the function to work\n   * @param {String} config.targetName property on the canvas where the old target is stored\n   * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n   * @param {String} config.evtOut name of the event to fire for out\n   * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n   * @param {String} config.evtIn name of the event to fire for in\n   * @private\n   */\n  fireSyntheticInOutEvents<T extends keyof TSyntheticEventContext>(\n    type: T,\n    {\n      target,\n      oldTarget,\n      fireCanvas,\n      e,\n      ...data\n    }: TSyntheticEventContext[T] & {\n      target?: FabricObject;\n      oldTarget?: FabricObject;\n      fireCanvas?: boolean;\n    },\n  ) {\n    const { targetIn, targetOut, canvasIn, canvasOut } =\n      syntheticEventConfig[type];\n    const targetChanged = oldTarget !== target;\n\n    if (oldTarget && targetChanged) {\n      const outOpt: CanvasEvents[typeof canvasOut] = {\n        ...data,\n        e,\n        target: oldTarget,\n        nextTarget: target,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasOut, outOpt);\n      oldTarget.fire(targetOut, outOpt);\n    }\n    if (target && targetChanged) {\n      const inOpt: CanvasEvents[typeof canvasIn] = {\n        ...data,\n        e,\n        target,\n        previousTarget: oldTarget,\n        ...getEventPoints(this, e),\n      };\n      fireCanvas && this.fire(canvasIn, inOpt);\n      target.fire(targetIn, inOpt);\n    }\n  }\n\n  /**\n   * Method that defines actions when an Event Mouse Wheel\n   * @param {Event} e Event object fired on mouseup\n   */\n  __onMouseWheel(e: TPointerEvent) {\n    this._cacheTransformEventData(e);\n    this._handleEvent(e, 'wheel');\n    this._resetTransformEventData();\n  }\n\n  /**\n   * @private\n   * @param {Event} e Event fired on mousemove\n   */\n  _transformObject(e: TPointerEvent) {\n    const scenePoint = this.getScenePoint(e),\n      transform = this._currentTransform!,\n      target = transform.target,\n      //  transform pointer to target's containing coordinate plane\n      //  both pointer and object should agree on every point\n      localPointer = target.group\n        ? sendPointToPlane(\n            scenePoint,\n            undefined,\n            target.group.calcTransformMatrix(),\n          )\n        : scenePoint;\n    transform.shiftKey = e.shiftKey;\n    transform.altKey = !!this.centeredKey && e[this.centeredKey];\n\n    this._performTransformAction(e, transform, localPointer);\n    transform.actionPerformed && this.requestRenderAll();\n  }\n\n  /**\n   * @private\n   */\n  _performTransformAction(\n    e: TPointerEvent,\n    transform: Transform,\n    pointer: Point,\n  ) {\n    const { action, actionHandler, target } = transform;\n\n    const actionPerformed =\n      !!actionHandler && actionHandler(e, transform, pointer.x, pointer.y);\n    actionPerformed && target.setCoords();\n\n    // this object could be created from the function in the control handlers\n    if (action === 'drag' && actionPerformed) {\n      transform.target.isMoving = true;\n      this.setCursor(transform.target.moveCursor || this.moveCursor);\n    }\n    transform.actionPerformed = transform.actionPerformed || actionPerformed;\n  }\n\n  /**\n   * Sets the cursor depending on where the canvas is being hovered.\n   * Note: very buggy in Opera\n   * @param {Event} e Event object\n   * @param {Object} target Object that the mouse is hovering, if so.\n   */\n  _setCursorFromEvent(e: TPointerEvent, target?: FabricObject) {\n    if (!target) {\n      this.setCursor(this.defaultCursor);\n      return;\n    }\n    let hoverCursor = target.hoverCursor || this.hoverCursor;\n    const activeSelection = isActiveSelection(this._activeObject)\n        ? this._activeObject\n        : null,\n      // only show proper corner when group selection is not active\n      corner =\n        (!activeSelection || target.group !== activeSelection) &&\n        // here we call findTargetCorner always with undefined for the touch parameter.\n        // we assume that if you are using a cursor you do not need to interact with\n        // the bigger touch area.\n        target.findControl(this.getViewportPoint(e));\n\n    if (!corner) {\n      if ((target as Group).subTargetCheck) {\n        // hoverCursor should come from top-most subTarget,\n        // so we walk the array backwards\n        this.targets\n          .concat()\n          .reverse()\n          .map((_target) => {\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n      }\n      this.setCursor(hoverCursor);\n    } else {\n      const control = corner.control;\n      this.setCursor(control.cursorStyleHandler(e, control, target));\n    }\n  }\n\n  /**\n   * ## Handles multiple selection\n   * - toggles `target` selection (selects/deselects `target` if it isn't/is selected respectively)\n   * - sets the active object in case it is not set or in case there is a single active object left under active selection.\n   * ---\n   * - If the active object is the active selection we add/remove `target` from it\n   * - If not, add the active object and `target` to the active selection and make it the active object.\n   * @private\n   * @param {TPointerEvent} e Event object\n   * @param {FabricObject} target target of event to select/deselect\n   * @returns true if grouping occurred\n   */\n  protected handleMultiSelection(e: TPointerEvent, target?: FabricObject) {\n    const activeObject = this._activeObject;\n    const isAS = isActiveSelection(activeObject);\n    if (\n      // check if an active object exists on canvas and if the user is pressing the `selectionKey` while canvas supports multi selection.\n      !!activeObject &&\n      this._isSelectionKeyPressed(e) &&\n      this.selection &&\n      // on top of that the user also has to hit a target that is selectable.\n      !!target &&\n      target.selectable &&\n      // group target and active object only if they are different objects\n      // else we try to find a subtarget of `ActiveSelection`\n      (activeObject !== target || isAS) &&\n      //  make sure `activeObject` and `target` aren't ancestors of each other in case `activeObject` is not `ActiveSelection`\n      // if it is then we want to remove `target` from it\n      (isAS ||\n        (!target.isDescendantOf(activeObject) &&\n          !activeObject.isDescendantOf(target))) &&\n      //  target accepts selection\n      !target.onSelect({ e }) &&\n      // make sure we are not on top of a control\n      !activeObject.getActiveControl()\n    ) {\n      if (isAS) {\n        const prevActiveObjects = activeObject.getObjects();\n        if (target === activeObject) {\n          const pointer = this.getViewportPoint(e);\n          target =\n            // first search active objects for a target to remove\n            this.searchPossibleTargets(prevActiveObjects, pointer) ||\n            //  if not found, search under active selection for a target to add\n            // `prevActiveObjects` will be searched but we already know they will not be found\n            this.searchPossibleTargets(this._objects, pointer);\n          // if nothing is found bail out\n          if (!target || !target.selectable) {\n            return false;\n          }\n        }\n        if (target.group === activeObject) {\n          // `target` is part of active selection => remove it\n          activeObject.remove(target);\n          this._hoveredTarget = target;\n          this._hoveredTargets = [...this.targets];\n          // if after removing an object we are left with one only...\n          if (activeObject.size() === 1) {\n            // activate last remaining object\n            // deselecting the active selection will remove the remaining object from it\n            this._setActiveObject(activeObject.item(0), e);\n          }\n        } else {\n          // `target` isn't part of active selection => add it\n          activeObject.multiSelectAdd(target);\n          this._hoveredTarget = activeObject;\n          this._hoveredTargets = [...this.targets];\n        }\n        this._fireSelectionEvents(prevActiveObjects, e);\n      } else {\n        (activeObject as IText).isEditing &&\n          (activeObject as IText).exitEditing();\n        // add the active object and the target to the active selection and set it as the active object\n        const klass =\n          classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n        const newActiveSelection = new klass([], {\n          /**\n           * it is crucial to pass the canvas ref before calling {@link ActiveSelection#multiSelectAdd}\n           * since it uses {@link FabricObject#isInFrontOf} which relies on the canvas ref\n           */\n          canvas: this,\n        });\n        newActiveSelection.multiSelectAdd(activeObject, target);\n        this._hoveredTarget = newActiveSelection;\n        // ISSUE 4115: should we consider subTargets here?\n        // this._hoveredTargets = [];\n        // this._hoveredTargets = this.targets.concat();\n        this._setActiveObject(newActiveSelection, e);\n        this._fireSelectionEvents([activeObject], e);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ## Handles selection\n   * - selects objects that are contained in (and possibly intersecting) the selection bounding box\n   * - sets the active object\n   * ---\n   * runs on mouse up after a mouse move\n   */\n  protected handleSelection(e: TPointerEvent) {\n    if (!this.selection || !this._groupSelector) {\n      return false;\n    }\n    const { x, y, deltaX, deltaY } = this._groupSelector,\n      point1 = new Point(x, y),\n      point2 = point1.add(new Point(deltaX, deltaY)),\n      tl = point1.min(point2),\n      br = point1.max(point2),\n      size = br.subtract(tl);\n\n    const collectedObjects = this.collectObjects(\n      {\n        left: tl.x,\n        top: tl.y,\n        width: size.x,\n        height: size.y,\n      },\n      { includeIntersecting: !this.selectionFullyContained },\n    ) as FabricObject[];\n\n    const objects =\n      // though this method runs only after mouse move the pointer could do a mouse up on the same position as mouse down\n      // should it be handled as is?\n      point1.eq(point2)\n        ? collectedObjects[0]\n          ? [collectedObjects[0]]\n          : []\n        : collectedObjects.length > 1\n          ? collectedObjects\n              .filter((object) => !object.onSelect({ e }))\n              .reverse()\n          : // `setActiveObject` will call `onSelect(collectedObjects[0])` in this case\n            collectedObjects;\n\n    // set active object\n    if (objects.length === 1) {\n      // set as active object\n      this.setActiveObject(objects[0], e);\n    } else if (objects.length > 1) {\n      // add to active selection and make it the active object\n      const klass =\n        classRegistry.getClass<typeof ActiveSelection>('ActiveSelection');\n      this.setActiveObject(new klass(objects, { canvas: this }), e);\n    }\n\n    // cleanup\n    this._groupSelector = null;\n    return true;\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  clear() {\n    this.textEditingManager.clear();\n    super.clear();\n  }\n\n  /**\n   * @override clear {@link textEditingManager}\n   */\n  destroy() {\n    this.removeListeners();\n    this.textEditingManager.dispose();\n    super.destroy();\n  }\n}\n", "export const linearDefaultCoords = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n};\n\nexport const radialDefaultCoords = {\n  ...linearDefaultCoords,\n  r1: 0,\n  r2: 0,\n};\n", "/**\n *\n * @param value value to check if NaN\n * @param [valueIfNaN]\n * @returns `fallback` is `value is NaN\n */\nexport const ifNaN = (value: number, valueIfNaN?: number) => {\n  return isNaN(value) && typeof valueIfNaN === 'number' ? valueIfNaN : value;\n};\n", "import { ifNaN } from '../util/internals/ifNaN';\nimport { capValue } from '../util/misc/capValue';\n\nconst RE_PERCENT = /^(\\d+\\.\\d+)%|(\\d+)%$/;\n\nexport function isPercent(value: string | null) {\n  return value && RE_PERCENT.test(value);\n}\n\n/**\n *\n * @param value\n * @param valueIfNaN\n * @returns ∈ [0, 1]\n */\nexport function parsePercent(\n  value: string | number | null | undefined,\n  valueIfNaN?: number,\n) {\n  const parsed =\n    typeof value === 'number'\n      ? value\n      : typeof value === 'string'\n        ? parseFloat(value) / (isPercent(value) ? 100 : 1)\n        : NaN;\n  return capValue(0, ifNaN(parsed, valueIfNaN), 1);\n}\n", "import { Color } from '../../color/Color';\nimport { parsePercent } from '../../parser/percent';\nimport { ifNaN } from '../../util/internals/ifNaN';\nimport type { ColorStop } from '../typedefs';\n\nconst RE_KEY_VALUE_PAIRS = /\\s*;\\s*/;\nconst RE_KEY_VALUE = /\\s*:\\s*/;\n\nfunction parseColorStop(el: SVGStopElement, multiplier: number) {\n  let colorValue, opacity;\n  const style = el.getAttribute('style');\n  if (style) {\n    const keyValuePairs = style.split(RE_KEY_VALUE_PAIRS);\n\n    if (keyValuePairs[keyValuePairs.length - 1] === '') {\n      keyValuePairs.pop();\n    }\n\n    for (let i = keyValuePairs.length; i--; ) {\n      const [key, value] = keyValuePairs[i]\n        .split(RE_KEY_VALUE)\n        .map((s) => s.trim());\n      if (key === 'stop-color') {\n        colorValue = value;\n      } else if (key === 'stop-opacity') {\n        opacity = value;\n      }\n    }\n  }\n\n  const color = new Color(\n    colorValue || el.getAttribute('stop-color') || 'rgb(0,0,0)',\n  );\n\n  return {\n    offset: parsePercent(el.getAttribute('offset'), 0),\n    color: color.toRgb(),\n    opacity:\n      ifNaN(parseFloat(opacity || el.getAttribute('stop-opacity') || ''), 1) *\n      color.getAlpha() *\n      multiplier,\n  };\n}\n\nexport function parseColorStops(\n  el: SVGGradientElement,\n  opacityAttr: string | null,\n) {\n  const colorStops: ColorStop[] = [],\n    colorStopEls = el.getElementsByTagName('stop'),\n    multiplier = parsePercent(opacityAttr, 1);\n  for (let i = colorStopEls.length; i--; ) {\n    colorStops.push(parseColorStop(colorStopEls[i], multiplier));\n  }\n  return colorStops;\n}\n", "import type { GradientType, GradientUnits } from '../typedefs';\n\nexport function parseType(el: SVGGradientElement): GradientType {\n  return el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT'\n    ? 'linear'\n    : 'radial';\n}\n\nexport function parseGradientUnits(el: SVGGradientElement): GradientUnits {\n  return el.getAttribute('gradientUnits') === 'userSpaceOnUse'\n    ? 'pixels'\n    : 'percentage';\n}\n", "import { isPercent } from '../../parser/percent';\nimport type { TSize } from '../../typedefs';\nimport type { GradientCoords, GradientType, GradientUnits } from '../typedefs';\nimport { parseGradientUnits, parseType } from './misc';\n\nfunction convertPercentUnitsToValues<\n  T extends GradientType,\n  K extends keyof GradientCoords<T>,\n>(\n  valuesToConvert: Record<K, string | number>,\n  { width, height, gradientUnits }: TSize & { gradientUnits: GradientUnits },\n) {\n  let finalValue;\n  return (Object.keys(valuesToConvert) as K[]).reduce(\n    (acc, prop) => {\n      const propValue = valuesToConvert[prop];\n      if (propValue === 'Infinity') {\n        finalValue = 1;\n      } else if (propValue === '-Infinity') {\n        finalValue = 0;\n      } else {\n        finalValue =\n          typeof propValue === 'string' ? parseFloat(propValue) : propValue;\n        if (typeof propValue === 'string' && isPercent(propValue)) {\n          finalValue *= 0.01;\n          if (gradientUnits === 'pixels') {\n            // then we need to fix those percentages here in svg parsing\n            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {\n              finalValue *= width;\n            }\n            if (prop === 'y1' || prop === 'y2') {\n              finalValue *= height;\n            }\n          }\n        }\n      }\n      acc[prop] = finalValue;\n      return acc;\n    },\n    {} as Record<K, number>,\n  );\n}\n\nfunction getValue(el: SVGGradientElement, key: string) {\n  return el.getAttribute(key);\n}\n\nexport function parseLinearCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'x1') || 0,\n    y1: getValue(el, 'y1') || 0,\n    x2: getValue(el, 'x2') || '100%',\n    y2: getValue(el, 'y2') || 0,\n  };\n}\n\nexport function parseRadialCoords(el: SVGGradientElement) {\n  return {\n    x1: getValue(el, 'fx') || getValue(el, 'cx') || '50%',\n    y1: getValue(el, 'fy') || getValue(el, 'cy') || '50%',\n    r1: 0,\n    x2: getValue(el, 'cx') || '50%',\n    y2: getValue(el, 'cy') || '50%',\n    r2: getValue(el, 'r') || '50%',\n  };\n}\n\nexport function parseCoords(el: SVGGradientElement, size: TSize) {\n  return convertPercentUnitsToValues(\n    parseType(el) === 'linear' ? parseLinearCoords(el) : parseRadialCoords(el),\n    {\n      ...size,\n      gradientUnits: parseGradientUnits(el),\n    },\n  );\n}\n", "import { Color } from '../color/Color';\nimport { iMatrix } from '../constants';\nimport { parseTransformAttribute } from '../parser/parseTransformAttribute';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport type { TMat2D } from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { pick } from '../util/misc/pick';\nimport { matrixToSVG } from '../util/misc/svgParsing';\nimport { linearDefaultCoords, radialDefaultCoords } from './constants';\nimport { parseColorStops } from './parser/parseColorStops';\nimport { parseCoords } from './parser/parseCoords';\nimport { parseType, parseGradientUnits } from './parser/misc';\nimport type {\n  ColorStop,\n  GradientCoords,\n  GradientOptions,\n  GradientType,\n  GradientUnits,\n  SVGOptions,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { isPath } from '../util/typeAssertions';\n\n/**\n * Gradient class\n * @class Gradient\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}\n */\nexport class Gradient<\n  S,\n  T extends GradientType = S extends GradientType ? S : 'linear',\n> {\n  /**\n   * Horizontal offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetX: number;\n\n  /**\n   * Vertical offset for aligning gradients coming from SVG when outside pathgroups\n   * @type Number\n   * @default 0\n   */\n  declare offsetY: number;\n\n  /**\n   * A transform matrix to apply to the gradient before painting.\n   * Imported from svg gradients, is not applied with the current transform in the center.\n   * Before this transform is applied, the origin point is at the top left corner of the object\n   * plus the addition of offsetY and offsetX.\n   * @type Number[]\n   * @default null\n   */\n  declare gradientTransform?: TMat2D;\n\n  /**\n   * coordinates units for coords.\n   * If `pixels`, the number of coords are in the same unit of width / height.\n   * If set as `percentage` the coords are still a number, but 1 means 100% of width\n   * for the X and 100% of the height for the y. It can be bigger than 1 and negative.\n   * allowed values pixels or percentage.\n   * @type GradientUnits\n   * @default 'pixels'\n   */\n  declare gradientUnits: GradientUnits;\n\n  /**\n   * Gradient type linear or radial\n   * @type GradientType\n   * @default 'linear'\n   */\n  declare type: T;\n\n  /**\n   * Defines how the gradient is located in space and spread\n   * @type GradientCoords\n   */\n  declare coords: GradientCoords<T>;\n\n  /**\n   * Defines how many colors a gradient has and how they are located on the axis\n   * defined by coords\n   * @type GradientCoords\n   */\n  declare colorStops: ColorStop[];\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number | string\n   */\n  declare readonly id: string | number;\n\n  static type = 'Gradient';\n\n  constructor(options: GradientOptions<T>) {\n    const {\n      type = 'linear' as T,\n      gradientUnits = 'pixels',\n      coords = {},\n      colorStops = [],\n      offsetX = 0,\n      offsetY = 0,\n      gradientTransform,\n      id,\n    } = options || {};\n    Object.assign(this, {\n      type,\n      gradientUnits,\n      coords: {\n        ...(type === 'radial' ? radialDefaultCoords : linearDefaultCoords),\n        ...coords,\n      },\n      colorStops,\n      offsetX,\n      offsetY,\n      gradientTransform,\n      id: id ? `${id}_${uid()}` : uid(),\n    });\n  }\n\n  /**\n   * Adds another colorStop\n   * @param {Record<string, string>} colorStop Object with offset and color\n   * @return {Gradient} thisArg\n   */\n  addColorStop(colorStops: Record<string, string>) {\n    for (const position in colorStops) {\n      const color = new Color(colorStops[position]);\n      this.colorStops.push({\n        offset: parseFloat(position),\n        color: color.toRgb(),\n        opacity: color.getAlpha(),\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Returns object representation of a gradient\n   * @param {string[]} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object}\n   */\n  toObject(propertiesToInclude?: (keyof this | string)[]) {\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: this.type,\n      coords: { ...this.coords },\n      colorStops: this.colorStops.map((colorStop) => ({ ...colorStop })),\n      offsetX: this.offsetX,\n      offsetY: this.offsetY,\n      gradientUnits: this.gradientUnits,\n      gradientTransform: this.gradientTransform\n        ? [...this.gradientTransform]\n        : undefined,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of an gradient\n   * @param {FabricObject} object Object to create a gradient for\n   * @return {String} SVG representation of an gradient (linear/radial)\n   */\n  toSVG(\n    object: FabricObject,\n    {\n      additionalTransform: preTransform,\n    }: { additionalTransform?: string } = {},\n  ) {\n    const markup = [],\n      transform = (\n        this.gradientTransform\n          ? this.gradientTransform.concat()\n          : iMatrix.concat()\n      ) as TMat2D,\n      gradientUnits =\n        this.gradientUnits === 'pixels'\n          ? 'userSpaceOnUse'\n          : 'objectBoundingBox';\n    // colorStops must be sorted ascending, and guarded against deep mutations\n    const colorStops = this.colorStops\n      .map((colorStop) => ({ ...colorStop }))\n      .sort((a, b) => {\n        return a.offset - b.offset;\n      });\n\n    let offsetX = -this.offsetX,\n      offsetY = -this.offsetY;\n    if (gradientUnits === 'objectBoundingBox') {\n      offsetX /= object.width;\n      offsetY /= object.height;\n    } else {\n      offsetX += object.width / 2;\n      offsetY += object.height / 2;\n    }\n    // todo what about polygon/polyline?\n    if (isPath(object) && this.gradientUnits !== 'percentage') {\n      offsetX -= object.pathOffset.x;\n      offsetY -= object.pathOffset.y;\n    }\n    transform[4] -= offsetX;\n    transform[5] -= offsetY;\n\n    const commonAttributes = [\n      `id=\"SVGID_${this.id}\"`,\n      `gradientUnits=\"${gradientUnits}\"`,\n      `gradientTransform=\"${\n        preTransform ? preTransform + ' ' : ''\n      }${matrixToSVG(transform)}\"`,\n      '',\n    ].join(' ');\n\n    if (this.type === 'linear') {\n      const { x1, y1, x2, y2 } = this.coords;\n      markup.push(\n        '<linearGradient ',\n        commonAttributes,\n        ' x1=\"',\n        x1,\n        '\" y1=\"',\n        y1,\n        '\" x2=\"',\n        x2,\n        '\" y2=\"',\n        y2,\n        '\">\\n',\n      );\n    } else if (this.type === 'radial') {\n      const { x1, y1, x2, y2, r1, r2 } = this\n        .coords as GradientCoords<'radial'>;\n      const needsSwap = r1 > r2;\n      // svg radial gradient has just 1 radius. the biggest.\n      markup.push(\n        '<radialGradient ',\n        commonAttributes,\n        ' cx=\"',\n        needsSwap ? x1 : x2,\n        '\" cy=\"',\n        needsSwap ? y1 : y2,\n        '\" r=\"',\n        needsSwap ? r1 : r2,\n        '\" fx=\"',\n        needsSwap ? x2 : x1,\n        '\" fy=\"',\n        needsSwap ? y2 : y1,\n        '\">\\n',\n      );\n      if (needsSwap) {\n        // svg goes from internal to external radius. if radius are inverted, swap color stops.\n        colorStops.reverse(); //  mutates array\n        colorStops.forEach((colorStop) => {\n          colorStop.offset = 1 - colorStop.offset;\n        });\n      }\n      const minRadius = Math.min(r1, r2);\n      if (minRadius > 0) {\n        // i have to shift all colorStops and add new one in 0.\n        const maxRadius = Math.max(r1, r2),\n          percentageShift = minRadius / maxRadius;\n        colorStops.forEach((colorStop) => {\n          colorStop.offset += percentageShift * (1 - colorStop.offset);\n        });\n      }\n    }\n\n    colorStops.forEach(({ color, offset, opacity }) => {\n      markup.push(\n        '<stop ',\n        'offset=\"',\n        offset * 100 + '%',\n        '\" style=\"stop-color:',\n        color,\n        typeof opacity !== 'undefined' ? ';stop-opacity: ' + opacity : ';',\n        '\"/>\\n',\n      );\n    });\n\n    markup.push(\n      this.type === 'linear' ? '</linearGradient>' : '</radialGradient>',\n      '\\n',\n    );\n\n    return markup.join('');\n  }\n  /* _TO_SVG_END_ */\n\n  /**\n   * Returns an instance of CanvasGradient\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {CanvasGradient}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasGradient {\n    const { x1, y1, x2, y2, r1, r2 } = this.coords as GradientCoords<'radial'>;\n    const gradient =\n      this.type === 'linear'\n        ? ctx.createLinearGradient(x1, y1, x2, y2)\n        : ctx.createRadialGradient(x1, y1, r1, x2, y2, r2);\n\n    this.colorStops.forEach(({ color, opacity, offset }) => {\n      gradient.addColorStop(\n        offset,\n        typeof opacity !== 'undefined'\n          ? new Color(color).setAlpha(opacity).toRgba()\n          : color,\n      );\n    });\n\n    return gradient;\n  }\n\n  static async fromObject(\n    options: GradientOptions<'linear'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'radial'>,\n  ): Promise<Gradient<'radial'>>;\n  static async fromObject(\n    options: GradientOptions<'linear'> | GradientOptions<'radial'>,\n  ) {\n    const { colorStops, gradientTransform } = options;\n    return new this({\n      ...options,\n      colorStops: colorStops\n        ? colorStops.map((colorStop) => ({ ...colorStop }))\n        : undefined,\n      gradientTransform: gradientTransform ? [...gradientTransform] : undefined,\n    });\n  }\n\n  /* _FROM_SVG_START_ */\n  /**\n   * Returns {@link Gradient} instance from an SVG element\n   * @static\n   * @memberOf Gradient\n   * @param {SVGGradientElement} el SVG gradient element\n   * @param {FabricObject} instance\n   * @param {String} opacity A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.\n   * @param {SVGOptions} svgOptions an object containing the size of the SVG in order to parse correctly gradients\n   * that uses gradientUnits as 'userSpaceOnUse' and percentages.\n   * @return {Gradient} Gradient instance\n   * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement\n   * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement\n   *\n   *  @example\n   *\n   *  <linearGradient id=\"linearGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\"/>\n   *    <stop offset=\"100%\" stop-color=\"black\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <linearGradient id=\"linearGrad2\">\n   *    <stop offset=\"0\" style=\"stop-color:rgb(255,255,255)\"/>\n   *    <stop offset=\"1\" style=\"stop-color:rgb(0,0,0)\"/>\n   *  </linearGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad1\">\n   *    <stop offset=\"0%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *    <stop offset=\"50%\" stop-color=\"black\" stop-opacity=\"0.5\" />\n   *    <stop offset=\"100%\" stop-color=\"white\" stop-opacity=\"1\" />\n   *  </radialGradient>\n   *\n   *  OR\n   *\n   *  <radialGradient id=\"radialGrad2\">\n   *    <stop offset=\"0\" stop-color=\"rgb(255,255,255)\" />\n   *    <stop offset=\"0.5\" stop-color=\"rgb(0,0,0)\" />\n   *    <stop offset=\"1\" stop-color=\"rgb(255,255,255)\" />\n   *  </radialGradient>\n   *\n   */\n  static fromElement(\n    el: SVGGradientElement,\n    instance: FabricObject,\n    svgOptions: SVGOptions,\n  ): Gradient<GradientType> {\n    const gradientUnits = parseGradientUnits(el);\n    const center = instance._findCenterFromElement();\n    return new this({\n      id: el.getAttribute('id') || undefined,\n      type: parseType(el),\n      coords: parseCoords(el, {\n        width: svgOptions.viewBoxWidth || svgOptions.width,\n        height: svgOptions.viewBoxHeight || svgOptions.height,\n      }),\n      colorStops: parseColorStops(el, svgOptions.opacity),\n      gradientUnits,\n      gradientTransform: parseTransformAttribute(\n        el.getAttribute('gradientTransform') || '',\n      ),\n      ...(gradientUnits === 'pixels'\n        ? {\n            offsetX: instance.width / 2 - center.x,\n            offsetY: instance.height / 2 - center.y,\n          }\n        : {\n            offsetX: 0,\n            offsetY: 0,\n          }),\n    });\n  }\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Gradient, 'gradient');\nclassRegistry.setClass(Gradient, 'linear');\nclassRegistry.setClass(Gradient, 'radial');\n", "import { config } from '../config';\nimport type { Abortable, TCrossOrigin, TMat2D, TSize } from '../typedefs';\nimport { ifNaN } from '../util/internals/ifNaN';\nimport { uid } from '../util/internals/uid';\nimport { loadImage } from '../util/misc/objectEnlive';\nimport { pick } from '../util/misc/pick';\nimport { toFixed } from '../util/misc/toFixed';\nimport { classRegistry } from '../ClassRegistry';\nimport type {\n  PatternRepeat,\n  PatternOptions,\n  SerializedPatternOptions,\n} from './types';\nimport { log } from '../util/internals/console';\n\n/**\n * @see {@link http://fabricjs.com/patterns demo}\n * @see {@link http://fabricjs.com/dynamic-patterns demo}\n */\nexport class Pattern {\n  static type = 'Pattern';\n\n  /**\n   * Legacy identifier of the class. Prefer using this.constructor.type 'Pattern'\n   * or utils like isPattern, or instance of to indentify a pattern in your code.\n   * Will be removed in future versiones\n   * @TODO add sustainable warning message\n   * @type string\n   * @deprecated\n   */\n  get type() {\n    return 'pattern';\n  }\n\n  set type(value) {\n    log('warn', 'Setting type has no effect', value);\n  }\n\n  /**\n   * @type PatternRepeat\n   * @defaults\n   */\n  repeat: PatternRepeat = 'repeat';\n\n  /**\n   * Pattern horizontal offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetX = 0;\n\n  /**\n   * Pattern vertical offset from object's left/top corner\n   * @type Number\n   * @default\n   */\n  offsetY = 0;\n\n  /**\n   * @type TCrossOrigin\n   * @default\n   */\n  crossOrigin: TCrossOrigin = '';\n\n  /**\n   * transform matrix to change the pattern, imported from svgs.\n   * @todo verify if using the identity matrix as default makes the rest of the code more easy\n   * @type Array\n   * @default\n   */\n  declare patternTransform?: TMat2D;\n\n  /**\n   * The actual pixel source of the pattern\n   */\n  declare source: CanvasImageSource;\n\n  /**\n   * If true, this object will not be exported during the serialization of a canvas\n   * @type boolean\n   */\n  declare excludeFromExport?: boolean;\n\n  /**\n   * ID used for SVG export functionalities\n   * @type number\n   */\n  declare readonly id: number;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   * @param {option.source} [source] the pattern source, eventually empty or a drawable\n   */\n  constructor(options: PatternOptions) {\n    this.id = uid();\n    Object.assign(this, options);\n  }\n\n  /**\n   * @returns true if {@link source} is an <img> element\n   */\n  isImageSource(): this is { source: HTMLImageElement } {\n    return (\n      !!this.source && typeof (this.source as HTMLImageElement).src === 'string'\n    );\n  }\n\n  /**\n   * @returns true if {@link source} is a <canvas> element\n   */\n  isCanvasSource(): this is { source: HTMLCanvasElement } {\n    return !!this.source && !!(this.source as HTMLCanvasElement).toDataURL;\n  }\n\n  sourceToString(): string {\n    return this.isImageSource()\n      ? this.source.src\n      : this.isCanvasSource()\n        ? this.source.toDataURL()\n        : '';\n  }\n\n  /**\n   * Returns an instance of CanvasPattern\n   * @param {CanvasRenderingContext2D} ctx Context to create pattern\n   * @return {CanvasPattern}\n   */\n  toLive(ctx: CanvasRenderingContext2D): CanvasPattern | null {\n    if (\n      // if the image failed to load, return, and allow rest to continue loading\n      !this.source ||\n      // if an image\n      (this.isImageSource() &&\n        (!this.source.complete ||\n          this.source.naturalWidth === 0 ||\n          this.source.naturalHeight === 0))\n    ) {\n      return null;\n    }\n\n    return ctx.createPattern(this.source, this.repeat)!;\n  }\n\n  /**\n   * Returns object representation of a pattern\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {object} Object representation of a pattern instance\n   */\n  toObject(propertiesToInclude: string[] = []): Record<string, any> {\n    const { repeat, crossOrigin } = this;\n    return {\n      ...pick(this, propertiesToInclude as (keyof this)[]),\n      type: 'pattern',\n      source: this.sourceToString(),\n      repeat,\n      crossOrigin,\n      offsetX: toFixed(this.offsetX, config.NUM_FRACTION_DIGITS),\n      offsetY: toFixed(this.offsetY, config.NUM_FRACTION_DIGITS),\n      patternTransform: this.patternTransform\n        ? [...this.patternTransform]\n        : null,\n    };\n  }\n\n  /* _TO_SVG_START_ */\n  /**\n   * Returns SVG representation of a pattern\n   */\n  toSVG({ width, height }: TSize): string {\n    const { source: patternSource, repeat, id } = this,\n      patternOffsetX = ifNaN(this.offsetX / width, 0),\n      patternOffsetY = ifNaN(this.offsetY / height, 0),\n      patternWidth =\n        repeat === 'repeat-y' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetX || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).width as number) / width,\n              0,\n            ),\n      patternHeight =\n        repeat === 'repeat-x' || repeat === 'no-repeat'\n          ? 1 + Math.abs(patternOffsetY || 0)\n          : ifNaN(\n              ((patternSource as HTMLImageElement).height as number) / height,\n              0,\n            );\n\n    return [\n      `<pattern id=\"SVGID_${id}\" x=\"${patternOffsetX}\" y=\"${patternOffsetY}\" width=\"${patternWidth}\" height=\"${patternHeight}\">`,\n      `<image x=\"0\" y=\"0\" width=\"${\n        (patternSource as HTMLImageElement).width\n      }\" height=\"${\n        (patternSource as HTMLImageElement).height\n      }\" xlink:href=\"${this.sourceToString()}\"></image>`,\n      `</pattern>`,\n      '',\n    ].join('\\n');\n  }\n  /* _TO_SVG_END_ */\n\n  static async fromObject(\n    {\n      type,\n      source,\n      patternTransform,\n      ...otherOptions\n    }: SerializedPatternOptions,\n    options?: Abortable,\n  ): Promise<Pattern> {\n    const img = await loadImage(source, {\n      ...options,\n      crossOrigin: otherOptions.crossOrigin,\n    });\n    return new this({\n      ...otherOptions,\n      patternTransform:\n        patternTransform && (patternTransform.slice(0) as TMat2D),\n      source: img,\n    });\n  }\n}\n\nclassRegistry.setClass(Pattern);\n// kept for compatibility reason\nclassRegistry.setClass(Pattern, 'pattern');\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport type { Shadow } from '../Shadow';\nimport type { Canvas } from '../canvas/Canvas';\nimport type { TBrushEventData } from './typedefs';\n\n/**\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nexport abstract class BaseBrush {\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color = 'rgb(0, 0, 0)';\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width = 1;\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type Shadow\n   * @default\n   */\n  shadow: Shadow | null = null;\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: CanvasLineCap = 'round';\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: CanvasLineJoin = 'round';\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit = 10;\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: number[] | null = null;\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n   */\n\n  limitedToCanvasSize = false;\n\n  /**\n   * @todo add type\n   */\n  declare canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  abstract _render(): void;\n  abstract onMouseDown(pointer: Point, ev: TBrushEventData): void;\n  abstract onMouseMove(pointer: Point, ev: TBrushEventData): void;\n  /**\n   * @returns true if brush should continue blocking interaction\n   */\n  abstract onMouseUp(ev: TBrushEventData): boolean | void;\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  }\n\n  /**\n   * Sets the transformation on given context\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @private\n   */\n  protected _saveAndTransform(ctx: CanvasRenderingContext2D) {\n    const v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  }\n\n  protected needsFullRender() {\n    const color = new Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  }\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  protected _setShadow() {\n    if (!this.shadow || !this.canvas) {\n      return;\n    }\n\n    const canvas = this.canvas,\n      shadow = this.shadow,\n      ctx = canvas.contextTop,\n      zoom = canvas.getZoom() * canvas.getRetinaScaling();\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  }\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  protected _resetShadow() {\n    const ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  }\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n   */\n  protected _isOutSideCanvas(pointer: Point) {\n    return (\n      pointer.x < 0 ||\n      pointer.x > this.canvas.getWidth() ||\n      pointer.y < 0 ||\n      pointer.y > this.canvas.getHeight()\n    );\n  }\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { toFixed } from '../util/misc/toFixed';\nimport {\n  getBoundsOfCurve,\n  joinPath,\n  makePathSimpler,\n  parsePath,\n} from '../util/path';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type {\n  TComplexPathData,\n  TPathSegmentInfo,\n  TSimplePathData,\n} from '../util/path/typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type {\n  TBBox,\n  TClassProperties,\n  TSVGReviver,\n  TOptions,\n} from '../typedefs';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\ninterface UniquePathProps {\n  sourcePath?: string;\n  path?: TSimplePathData;\n}\n\nexport interface SerializedPathProps\n  extends SerializedObjectProps,\n    UniquePathProps {}\n\nexport interface PathProps extends FabricObjectProps, UniquePathProps {}\n\nexport interface IPathBBox extends TBBox {\n  left: number;\n  top: number;\n  pathOffset: Point;\n}\n\nexport class Path<\n  Props extends TOptions<PathProps> = Partial<PathProps>,\n  SProps extends SerializedPathProps = SerializedPathProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Array of path points\n   * @type Array\n   * @default\n   */\n  declare path: TSimplePathData;\n\n  declare pathOffset: Point;\n\n  declare sourcePath?: string;\n\n  declare segmentsInfo?: TPathSegmentInfo[];\n\n  static type = 'Path';\n\n  static cacheProperties = [...cacheProperties, 'path', 'fillRule'];\n\n  /**\n   * Constructor\n   * @param {TComplexPathData} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {Partial<PathProps>} [options] Options object\n   * @return {Path} thisArg\n   */\n  constructor(\n    path: TComplexPathData | string,\n    // todo: evaluate this spread here\n    { path: _, left, top, ...options }: Partial<Props> = {},\n  ) {\n    super();\n    Object.assign(this, Path.ownDefaults);\n    this.setOptions(options);\n    this._setPath(path || [], true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {TComplexPathData | string} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n   * @param {boolean} [adjustPosition] pass true to reposition the object according to the bounding box\n   * @returns {Point} top left position of the bounding box, useful for complementary positioning\n   */\n  _setPath(path: TComplexPathData | string, adjustPosition?: boolean) {\n    this.path = makePathSimpler(Array.isArray(path) ? path : parsePath(path));\n    this.setBoundingBox(adjustPosition);\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = this._calcBoundsFromPath();\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _renderPathCommands(ctx: CanvasRenderingContext2D) {\n    const l = -this.pathOffset.x,\n      t = -this.pathOffset.y;\n\n    ctx.beginPath();\n\n    for (const command of this.path) {\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          ctx.lineTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'M': // moveTo, absolute\n          ctx.moveTo(command[1] + l, command[2] + t);\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          ctx.bezierCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n            command[5] + l,\n            command[6] + t,\n          );\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          ctx.quadraticCurveTo(\n            command[1] + l,\n            command[2] + t,\n            command[3] + l,\n            command[4] + t,\n          );\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render path on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    this._renderPathCommands(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {string} string representation of an instance\n   */\n  toString() {\n    return `#<Path (${this.complexity()}): { \"top\": ${this.top}, \"left\": ${\n      this.left\n    } }>`;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      path: this.path.map((pathCmd) => pathCmd.slice()),\n    };\n  }\n\n  /**\n   * Returns dataless object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toDatalessObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const o = this.toObject<T, K>(propertiesToInclude);\n    if (this.sourcePath) {\n      delete o.path;\n      o.sourcePath = this.sourcePath;\n    }\n    return o;\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const path = joinPath(this.path, config.NUM_FRACTION_DIGITS);\n    return [\n      '<path ',\n      'COMMON_PARTS',\n      `d=\"${path}\" stroke-linecap=\"round\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @return the path command's translate transform attribute\n   */\n  _getOffsetTransform() {\n    const digits = config.NUM_FRACTION_DIGITS;\n    return ` translate(${toFixed(-this.pathOffset.x, digits)}, ${toFixed(\n      -this.pathOffset.y,\n      digits,\n    )})`;\n  }\n\n  /**\n   * Returns svg clipPath representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toClipPathSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return (\n      '\\t' +\n      this._createBaseClipPathSVGMarkup(this._toSVG(), {\n        reviver,\n        additionalTransform: additionalTransform,\n      })\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @param {Function} [reviver] Method for further parsing of svg representation.\n   * @return {string} svg representation of an instance\n   */\n  toSVG(reviver?: TSVGReviver): string {\n    const additionalTransform = this._getOffsetTransform();\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      additionalTransform: additionalTransform,\n    });\n  }\n\n  /**\n   * Returns number representation of an instance complexity\n   * @return {number} complexity of this instance\n   */\n  complexity() {\n    return this.path.length;\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { width, height, pathOffset } = this._calcDimensions();\n    this.set({ width, height, pathOffset });\n    // using pathOffset because it match the use case.\n    // if pathOffset change here we need to use left + width/2 , top + height/2\n    adjustPosition && this.setPositionByOrigin(pathOffset, CENTER, CENTER);\n  }\n\n  _calcBoundsFromPath(): TBBox {\n    const bounds: XY[] = [];\n    let subpathStartX = 0,\n      subpathStartY = 0,\n      x = 0, // current x\n      y = 0; // current y\n\n    for (const command of this.path) {\n      // current instruction\n      switch (\n        command[0] // first letter\n      ) {\n        case 'L': // lineto, absolute\n          x = command[1];\n          y = command[2];\n          bounds.push({ x: subpathStartX, y: subpathStartY }, { x, y });\n          break;\n\n        case 'M': // moveTo, absolute\n          x = command[1];\n          y = command[2];\n          subpathStartX = x;\n          subpathStartY = y;\n          break;\n\n        case 'C': // bezierCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n              command[5],\n              command[6],\n            ),\n          );\n          x = command[5];\n          y = command[6];\n          break;\n\n        case 'Q': // quadraticCurveTo, absolute\n          bounds.push(\n            ...getBoundsOfCurve(\n              x,\n              y,\n              command[1],\n              command[2],\n              command[1],\n              command[2],\n              command[3],\n              command[4],\n            ),\n          );\n          x = command[3];\n          y = command[4];\n          break;\n\n        case 'Z':\n          x = subpathStartX;\n          y = subpathStartY;\n          break;\n      }\n    }\n    return makeBoundingBoxFromPoints(bounds);\n  }\n\n  /**\n   * @private\n   */\n  _calcDimensions(): IPathBBox {\n    const bbox = this._calcBoundsFromPath();\n\n    return {\n      ...bbox,\n      pathOffset: new Point(\n        bbox.left + bbox.width / 2,\n        bbox.top + bbox.height / 2,\n      ),\n    };\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by `Path.fromElement`)\n   * @static\n   * @memberOf Path\n   * @see http://www.w3.org/TR/SVG/paths.html#PathElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'd'];\n\n  /**\n   * Creates an instance of Path from an object\n   * @static\n   * @memberOf Path\n   * @param {Object} object\n   * @returns {Promise<Path>}\n   */\n  static fromObject<T extends TOptions<SerializedPathProps>>(object: T) {\n    return this._fromObject<Path>(object, {\n      extraParam: 'path',\n    });\n  }\n\n  /**\n   * Creates an instance of Path from an SVG <path> element\n   * @static\n   * @memberOf Path\n   * @param {HTMLElement} element to parse\n   * @param {Partial<PathProps>} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Partial<PathProps>,\n    cssRules?: CSSRules,\n  ) {\n    const { d, ...parsedAttributes } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return new this(d, {\n      ...parsedAttributes,\n      ...options,\n      // we pass undefined to instruct the constructor to position the object using the bbox\n      left: undefined,\n      top: undefined,\n    });\n  }\n}\n\nclassRegistry.setClass(Path);\nclassRegistry.setSVGClass(Path);\n\n/* _FROM_SVG_START_ */\n", "import type { ModifierKey, TEvent } from '../EventTypeDefs';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Path } from '../shapes/Path';\nimport { getSmoothPathFromPoints, joinPath } from '../util/path';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\n/**\n * @private\n * @param {TSimplePathData} pathData SVG path commands\n * @returns {boolean}\n */\nfunction isEmptySVGPath(pathData: TSimplePathData): boolean {\n  return joinPath(pathData) === 'M 0 0 Q 0 0 0 0 L 0 0';\n}\n\nexport class PencilBrush extends BaseBrush {\n  /**\n   * Discard points that are less than `decimate` pixel distant from each other\n   * @type Number\n   * @default 0.4\n   */\n  decimate = 0.4;\n\n  /**\n   * Draws a straight line between last recorded point to current pointer\n   * Used for `shift` functionality\n   *\n   * @type boolean\n   * @default false\n   */\n  drawStraightLine = false;\n\n  /**\n   * The event modifier key that makes the brush draw a straight line.\n   * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n   * @type {ModifierKey | undefined | null}\n   */\n  straightLineKey: ModifierKey | undefined | null = 'shiftKey';\n\n  private declare _points: Point[];\n  private declare _hasStraightLine: boolean;\n  private declare oldEnd?: Point;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this._points = [];\n    this._hasStraightLine = false;\n  }\n\n  needsFullRender() {\n    return super.needsFullRender() || this._hasStraightLine;\n  }\n\n  static drawSegment(ctx: CanvasRenderingContext2D, p1: Point, p2: Point) {\n    const midPoint = p1.midPointFrom(p2);\n    ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n    return midPoint;\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    this._prepareForDrawing(pointer);\n    // capture coordinates immediately\n    // this allows to draw dots (when movement never occurs)\n    this._addPoint(pointer);\n    this._render();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point, { e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return;\n    }\n    this.drawStraightLine = !!this.straightLineKey && e[this.straightLineKey];\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this._addPoint(pointer) && this._points.length > 1) {\n      if (this.needsFullRender()) {\n        // redraw curve\n        // clear top canvas\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._render();\n      } else {\n        const points = this._points,\n          length = points.length,\n          ctx = this.canvas.contextTop;\n        // draw the curve update\n        this._saveAndTransform(ctx);\n        if (this.oldEnd) {\n          ctx.beginPath();\n          ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n        }\n        this.oldEnd = PencilBrush.drawSegment(\n          ctx,\n          points[length - 2],\n          points[length - 1],\n        );\n        ctx.stroke();\n        ctx.restore();\n      }\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp({ e }: TEvent) {\n    if (!this.canvas._isMainEvent(e)) {\n      return true;\n    }\n    this.drawStraightLine = false;\n    this.oldEnd = undefined;\n    this._finalizeAndAddPath();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {Point} pointer Actual mouse position related to the canvas.\n   */\n  _prepareForDrawing(pointer: Point) {\n    this._reset();\n    this._addPoint(pointer);\n    this.canvas.contextTop.moveTo(pointer.x, pointer.y);\n  }\n\n  /**\n   * @private\n   * @param {Point} point Point to be added to points array\n   */\n  _addPoint(point: Point) {\n    if (\n      this._points.length > 1 &&\n      point.eq(this._points[this._points.length - 1])\n    ) {\n      return false;\n    }\n    if (this.drawStraightLine && this._points.length > 1) {\n      this._hasStraightLine = true;\n      this._points.pop();\n    }\n    this._points.push(point);\n    return true;\n  }\n\n  /**\n   * Clear points array and set contextTop canvas style.\n   * @private\n   */\n  _reset() {\n    this._points = [];\n    this._setBrushStyles(this.canvas.contextTop);\n    this._setShadow();\n    this._hasStraightLine = false;\n  }\n\n  /**\n   * Draw a smooth path on the topCanvas using quadraticCurveTo\n   * @private\n   * @param {CanvasRenderingContext2D} [ctx]\n   */\n  _render(ctx: CanvasRenderingContext2D = this.canvas.contextTop) {\n    let p1 = this._points[0],\n      p2 = this._points[1];\n    this._saveAndTransform(ctx);\n    ctx.beginPath();\n    //if we only have 2 points in the path and they are the same\n    //it means that the user only clicked the canvas without moving the mouse\n    //then we should be drawing a dot. A path isn't drawn between two identical dots\n    //that's why we set them apart a bit\n    if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n      const width = this.width / 1000;\n      p1.x -= width;\n      p2.x += width;\n    }\n    ctx.moveTo(p1.x, p1.y);\n\n    for (let i = 1; i < this._points.length; i++) {\n      // we pick the point between pi + 1 & pi + 2 as the\n      // end point and p1 as our control point.\n      PencilBrush.drawSegment(ctx, p1, p2);\n      p1 = this._points[i];\n      p2 = this._points[i + 1];\n    }\n    // Draw last line as a straight line while\n    // we wait for the next point to be able to calculate\n    // the bezier control point\n    ctx.lineTo(p1.x, p1.y);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  /**\n   * Converts points to SVG path\n   * @param {Point[]} points Array of points\n   * @return {TSimplePathData} SVG path commands\n   */\n  convertPointsToSVGPath(points: Point[]): TSimplePathData {\n    const correction = this.width / 1000;\n    return getSmoothPathFromPoints(points, correction);\n  }\n\n  /**\n   * Creates a Path object to add on canvas\n   * @param {TSimplePathData} pathData Path data\n   * @return {Path} Path to add on canvas\n   */\n  createPath(pathData: TSimplePathData): Path {\n    const path = new Path(pathData, {\n      fill: null,\n      stroke: this.color,\n      strokeWidth: this.width,\n      strokeLineCap: this.strokeLineCap,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeDashArray: this.strokeDashArray,\n    });\n    if (this.shadow) {\n      this.shadow.affectStroke = true;\n      path.shadow = new Shadow(this.shadow);\n    }\n\n    return path;\n  }\n\n  /**\n   * Decimate points array with the decimate value\n   */\n  decimatePoints(points: Point[], distance: number) {\n    if (points.length <= 2) {\n      return points;\n    }\n    let lastPoint = points[0],\n      cDistance;\n    const zoom = this.canvas.getZoom(),\n      adjustedDistance = Math.pow(distance / zoom, 2),\n      l = points.length - 1,\n      newPoints = [lastPoint];\n    for (let i = 1; i < l - 1; i++) {\n      cDistance =\n        Math.pow(lastPoint.x - points[i].x, 2) +\n        Math.pow(lastPoint.y - points[i].y, 2);\n      if (cDistance >= adjustedDistance) {\n        lastPoint = points[i];\n        newPoints.push(lastPoint);\n      }\n    }\n    // Add the last point from the original line to the end of the array.\n    // This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n    newPoints.push(points[l]);\n    return newPoints;\n  }\n\n  /**\n   * On mouseup after drawing the path on contextTop canvas\n   * we use the points captured to create an new Path object\n   * and add it to the canvas.\n   */\n  _finalizeAndAddPath() {\n    const ctx = this.canvas.contextTop;\n    ctx.closePath();\n    if (this.decimate) {\n      this._points = this.decimatePoints(this._points, this.decimate);\n    }\n    const pathData = this.convertPointsToSVGPath(this._points);\n    if (isEmptySVGPath(pathData)) {\n      // do not create 0 width/height paths, as they are\n      // rendered inconsistently across browsers\n      // Firefox 4, for example, renders a dot,\n      // whereas Chrome 10 renders nothing\n      this.canvas.requestRenderAll();\n      return;\n    }\n\n    const path = this.createPath(pathData);\n    this.canvas.clearContext(this.canvas.contextTop);\n    this.canvas.fire('before:path:created', { path: path });\n    this.canvas.add(path);\n    this.canvas.requestRenderAll();\n    path.setCoords();\n    this._resetShadow();\n\n    // fire event 'path' created\n    this.canvas.fire('path:created', { path: path });\n  }\n}\n", "import type { ObjectEvents } from '../EventTypeDefs';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { cos } from '../util/misc/cos';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { sin } from '../util/misc/sin';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { CSSRules } from '../parser/typedefs';\nimport { SCALE_X, SCALE_Y } from '../constants';\n\ninterface UniqueCircleProps {\n  /**\n   * Radius of this circle\n   * @type Number\n   * @default 0\n   */\n  radius: number;\n\n  /**\n   * Angle for the start of the circle, in degrees.\n   * @type TDegree 0 - 359\n   * @default 0\n   */\n  startAngle: number;\n\n  /**\n   * Angle for the end of the circle, in degrees\n   * @type TDegree 1 - 360\n   * @default 360\n   */\n  endAngle: number;\n\n  /**\n   * Orientation for the direction of the circle.\n   * Setting to true will switch the arc of the circle to traverse from startAngle to endAngle in a counter-clockwise direction.\n   * Note: this will only change how the circle is drawn, and does not affect rotational transformation.\n   * @default false\n   */\n  counterClockwise: boolean;\n}\n\nexport interface SerializedCircleProps\n  extends SerializedObjectProps,\n    UniqueCircleProps {}\n\nexport interface CircleProps extends FabricObjectProps, UniqueCircleProps {}\n\nconst CIRCLE_PROPS = [\n  'radius',\n  'startAngle',\n  'endAngle',\n  'counterClockwise',\n] as const;\n\nexport const circleDefaultValues: Partial<TClassProperties<Circle>> = {\n  radius: 0,\n  startAngle: 0,\n  endAngle: 360,\n  counterClockwise: false,\n};\n\nexport class Circle<\n    Props extends TOptions<CircleProps> = Partial<CircleProps>,\n    SProps extends SerializedCircleProps = SerializedCircleProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueCircleProps\n{\n  declare radius: number;\n  declare startAngle: number;\n  declare endAngle: number;\n  declare counterClockwise: boolean;\n\n  static type = 'Circle';\n\n  static cacheProperties = [...cacheProperties, ...CIRCLE_PROPS];\n\n  static ownDefaults = circleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Circle.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Circle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n\n    if (key === 'radius') {\n      this.setRadius(value);\n    }\n\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.arc(\n      0,\n      0,\n      this.radius,\n      degreesToRadians(this.startAngle),\n      degreesToRadians(this.endAngle),\n      this.counterClockwise,\n    );\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusX(): number {\n    return this.get('radius') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRadiusY(): number {\n    return this.get('radius') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Sets radius of an object (and updates width accordingly)\n   */\n  setRadius(value: number) {\n    this.radius = value;\n    this.set({ width: value * 2, height: value * 2 });\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...CIRCLE_PROPS, ...propertiesToInclude]);\n  }\n\n  /* _TO_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    const angle = (this.endAngle - this.startAngle) % 360;\n\n    if (angle === 0) {\n      return [\n        '<circle ',\n        'COMMON_PARTS',\n        'cx=\"0\" cy=\"0\" ',\n        'r=\"',\n        `${this.radius}`,\n        '\" />\\n',\n      ];\n    } else {\n      const { radius } = this;\n      const start = degreesToRadians(this.startAngle),\n        end = degreesToRadians(this.endAngle),\n        startX = cos(start) * radius,\n        startY = sin(start) * radius,\n        endX = cos(end) * radius,\n        endY = sin(end) * radius,\n        largeFlag = angle > 180 ? 1 : 0,\n        sweepFlag = this.counterClockwise ? 0 : 1;\n      return [\n        `<path d=\"M ${startX} ${startY} A ${radius} ${radius} 0 ${largeFlag} ${sweepFlag} ${endX} ${endY}\" `,\n        'COMMON_PARTS',\n        ' />\\n',\n      ];\n    }\n  }\n  /* _TO_SVG_END_ */\n\n  /* _FROM_SVG_START_ */\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Circle.fromElement})\n   * @static\n   * @memberOf Circle\n   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement\n   */\n  static ATTRIBUTE_NAMES = ['cx', 'cy', 'r', ...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns {@link Circle} instance from an SVG element\n   * @static\n   * @memberOf Circle\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Partial Circle object to default missing properties on the element.\n   * @throws {Error} If value of `r` attribute is missing or invalid\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ): Promise<Circle> {\n    const {\n      left = 0,\n      top = 0,\n      radius = 0,\n      ...otherParsedAttributes\n    } = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    ) as Partial<CircleProps>;\n\n    // this probably requires to be fixed for default origins not being top/left.\n\n    return new this({\n      ...otherParsedAttributes,\n      radius,\n      left: left - radius,\n      top: top - radius,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * @todo how do we declare this??\n   */\n  static fromObject<T extends TOptions<SerializedCircleProps>>(object: T) {\n    return super._fromObject<Circle>(object);\n  }\n}\n\nclassRegistry.setClass(Circle);\nclassRegistry.setSVGClass(Circle);\n", "import { Color } from '../color/Color';\nimport type { Point } from '../Point';\nimport { Shadow } from '../Shadow';\nimport { Circle } from '../shapes/Circle';\nimport { Group } from '../shapes/Group';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { CircleBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\nexport class CircleBrush extends BaseBrush {\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  declare points: CircleBrushPoint[];\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.points = [];\n  }\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Point} pointer\n   */\n  drawDot(pointer: Point) {\n    const point = this.addPoint(pointer),\n      ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  }\n\n  dot(ctx: CanvasRenderingContext2D, point: CircleBrushPoint) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown(pointer: Point) {\n    this.points = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  }\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render() {\n    const ctx = this.canvas.contextTop,\n      points = this.points;\n    this._saveAndTransform(ctx);\n    for (let i = 0; i < points.length; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    } else {\n      this.drawDot(pointer);\n    }\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const circles: Circle[] = [];\n\n    for (let i = 0; i < this.points.length; i++) {\n      const point = this.points[i],\n        circle = new Circle({\n          radius: point.radius,\n          left: point.x,\n          top: point.y,\n          originX: CENTER,\n          originY: CENTER,\n          fill: point.fill,\n        });\n\n      this.shadow && (circle.shadow = new Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    const group = new Group(circles, { canvas: this.canvas });\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  /**\n   * @param {Object} pointer\n   * @return {Point} Just added pointer point\n   */\n  addPoint({ x, y }: Point) {\n    const pointerPoint: CircleBrushPoint = {\n      x,\n      y,\n      radius: getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,\n      fill: new Color(this.color).setAlpha(getRandomInt(0, 100) / 100).toRgba(),\n    };\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n}\n", "import type { Point } from '../Point';\nimport { Group } from '../shapes/Group';\nimport { Shadow } from '../Shadow';\nimport { Rect } from '../shapes/Rect';\nimport { getRandomInt } from '../util/internals/getRandomInt';\nimport type { Canvas } from '../canvas/Canvas';\nimport { BaseBrush } from './BaseBrush';\nimport type { SprayBrushPoint } from './typedefs';\nimport { CENTER } from '../constants';\n\n/**\n *\n * @param rects\n * @returns\n */\nfunction getUniqueRects(rects: Rect[]) {\n  const uniqueRects: Record<string, boolean> = {};\n  const uniqueRectsArray: Rect[] = [];\n\n  for (let i = 0, key: string; i < rects.length; i++) {\n    key = `${rects[i].left}${rects[i].top}`;\n    if (!uniqueRects[key]) {\n      uniqueRects[key] = true;\n      uniqueRectsArray.push(rects[i]);\n    }\n  }\n\n  return uniqueRectsArray;\n}\n\nexport class SprayBrush extends BaseBrush {\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width = 10;\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density = 20;\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth = 1;\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance = 1;\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity = false;\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping = true;\n\n  private declare sprayChunks: SprayBrushPoint[][];\n\n  private declare sprayChunk: SprayBrushPoint[];\n\n  /**\n   * Constructor\n   * @param {Canvas} canvas\n   * @return {SprayBrush} Instance of a spray brush\n   */\n  constructor(canvas: Canvas) {\n    super(canvas);\n    this.sprayChunks = [];\n    this.sprayChunk = [];\n  }\n\n  /**\n   * Invoked on mouse down\n   * @param {Point} pointer\n   */\n  onMouseDown(pointer: Point) {\n    this.sprayChunks = [];\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse move\n   * @param {Point} pointer\n   */\n  onMouseMove(pointer: Point) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.renderChunck(this.sprayChunk);\n  }\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp() {\n    const originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    const rects: Rect[] = [];\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      const sprayChunk = this.sprayChunks[i];\n      for (let j = 0; j < sprayChunk.length; j++) {\n        const chunck = sprayChunk[j];\n        const rect = new Rect({\n          width: chunck.width,\n          height: chunck.width,\n          left: chunck.x + 1,\n          top: chunck.y + 1,\n          originX: CENTER,\n          originY: CENTER,\n          fill: this.color,\n        });\n        rects.push(rect);\n      }\n    }\n\n    const group = new Group(\n      this.optimizeOverlapping ? getUniqueRects(rects) : rects,\n      {\n        objectCaching: true,\n        subTargetCheck: false,\n        interactive: false,\n      },\n    );\n    this.shadow && group.set('shadow', new Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  }\n\n  renderChunck(sprayChunck: SprayBrushPoint[]) {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < sprayChunck.length; i++) {\n      const point = sprayChunck[i];\n      ctx.globalAlpha = point.opacity;\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Render all spray chunks\n   */\n  _render() {\n    const ctx = this.canvas.contextTop;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (let i = 0; i < this.sprayChunks.length; i++) {\n      this.renderChunck(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @param {Point} pointer\n   */\n  addSprayChunk(pointer: Point) {\n    this.sprayChunk = [];\n    const radius = this.width / 2;\n\n    for (let i = 0; i < this.density; i++) {\n      this.sprayChunk.push({\n        x: getRandomInt(pointer.x - radius, pointer.x + radius),\n        y: getRandomInt(pointer.y - radius, pointer.y + radius),\n        width: this.dotWidthVariance\n          ? getRandomInt(\n              // bottom clamp width to 1\n              Math.max(1, this.dotWidth - this.dotWidthVariance),\n              this.dotWidth + this.dotWidthVariance,\n            )\n          : this.dotWidth,\n        opacity: this.randomOpacity ? getRandomInt(0, 100) / 100 : 1,\n      });\n    }\n\n    this.sprayChunks.push(this.sprayChunk);\n  }\n}\n", "import { Pattern } from '../Pattern';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { Canvas } from '../canvas/Canvas';\nimport { PencilBrush } from './PencilBrush';\nimport type { TSimplePathData } from '../util/path/typedefs';\n\nexport class PatternBrush extends PencilBrush {\n  declare source?: CanvasImageSource;\n\n  constructor(canvas: Canvas) {\n    super(canvas);\n  }\n\n  getPatternSrc() {\n    const dotWidth = 20,\n      dotDistance = 5,\n      patternCanvas = createCanvasElement(),\n      patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n    if (patternCtx) {\n      patternCtx.fillStyle = this.color;\n      patternCtx.beginPath();\n      patternCtx.arc(\n        dotWidth / 2,\n        dotWidth / 2,\n        dotWidth / 2,\n        0,\n        Math.PI * 2,\n        false,\n      );\n      patternCtx.closePath();\n      patternCtx.fill();\n    }\n    return patternCanvas;\n  }\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern(ctx: CanvasRenderingContext2D) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  }\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles(ctx: CanvasRenderingContext2D) {\n    super._setBrushStyles(ctx);\n    const pattern = this.getPattern(ctx);\n    pattern && (ctx.strokeStyle = pattern);\n  }\n\n  /**\n   * Creates path\n   */\n  createPath(pathData: TSimplePathData) {\n    const path = super.createPath(pathData),\n      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new Pattern({\n      source: this.source || this.getPatternSrc(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y,\n    });\n    return path;\n  }\n}\n", "import { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport { Point } from '../Point';\nimport { isFiller } from '../util/typeAssertions';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { makeBoundingBoxFromPoints } from '../util';\nimport { CENTER, LEFT, TOP } from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\n// @TODO this code is terrible and Line should be a special case of polyline.\n\nconst coordProps = ['x1', 'x2', 'y1', 'y2'] as const;\n\ninterface UniqueLineProps {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\nexport interface SerializedLineProps\n  extends SerializedObjectProps,\n    UniqueLineProps {}\n\nexport class Line<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedLineProps = SerializedLineProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements UniqueLineProps\n{\n  /**\n   * x value or first line edge\n   * @type number\n   * @default\n   */\n  declare x1: number;\n\n  /**\n   * y value or first line edge\n   * @type number\n   * @default\n   */\n  declare y1: number;\n\n  /**\n   * x value or second line edge\n   * @type number\n   * @default\n   */\n  declare x2: number;\n\n  /**\n   * y value or second line edge\n   * @type number\n   * @default\n   */\n  declare y2: number;\n\n  static type = 'Line';\n\n  static cacheProperties = [...cacheProperties, ...coordProps];\n  /**\n   * Constructor\n   * @param {Array} [points] Array of points\n   * @param {Object} [options] Options object\n   * @return {Line} thisArg\n   */\n  constructor([x1, y1, x2, y2] = [0, 0, 0, 0], options: Partial<Props> = {}) {\n    super();\n    Object.assign(this, Line.ownDefaults);\n    this.setOptions(options);\n    this.x1 = x1;\n    this.x2 = x2;\n    this.y1 = y1;\n    this.y2 = y2;\n    this._setWidthHeight();\n    const { left, top } = options;\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  /**\n   * @private\n   * @param {Object} [options] Options\n   */\n  _setWidthHeight() {\n    const { x1, y1, x2, y2 } = this;\n    this.width = Math.abs(x2 - x1);\n    this.height = Math.abs(y2 - y1);\n    const { left, top, width, height } = makeBoundingBoxFromPoints([\n      { x: x1, y: y1 },\n      { x: x2, y: y2 },\n    ]);\n    const position = new Point(left + width / 2, top + height / 2);\n    this.setPositionByOrigin(position, CENTER, CENTER);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    if (coordProps.includes(key as keyof UniqueLineProps)) {\n      // this doesn't make sense very much, since setting x1 when top or left\n      // are already set, is just going to show a strange result since the\n      // line will move way more than the developer expect.\n      // in fabric5 it worked only when the line didn't have extra transformations,\n      // in fabric6 too. With extra transform they behave bad in different ways.\n      // This needs probably a good rework or a tutorial if you have to create a dynamic line\n      this._setWidthHeight();\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n\n    const p = this.calcLinePoints();\n    ctx.moveTo(p.x1, p.y1);\n    ctx.lineTo(p.x2, p.y2);\n\n    ctx.lineWidth = this.strokeWidth;\n\n    // TODO: test this\n    // make sure setting \"fill\" changes color of a line\n    // (by copying fillStyle to strokeStyle, since line is stroked, not filled)\n    const origStrokeStyle = ctx.strokeStyle;\n    if (isFiller(this.stroke)) {\n      ctx.strokeStyle = this.stroke.toLive(ctx)!;\n    } else {\n      ctx.strokeStyle = this.stroke ?? ctx.fillStyle;\n    }\n    this.stroke && this._renderStroke(ctx);\n    ctx.strokeStyle = origStrokeStyle;\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    return new Point((this.x1 + this.x2) / 2, (this.y1 + this.y2) / 2);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      ...this.calcLinePoints(),\n    };\n  }\n\n  /*\n   * Calculate object dimensions from its properties\n   * @private\n   */\n  _getNonTransformedDimensions(): Point {\n    const dim = super._getNonTransformedDimensions();\n    if (this.strokeLineCap === 'butt') {\n      if (this.width === 0) {\n        dim.y -= this.strokeWidth;\n      }\n      if (this.height === 0) {\n        dim.x -= this.strokeWidth;\n      }\n    }\n    return dim;\n  }\n\n  /**\n   * Recalculates line points given width and height\n   * Those points are simply placed around the center,\n   * This is not useful outside internal render functions and svg output\n   * Is not meant to be for the developer.\n   * @private\n   */\n  calcLinePoints(): UniqueLineProps {\n    const { x1: _x1, x2: _x2, y1: _y1, y2: _y2, width, height } = this;\n    const xMult = _x1 <= _x2 ? -1 : 1,\n      yMult = _y1 <= _y2 ? -1 : 1,\n      x1 = (xMult * width) / 2,\n      y1 = (yMult * height) / 2,\n      x2 = (xMult * -width) / 2,\n      y2 = (yMult * -height) / 2;\n\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const { x1, x2, y1, y2 } = this.calcLinePoints();\n    return [\n      '<line ',\n      'COMMON_PARTS',\n      `x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" />\\n`,\n    ];\n  }\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Line.fromElement})\n   * @static\n   * @memberOf Line\n   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(coordProps);\n\n  /**\n   * Returns Line instance from an SVG element\n   * @static\n   * @memberOf Line\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {Function} [callback] callback function invoked after parsing\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const {\n      x1 = 0,\n      y1 = 0,\n      x2 = 0,\n      y2 = 0,\n      ...parsedAttributes\n    } = parseAttributes(element, this.ATTRIBUTE_NAMES, cssRules);\n    return new this([x1, y1, x2, y2], parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Line instance from an object representation\n   * @static\n   * @memberOf Line\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Line>}\n   */\n  static fromObject<T extends TOptions<SerializedLineProps>>({\n    x1,\n    y1,\n    x2,\n    y2,\n    ...object\n  }: T) {\n    return this._fromObject<Line>(\n      {\n        ...object,\n        points: [x1, y1, x2, y2],\n      },\n      {\n        extraParam: 'points',\n      },\n    );\n  }\n}\n\nclassRegistry.setClass(Line);\nclassRegistry.setSVGClass(Line);\n", "import { classRegistry } from '../ClassRegistry';\nimport { FabricObject } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { TClassProperties, TOptions } from '../typedefs';\nimport type { ObjectEvents } from '../EventTypeDefs';\n\nexport const triangleDefaultValues: Partial<TClassProperties<Triangle>> = {\n  width: 100,\n  height: 100,\n};\n\nexport class Triangle<\n    Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n    SProps extends SerializedObjectProps = SerializedObjectProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements FabricObjectProps\n{\n  static type = 'Triangle';\n\n  static ownDefaults = triangleDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...Triangle.ownDefaults };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Triangle.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2;\n\n    ctx.beginPath();\n    ctx.moveTo(-widthBy2, heightBy2);\n    ctx.lineTo(0, -heightBy2);\n    ctx.lineTo(widthBy2, heightBy2);\n    ctx.closePath();\n\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const widthBy2 = this.width / 2,\n      heightBy2 = this.height / 2,\n      points = `${-widthBy2} ${heightBy2},0 ${-heightBy2},${widthBy2} ${heightBy2}`;\n    return ['<polygon ', 'COMMON_PARTS', 'points=\"', points, '\" />'];\n  }\n}\n\nclassRegistry.setClass(Triangle);\nclassRegistry.setSVGClass(Triangle);\n", "import { SCALE_X, SCALE_Y, twoMathPi } from '../constants';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const ellipseDefaultValues: Partial<TClassProperties<Ellipse>> = {\n  rx: 0,\n  ry: 0,\n};\n\ninterface UniqueEllipseProps {\n  rx: number;\n  ry: number;\n}\n\nexport interface SerializedEllipseProps\n  extends SerializedObjectProps,\n    UniqueEllipseProps {}\n\nexport interface EllipseProps extends FabricObjectProps, UniqueEllipseProps {}\n\nconst ELLIPSE_PROPS = ['rx', 'ry'] as const;\n\nexport class Ellipse<\n    Props extends TOptions<EllipseProps> = Partial<EllipseProps>,\n    SProps extends SerializedEllipseProps = SerializedEllipseProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements EllipseProps\n{\n  /**\n   * Horizontal radius\n   * @type Number\n   * @default\n   */\n  declare rx: number;\n\n  /**\n   * Vertical radius\n   * @type Number\n   * @default\n   */\n  declare ry: number;\n\n  static type = 'Ellipse';\n\n  static cacheProperties = [...cacheProperties, ...ELLIPSE_PROPS];\n\n  static ownDefaults = ellipseDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Ellipse.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor(options?: Props) {\n    super();\n    Object.assign(this, Ellipse.ownDefaults);\n    this.setOptions(options);\n  }\n\n  /**\n   * @private\n   * @param {String} key\n   * @param {*} value\n   * @return {Ellipse} thisArg\n   */\n  _set(key: string, value: any) {\n    super._set(key, value);\n    switch (key) {\n      case 'rx':\n        this.rx = value;\n        this.set('width', value * 2);\n        break;\n\n      case 'ry':\n        this.ry = value;\n        this.set('height', value * 2);\n        break;\n    }\n    return this;\n  }\n\n  /**\n   * Returns horizontal radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRx() {\n    return this.get('rx') * this.get(SCALE_X);\n  }\n\n  /**\n   * Returns Vertical radius of an object (according to how an object is scaled)\n   * @return {Number}\n   */\n  getRy() {\n    return this.get('ry') * this.get(SCALE_Y);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject([...ELLIPSE_PROPS, ...propertiesToInclude]);\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG(): string[] {\n    return [\n      '<ellipse ',\n      'COMMON_PARTS',\n      `cx=\"0\" cy=\"0\" rx=\"${this.rx}\" ry=\"${this.ry}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);\n    ctx.arc(0, 0, this.rx, 0, twoMathPi, false);\n    ctx.restore();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Ellipse.fromElement})\n   * @static\n   * @memberOf Ellipse\n   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES, 'cx', 'cy', 'rx', 'ry'];\n\n  /**\n   * Returns {@link Ellipse} instance from an SVG element\n   * @static\n   * @memberOf Ellipse\n   * @param {HTMLElement} element Element to parse\n   * @return {Ellipse}\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;\n    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;\n    return new this(parsedAttributes);\n  }\n\n  /* _FROM_SVG_END_ */\n}\n\nclassRegistry.setClass(Ellipse);\nclassRegistry.setSVGClass(Ellipse);\n", "import type { XY } from '../Point';\n\n/**\n * Parses \"points\" attribute, returning an array of values\n * @static\n * @memberOf fabric\n * @param {String} points points attribute string\n * @return {Array} array of points\n */\nexport function parsePointsAttribute(points: string | null): XY[] {\n  // points attribute is required and must not be empty\n  if (!points) {\n    return [];\n  }\n\n  // replace commas with whitespace and remove bookending whitespace\n  const pointsSplit: string[] = points.replace(/,/g, ' ').trim().split(/\\s+/);\n\n  const parsedPoints = [];\n\n  for (let i = 0; i < pointsSplit.length; i += 2) {\n    parsedPoints.push({\n      x: parseFloat(pointsSplit[i]),\n      y: parseFloat(pointsSplit[i + 1]),\n    });\n  }\n\n  // odd number of points is an error\n  // if (parsedPoints.length % 2 !== 0) {\n  //   return null;\n  // }\n  return parsedPoints;\n}\n", "import { config } from '../config';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport { parsePointsAttribute } from '../parser/parsePointsAttribute';\nimport type { XY } from '../Point';\nimport { Point } from '../Point';\nimport type { Abortable, TClassProperties, TOptions } from '../typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { makeBoundingBoxFromPoints } from '../util/misc/boundingBoxFromPoints';\nimport { calcDimensionsMatrix, transformPoint } from '../util/misc/matrix';\nimport { projectStrokeOnPoints } from '../util/misc/projectStroke';\nimport type { TProjectStrokeOnPointsOptions } from '../util/misc/projectStroke/types';\nimport { degreesToRadians } from '../util/misc/radiansDegreesConversion';\nimport { toFixed } from '../util/misc/toFixed';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport {\n  CENTER,\n  LEFT,\n  SCALE_X,\n  SCALE_Y,\n  SKEW_X,\n  SKEW_Y,\n  TOP,\n} from '../constants';\nimport type { CSSRules } from '../parser/typedefs';\n\nexport const polylineDefaultValues: Partial<TClassProperties<Polyline>> = {\n  /**\n   * @deprecated transient option soon to be removed in favor of a different design\n   */\n  exactBoundingBox: false,\n};\n\nexport interface SerializedPolylineProps extends SerializedObjectProps {\n  points: XY[];\n}\n\nexport class Polyline<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedPolylineProps = SerializedPolylineProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  /**\n   * Points array\n   * @type Array\n   * @default\n   */\n  declare points: XY[];\n\n  /**\n   * WARNING: Feature in progress\n   * Calculate the exact bounding box taking in account strokeWidth on acute angles\n   * this will be turned to true by default on fabric 6.0\n   * maybe will be left in as an optimization since calculations may be slow\n   * @deprecated transient option soon to be removed in favor of a different design\n   * @type Boolean\n   * @default false\n   */\n  declare exactBoundingBox: boolean;\n\n  private declare initialized: true | undefined;\n\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polyline';\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Polyline.ownDefaults,\n    };\n  }\n\n  /**\n   * A list of properties that if changed trigger a recalculation of dimensions\n   * @todo check if you really need to recalculate for all cases\n   */\n  static layoutProperties: (keyof Polyline)[] = [\n    SKEW_X,\n    SKEW_Y,\n    'strokeLineCap',\n    'strokeLineJoin',\n    'strokeMiterLimit',\n    'strokeWidth',\n    'strokeUniform',\n    'points',\n  ];\n\n  declare pathOffset: Point;\n\n  declare strokeOffset: Point;\n\n  static cacheProperties = [...cacheProperties, 'points'];\n\n  strokeDiff: Point;\n\n  /**\n   * Constructor\n   * @param {Array} points Array of points (where each point is an object with x and y)\n   * @param {Object} [options] Options object\n   * @return {Polyline} thisArg\n   * @example\n   * var poly = new Polyline([\n   *     { x: 10, y: 10 },\n   *     { x: 50, y: 30 },\n   *     { x: 40, y: 70 },\n   *     { x: 60, y: 50 },\n   *     { x: 100, y: 150 },\n   *     { x: 40, y: 100 }\n   *   ], {\n   *   stroke: 'red',\n   *   left: 100,\n   *   top: 100\n   * });\n   */\n  constructor(points: XY[] = [], options: Props = {} as Props) {\n    super();\n    Object.assign(this, Polyline.ownDefaults);\n    this.setOptions(options);\n    this.points = points;\n    const { left, top } = options;\n    this.initialized = true;\n    this.setBoundingBox(true);\n    typeof left === 'number' && this.set(LEFT, left);\n    typeof top === 'number' && this.set(TOP, top);\n  }\n\n  protected isOpen() {\n    return true;\n  }\n\n  private _projectStrokeOnPoints(options: TProjectStrokeOnPointsOptions) {\n    return projectStrokeOnPoints(this.points, options, this.isOpen());\n  }\n\n  /**\n   * Calculate the polygon bounding box\n   * @private\n   */\n  _calcDimensions(options?: Partial<TProjectStrokeOnPointsOptions>) {\n    options = {\n      scaleX: this.scaleX,\n      scaleY: this.scaleY,\n      skewX: this.skewX,\n      skewY: this.skewY,\n      strokeLineCap: this.strokeLineCap,\n      strokeLineJoin: this.strokeLineJoin,\n      strokeMiterLimit: this.strokeMiterLimit,\n      strokeUniform: this.strokeUniform,\n      strokeWidth: this.strokeWidth,\n      ...(options || {}),\n    };\n    const points = this.exactBoundingBox\n      ? this._projectStrokeOnPoints(\n          options as TProjectStrokeOnPointsOptions,\n        ).map((projection) => projection.projectedPoint)\n      : this.points;\n    if (points.length === 0) {\n      return {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        pathOffset: new Point(),\n        strokeOffset: new Point(),\n        strokeDiff: new Point(),\n      };\n    }\n    const bbox = makeBoundingBoxFromPoints(points),\n      // Remove scale effect, since it's applied after\n      matrix = calcDimensionsMatrix({ ...options, scaleX: 1, scaleY: 1 }),\n      bboxNoStroke = makeBoundingBoxFromPoints(\n        this.points.map((p) => transformPoint(p, matrix, true)),\n      ),\n      scale = new Point(this.scaleX, this.scaleY);\n    let offsetX = bbox.left + bbox.width / 2,\n      offsetY = bbox.top + bbox.height / 2;\n    if (this.exactBoundingBox) {\n      offsetX = offsetX - offsetY * Math.tan(degreesToRadians(this.skewX));\n      // Order of those assignments is important.\n      // offsetY relies on offsetX being already changed by the line above\n      offsetY = offsetY - offsetX * Math.tan(degreesToRadians(this.skewY));\n    }\n\n    return {\n      ...bbox,\n      pathOffset: new Point(offsetX, offsetY),\n      strokeOffset: new Point(bboxNoStroke.left, bboxNoStroke.top)\n        .subtract(new Point(bbox.left, bbox.top))\n        .multiply(scale),\n      strokeDiff: new Point(bbox.width, bbox.height)\n        .subtract(new Point(bboxNoStroke.width, bboxNoStroke.height))\n        .multiply(scale),\n    };\n  }\n\n  /**\n   * This function is an helper for svg import. it returns the center of the object in the svg\n   * untransformed coordinates, by look at the polyline/polygon points.\n   * @private\n   * @return {Point} center point from element coordinates\n   */\n  _findCenterFromElement(): Point {\n    const bbox = makeBoundingBoxFromPoints(this.points);\n    return new Point(bbox.left + bbox.width / 2, bbox.top + bbox.height / 2);\n  }\n\n  setDimensions() {\n    this.setBoundingBox();\n  }\n\n  setBoundingBox(adjustPosition?: boolean) {\n    const { left, top, width, height, pathOffset, strokeOffset, strokeDiff } =\n      this._calcDimensions();\n    this.set({ width, height, pathOffset, strokeOffset, strokeDiff });\n    adjustPosition &&\n      this.setPositionByOrigin(\n        new Point(left + width / 2, top + height / 2),\n        CENTER,\n        CENTER,\n      );\n  }\n\n  /**\n   * @deprecated intermidiate method to be removed, do not use\n   */\n  protected isStrokeAccountedForInDimensions() {\n    return this.exactBoundingBox;\n  }\n\n  /**\n   * @override stroke is taken in account in size\n   */\n  _getNonTransformedDimensions() {\n    return this.exactBoundingBox\n      ? // TODO: fix this\n        new Point(this.width, this.height)\n      : super._getNonTransformedDimensions();\n  }\n\n  /**\n   * @override stroke and skewing are taken into account when projecting stroke on points,\n   * therefore we don't want the default calculation to account for skewing as well.\n   * Though it is possible to pass `width` and `height` in `options`, doing so is very strange, use with discretion.\n   *\n   * @private\n   */\n  _getTransformedDimensions(options: any = {}) {\n    if (this.exactBoundingBox) {\n      let size: Point;\n      /* When `strokeUniform = true`, any changes to the properties require recalculating the `width` and `height` because\n        the stroke projections are affected.\n        When `strokeUniform = false`, we don't need to recalculate for scale transformations, as the effect of scale on\n        projections follows a linear function (e.g. scaleX of 2 just multiply width by 2)*/\n      if (\n        Object.keys(options).some(\n          (key) =>\n            this.strokeUniform ||\n            (this.constructor as typeof Polyline).layoutProperties.includes(\n              key as keyof TProjectStrokeOnPointsOptions,\n            ),\n        )\n      ) {\n        const { width, height } = this._calcDimensions(options);\n        size = new Point(options.width ?? width, options.height ?? height);\n      } else {\n        size = new Point(\n          options.width ?? this.width,\n          options.height ?? this.height,\n        );\n      }\n      return size.multiply(\n        new Point(options.scaleX || this.scaleX, options.scaleY || this.scaleY),\n      );\n    } else {\n      return super._getTransformedDimensions(options);\n    }\n  }\n\n  /**\n   * Recalculates dimensions when changing skew and scale\n   * @private\n   */\n  _set(key: string, value: any) {\n    const changed = this.initialized && this[key as keyof this] !== value;\n    const output = super._set(key, value);\n    if (\n      this.exactBoundingBox &&\n      changed &&\n      (((key === SCALE_X || key === SCALE_Y) &&\n        this.strokeUniform &&\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          'strokeUniform',\n        )) ||\n        (this.constructor as typeof Polyline).layoutProperties.includes(\n          key as keyof Polyline,\n        ))\n    ) {\n      this.setDimensions();\n    }\n    return output;\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject(propertiesToInclude),\n      points: this.points.map(({ x, y }) => ({ x, y })),\n    };\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {Array} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const points = [],\n      diffX = this.pathOffset.x,\n      diffY = this.pathOffset.y,\n      NUM_FRACTION_DIGITS = config.NUM_FRACTION_DIGITS;\n\n    for (let i = 0, len = this.points.length; i < len; i++) {\n      points.push(\n        toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS),\n        ',',\n        toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS),\n        ' ',\n      );\n    }\n    return [\n      `<${\n        (this.constructor as typeof Polyline).type.toLowerCase() as\n          | 'polyline'\n          | 'polygon'\n      } `,\n      'COMMON_PARTS',\n      `points=\"${points.join('')}\" />\\n`,\n    ];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const len = this.points.length,\n      x = this.pathOffset.x,\n      y = this.pathOffset.y;\n\n    if (!len || isNaN(this.points[len - 1].y)) {\n      // do not draw if no points or odd points\n      // NaN comes from parseFloat of a empty string in parser\n      return;\n    }\n    ctx.beginPath();\n    ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n    for (let i = 0; i < len; i++) {\n      const point = this.points[i];\n      ctx.lineTo(point.x - x, point.y - y);\n    }\n    !this.isOpen() && ctx.closePath();\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity of this instance\n   */\n  complexity(): number {\n    return this.points.length;\n  }\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link Polyline.fromElement})\n   * @static\n   * @memberOf Polyline\n   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement\n   */\n  static ATTRIBUTE_NAMES = [...SHARED_ATTRIBUTES];\n\n  /**\n   * Returns Polyline instance from an SVG element\n   * @static\n   * @memberOf Polyline\n   * @param {HTMLElement} element Element to parser\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const points = parsePointsAttribute(element.getAttribute('points')),\n      // we omit left and top to instruct the constructor to position the object using the bbox\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      { left, top, ...parsedAttributes } = parseAttributes(\n        element,\n        this.ATTRIBUTE_NAMES,\n        cssRules,\n      );\n    return new this(points, {\n      ...parsedAttributes,\n      ...options,\n    });\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns Polyline instance from an object representation\n   * @static\n   * @memberOf Polyline\n   * @param {Object} object Object to create an instance from\n   * @returns {Promise<Polyline>}\n   */\n  static fromObject<T extends TOptions<SerializedPolylineProps>>(object: T) {\n    return this._fromObject<Polyline>(object, {\n      extraParam: 'points',\n    });\n  }\n}\n\nclassRegistry.setClass(Polyline);\nclassRegistry.setSVGClass(Polyline);\n", "import { classRegistry } from '../ClassRegistry';\nimport { Polyline, polylineDefaultValues } from './Polyline';\n\nexport class Polygon extends Polyline {\n  static ownDefaults = polylineDefaultValues;\n\n  static type = 'Polygon';\n\n  protected isOpen() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Polygon);\nclassRegistry.setSVGClass(Polygon);\n", "import { FILL, LEFT, STROKE, reNewline } from '../../constants';\nimport type { TClassProperties } from '../../typedefs';\nimport type { FabricText } from './Text';\n\nconst fontProperties = [\n  'fontSize',\n  'fontWeight',\n  'fontFamily',\n  'fontStyle',\n] as const;\n\nexport const textDecorationProperties = [\n  'underline',\n  'overline',\n  'linethrough',\n] as const;\n\nexport const textLayoutProperties: string[] = [\n  ...fontProperties,\n  'lineHeight',\n  'text',\n  'charSpacing',\n  'textAlign',\n  'styles',\n  'path',\n  'pathStartOffset',\n  'pathSide',\n  'pathAlign',\n];\n\nexport const additionalProps = [\n  ...textLayoutProperties,\n  ...textDecorationProperties,\n  'textBackgroundColor',\n  'direction',\n] as const;\n\nexport type StylePropertiesType =\n  | 'fill'\n  | 'stroke'\n  | 'strokeWidth'\n  | 'fontSize'\n  | 'fontFamily'\n  | 'fontWeight'\n  | 'fontStyle'\n  | 'textBackgroundColor'\n  | 'deltaY'\n  | 'overline'\n  | 'underline'\n  | 'linethrough';\n\nexport const styleProperties: Readonly<StylePropertiesType[]> = [\n  ...fontProperties,\n  ...textDecorationProperties,\n  STROKE,\n  'strokeWidth',\n  FILL,\n  'deltaY',\n  'textBackgroundColor',\n] as const;\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textDefaultValues: Partial<TClassProperties<FabricText>> = {\n  _reNewline: reNewline,\n  _reSpacesAndTabs: /[ \\t\\r]/g,\n  _reSpaceAndTab: /[ \\t\\r]/,\n  _reWords: /\\S+/g,\n  fontSize: 40,\n  fontWeight: 'normal',\n  fontFamily: 'Times New Roman',\n  underline: false,\n  overline: false,\n  linethrough: false,\n  textAlign: LEFT,\n  fontStyle: 'normal',\n  lineHeight: 1.16,\n  superscript: {\n    size: 0.6, // fontSize factor\n    baseline: -0.35, // baseline-shift factor (upwards)\n  },\n  subscript: {\n    size: 0.6, // fontSize factor\n    baseline: 0.11, // baseline-shift factor (downwards)\n  },\n  textBackgroundColor: '',\n  stroke: null,\n  shadow: null,\n  path: undefined,\n  pathStartOffset: 0,\n  pathSide: LEFT,\n  pathAlign: 'baseline',\n  _fontSizeFraction: 0.222,\n  offsets: {\n    underline: 0.1,\n    linethrough: -0.315,\n    overline: -0.88,\n  },\n  _fontSizeMult: 1.13,\n  charSpacing: 0,\n  deltaY: 0,\n  direction: 'ltr',\n  CACHE_FONT_SIZE: 400,\n  MIN_TEXT_WIDTH: 2,\n};\n\nexport const JUSTIFY = 'justify';\nexport const JUSTIFY_LEFT = 'justify-left';\nexport const JUSTIFY_RIGHT = 'justify-right';\nexport const JUSTIFY_CENTER = 'justify-center';\n", "import type { ObjectEvents } from '../../EventTypeDefs';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { TOptions } from '../../typedefs';\nimport { FabricObject } from '../Object/FabricObject';\nimport { styleProperties } from './constants';\nimport type { StylePropertiesType } from './constants';\nimport type { FabricText } from './Text';\nimport { pick } from '../../util';\nimport { pickBy } from '../../util/misc/pick';\n\nexport type CompleteTextStyleDeclaration = Pick<\n  FabricText,\n  StylePropertiesType\n>;\n\nexport type TextStyleDeclaration = Partial<CompleteTextStyleDeclaration>;\n\nexport type TextStyle = {\n  [line: number | string]: { [char: number | string]: TextStyleDeclaration };\n};\n\nexport abstract class StyledText<\n  Props extends TOptions<FabricObjectProps> = Partial<FabricObjectProps>,\n  SProps extends SerializedObjectProps = SerializedObjectProps,\n  EventSpec extends ObjectEvents = ObjectEvents,\n> extends FabricObject<Props, SProps, EventSpec> {\n  declare abstract styles: TextStyle;\n  protected declare abstract _textLines: string[][];\n  protected declare _forceClearCache: boolean;\n  static _styleProperties: Readonly<StylePropertiesType[]> = styleProperties;\n  abstract get2DCursorLocation(\n    selectionStart: number,\n    skipWrapping?: boolean,\n  ): { charIndex: number; lineIndex: number };\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex?: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return true;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        // eslint-disable-next-line no-unused-vars\n        for (const p3 in obj[p1][p2]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if object has a style property or has it ina specified line\n   * This function is used to detect if a text will use a particular property or not.\n   * @param {String} property to check for\n   * @param {Number} lineIndex to check the style on\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex?: number): boolean {\n    if (!this.styles) {\n      return false;\n    }\n    if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n      return false;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { 0: this.styles[lineIndex] };\n    // eslint-disable-next-line\n    for (const p1 in obj) {\n      // eslint-disable-next-line\n      for (const p2 in obj[p1]) {\n        if (typeof obj[p1][p2][property] !== 'undefined') {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if characters in a text have a value for a property\n   * whose value matches the textbox's value for that property.  If so,\n   * the character-level property is deleted.  If the character\n   * has no other properties, then it is also deleted.  Finally,\n   * if the line containing that character has no other characters\n   * then it also is deleted.\n   *\n   * @param {string} property The property to compare between characters and text.\n   */\n  cleanStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return false;\n    }\n    const obj = this.styles;\n    let stylesCount = 0,\n      letterCount,\n      stylePropertyValue,\n      allStyleObjectPropertiesMatch = true,\n      graphemeCount = 0;\n    for (const p1 in obj) {\n      letterCount = 0;\n      for (const p2 in obj[p1]) {\n        const styleObject = obj[p1][p2] || {},\n          stylePropertyHasBeenSet = styleObject[property] !== undefined;\n\n        stylesCount++;\n\n        if (stylePropertyHasBeenSet) {\n          if (!stylePropertyValue) {\n            stylePropertyValue = styleObject[property];\n          } else if (styleObject[property] !== stylePropertyValue) {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (styleObject[property] === this[property as keyof this]) {\n            delete styleObject[property];\n          }\n        } else {\n          allStyleObjectPropertiesMatch = false;\n        }\n\n        if (Object.keys(styleObject).length !== 0) {\n          letterCount++;\n        } else {\n          delete obj[p1][p2];\n        }\n      }\n\n      if (letterCount === 0) {\n        delete obj[p1];\n      }\n    }\n    // if every grapheme has the same style set then\n    // delete those styles and set it on the parent\n    for (let i = 0; i < this._textLines.length; i++) {\n      graphemeCount += this._textLines[i].length;\n    }\n    if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n      // @ts-expect-error conspiracy theory of TS\n      this[property as keyof this] = stylePropertyValue;\n      this.removeStyle(property);\n    }\n  }\n\n  /**\n   * Remove a style property or properties from all individual character styles\n   * in a text object.  Deletes the character style object if it contains no other style\n   * props.  Deletes a line style object if it contains no other character styles.\n   *\n   * @param {String} props The property to remove from character styles.\n   */\n  removeStyle(property: keyof TextStyleDeclaration) {\n    if (!this.styles) {\n      return;\n    }\n    const obj = this.styles;\n    let line, lineNum, charNum;\n    for (lineNum in obj) {\n      line = obj[lineNum];\n      for (charNum in line) {\n        delete line[charNum][property];\n        if (Object.keys(line[charNum]).length === 0) {\n          delete line[charNum];\n        }\n      }\n      if (Object.keys(line).length === 0) {\n        delete obj[lineNum];\n      }\n    }\n  }\n\n  private _extendStyles(index: number, style: TextStyleDeclaration): void {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(index);\n\n    if (!this._getLineStyle(lineIndex)) {\n      this._setLineStyle(lineIndex);\n    }\n\n    const newStyle = pickBy(\n      {\n        // first create a new object that is a merge of existing and new\n        ...this._getStyleDeclaration(lineIndex, charIndex),\n        ...style,\n        // use the predicate to discard undefined values\n      },\n      (value) => value !== undefined,\n    );\n\n    // finally assign to the old position the new style\n    this._setStyleDeclaration(lineIndex, charIndex, newStyle);\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number,\n    endIndex?: number,\n    complete?: boolean,\n  ): TextStyleDeclaration[] {\n    const styles: TextStyleDeclaration[] = [];\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      styles.push(this.getStyleAtPosition(i, complete));\n    }\n    return styles;\n  }\n\n  /**\n   * Gets style of a current selection/cursor position\n   * @param {Number} position  to get styles at\n   * @param {Boolean} [complete] full style if true\n   * @return {Object} style Style object at a specified index\n   * @private\n   */\n  getStyleAtPosition(position: number, complete?: boolean) {\n    const { lineIndex, charIndex } = this.get2DCursorLocation(position);\n    return complete\n      ? this.getCompleteStyleDeclaration(lineIndex, charIndex)\n      : this._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} styles Styles object\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified startIndex + 1\n   */\n  setSelectionStyles(styles: object, startIndex: number, endIndex?: number) {\n    for (let i = startIndex; i < (endIndex || startIndex); i++) {\n      this._extendStyles(i, styles);\n    }\n    /* not included in _extendStyles to avoid clearing cache more than once */\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Get a reference, not a clone, to the style object for a given character,\n   * if no style is set for a line or char, return a new empty object.\n   * This is tricky and confusing because when you get an empty object you can't\n   * determine if it is a reference or a new one.\n   * @TODO this should always return a reference or always a clone or undefined when necessary.\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    const lineStyle = this.styles && this.styles[lineIndex];\n    return lineStyle ? lineStyle[charIndex] ?? {} : {};\n  }\n\n  /**\n   * return a new object that contains all the style property for a character\n   * the object returned is newly created\n   * @param {Number} lineIndex of the line where the character is\n   * @param {Number} charIndex position of the character on the line\n   * @return {Object} style object\n   */\n  getCompleteStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): CompleteTextStyleDeclaration {\n    return {\n      // @ts-expect-error readonly\n      ...pick(this, (this.constructor as typeof StyledText)._styleProperties),\n      ...this._getStyleDeclaration(lineIndex, charIndex),\n    } as CompleteTextStyleDeclaration;\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    this.styles[lineIndex][charIndex] = style;\n  }\n\n  /**\n   *\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    delete this.styles[lineIndex][charIndex];\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @return {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    return !!this.styles[lineIndex];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    this.styles[lineIndex] = {};\n  }\n\n  protected _deleteLineStyle(lineIndex: number) {\n    delete this.styles[lineIndex];\n  }\n}\n", "import { config } from '../../config';\nimport type { TSVGReviver } from '../../typedefs';\nimport { escapeXml } from '../../util/lang_string';\nimport { colorPropToSVG, createSVGRect } from '../../util/misc/svgParsing';\nimport { hasStyleChanged } from '../../util/misc/textStyles';\nimport { toFixed } from '../../util/misc/toFixed';\nimport { FabricObjectSVGExportMixin } from '../Object/FabricObjectSVGExportMixin';\nimport { type TextStyleDeclaration } from './StyledText';\nimport { JUSTIFY } from '../Text/constants';\nimport type { FabricText } from './Text';\nimport { STROKE, FILL } from '../../constants';\n\nconst multipleSpacesRegex = /  +/g;\nconst dblQuoteRegex = /\"/g;\n\nfunction createSVGInlineRect(\n  color: string,\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) {\n  return `\\t\\t${createSVGRect(color, { left, top, width, height })}\\n`;\n}\n\nexport class TextSVGExportMixin extends FabricObjectSVGExportMixin {\n  _toSVG(this: TextSVGExportMixin & FabricText): string[] {\n    const offsets = this._getSVGLeftTopOffsets(),\n      textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);\n    return this._wrapSVGTextAndBg(textAndBg);\n  }\n\n  toSVG(this: TextSVGExportMixin & FabricText, reviver?: TSVGReviver): string {\n    return this._createBaseSVGMarkup(this._toSVG(), {\n      reviver,\n      noStyle: true,\n      withShadow: true,\n    });\n  }\n\n  private _getSVGLeftTopOffsets(this: TextSVGExportMixin & FabricText) {\n    return {\n      textLeft: -this.width / 2,\n      textTop: -this.height / 2,\n      lineTop: this.getHeightOfLine(0),\n    };\n  }\n\n  private _wrapSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    {\n      textBgRects,\n      textSpans,\n    }: {\n      textSpans: string[];\n      textBgRects: string[];\n    },\n  ) {\n    const noShadow = true,\n      textDecoration = this.getSvgTextDecoration(this);\n    return [\n      textBgRects.join(''),\n      '\\t\\t<text xml:space=\"preserve\" ',\n      this.fontFamily\n        ? `font-family=\"${this.fontFamily.replace(dblQuoteRegex, \"'\")}\" `\n        : '',\n      this.fontSize ? `font-size=\"${this.fontSize}\" ` : '',\n      this.fontStyle ? `font-style=\"${this.fontStyle}\" ` : '',\n      this.fontWeight ? `font-weight=\"${this.fontWeight}\" ` : '',\n      textDecoration ? `text-decoration=\"${textDecoration}\" ` : '',\n      this.direction === 'rtl' ? `direction=\"${this.direction}\" ` : '',\n      'style=\"',\n      this.getSvgStyles(noShadow),\n      '\"',\n      this.addPaintOrder(),\n      ' >',\n      textSpans.join(''),\n      '</text>\\n',\n    ];\n  }\n\n  /**\n   * @private\n   * @param {Number} textTopOffset Text top offset\n   * @param {Number} textLeftOffset Text left offset\n   * @return {Object}\n   */\n  private _getSVGTextAndBg(\n    this: TextSVGExportMixin & FabricText,\n    textTopOffset: number,\n    textLeftOffset: number,\n  ) {\n    const textSpans: string[] = [],\n      textBgRects: string[] = [];\n    let height = textTopOffset,\n      lineOffset;\n\n    // bounding-box background\n    this.backgroundColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          this.backgroundColor,\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height,\n        ),\n      );\n\n    // text and text-background\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineOffset = this._getLineLeftOffset(i);\n      if (this.direction === 'rtl') {\n        lineOffset += this.width;\n      }\n      if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {\n        this._setSVGTextLineBg(\n          textBgRects,\n          i,\n          textLeftOffset + lineOffset,\n          height,\n        );\n      }\n      this._setSVGTextLineText(\n        textSpans,\n        i,\n        textLeftOffset + lineOffset,\n        height,\n      );\n      height += this.getHeightOfLine(i);\n    }\n\n    return {\n      textSpans,\n      textBgRects,\n    };\n  }\n\n  private _createTextCharSpan(\n    this: TextSVGExportMixin & FabricText,\n    char: string,\n    styleDecl: TextStyleDeclaration,\n    left: number,\n    top: number,\n  ) {\n    const styleProps = this.getSvgSpanStyles(\n        styleDecl,\n        char !== char.trim() || !!char.match(multipleSpacesRegex),\n      ),\n      fillStyles = styleProps ? `style=\"${styleProps}\"` : '',\n      dy = styleDecl.deltaY,\n      dySpan = dy ? ` dy=\"${toFixed(dy, config.NUM_FRACTION_DIGITS)}\" ` : '';\n\n    return `<tspan x=\"${toFixed(\n      left,\n      config.NUM_FRACTION_DIGITS,\n    )}\" y=\"${toFixed(\n      top,\n      config.NUM_FRACTION_DIGITS,\n    )}\" ${dySpan}${fillStyles}>${escapeXml(char)}</tspan>`;\n  }\n\n  private _setSVGTextLineText(\n    this: TextSVGExportMixin & FabricText,\n    textSpans: string[],\n    lineIndex: number,\n    textLeftOffset: number,\n    textTopOffset: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      line = this._textLines[lineIndex];\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      style,\n      boxWidth = 0,\n      timeToRender;\n\n    textTopOffset +=\n      (lineHeight * (1 - this._fontSizeFraction)) / this.lineHeight;\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i];\n      if (boxWidth === 0) {\n        textLeftOffset += charBox.kernedWidth - charBox.width;\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, true);\n      }\n      if (timeToRender) {\n        style = this._getStyleDeclaration(lineIndex, i);\n        textSpans.push(\n          this._createTextCharSpan(\n            charsToRender,\n            style,\n            textLeftOffset,\n            textTopOffset,\n          ),\n        );\n        charsToRender = '';\n        actualStyle = nextStyle;\n        if (this.direction === 'rtl') {\n          textLeftOffset -= boxWidth;\n        } else {\n          textLeftOffset += boxWidth;\n        }\n        boxWidth = 0;\n      }\n    }\n  }\n\n  private _setSVGTextLineBg(\n    this: TextSVGExportMixin & FabricText,\n    textBgRects: (string | number)[],\n    i: number,\n    leftOffset: number,\n    textTopOffset: number,\n  ) {\n    const line = this._textLines[i],\n      heightOfLine = this.getHeightOfLine(i) / this.lineHeight;\n    let boxWidth = 0,\n      boxStart = 0,\n      currentColor,\n      lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n    for (let j = 0; j < line.length; j++) {\n      const { left, width, kernedWidth } = this.__charBounds[i][j];\n      currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n      if (currentColor !== lastColor) {\n        lastColor &&\n          textBgRects.push(\n            ...createSVGInlineRect(\n              lastColor,\n              leftOffset + boxStart,\n              textTopOffset,\n              boxWidth,\n              heightOfLine,\n            ),\n          );\n        boxStart = left;\n        boxWidth = width;\n        lastColor = currentColor;\n      } else {\n        boxWidth += kernedWidth;\n      }\n    }\n    currentColor &&\n      textBgRects.push(\n        ...createSVGInlineRect(\n          lastColor,\n          leftOffset + boxStart,\n          textTopOffset,\n          boxWidth,\n          heightOfLine,\n        ),\n      );\n  }\n\n  /**\n   * @deprecated unused\n   */\n  _getSVGLineTopOffset(\n    this: TextSVGExportMixin & FabricText,\n    lineIndex: number,\n  ) {\n    let lineTopOffset = 0,\n      j;\n    for (j = 0; j < lineIndex; j++) {\n      lineTopOffset += this.getHeightOfLine(j);\n    }\n    const lastHeight = this.getHeightOfLine(j);\n    return {\n      lineTop: lineTopOffset,\n      offset:\n        ((this._fontSizeMult - this._fontSizeFraction) * lastHeight) /\n        (this.lineHeight * this._fontSizeMult),\n    };\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Boolean} skipShadow a boolean to skip shadow filter output\n   * @return {String}\n   */\n  getSvgStyles(this: TextSVGExportMixin & FabricText, skipShadow?: boolean) {\n    return `${super.getSvgStyles(skipShadow)} white-space: pre;`;\n  }\n\n  /**\n   * Returns styles-string for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.\n   * @return {String}\n   */\n  getSvgSpanStyles(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n    useWhiteSpace?: boolean,\n  ) {\n    const {\n      fontFamily,\n      strokeWidth,\n      stroke,\n      fill,\n      fontSize,\n      fontStyle,\n      fontWeight,\n      deltaY,\n    } = style;\n\n    const textDecoration = this.getSvgTextDecoration(style);\n\n    return [\n      stroke ? colorPropToSVG(STROKE, stroke) : '',\n      strokeWidth ? `stroke-width: ${strokeWidth}; ` : '',\n      fontFamily\n        ? `font-family: ${\n            !fontFamily.includes(\"'\") && !fontFamily.includes('\"')\n              ? `'${fontFamily}'`\n              : fontFamily\n          }; `\n        : '',\n      fontSize ? `font-size: ${fontSize}px; ` : '',\n      fontStyle ? `font-style: ${fontStyle}; ` : '',\n      fontWeight ? `font-weight: ${fontWeight}; ` : '',\n      textDecoration ? `text-decoration: ${textDecoration}; ` : textDecoration,\n      fill ? colorPropToSVG(FILL, fill) : '',\n      deltaY ? `baseline-shift: ${-deltaY}; ` : '',\n      useWhiteSpace ? 'white-space: pre; ' : '',\n    ].join('');\n  }\n\n  /**\n   * Returns text-decoration property for svg-export\n   * @param {Object} style the object from which to retrieve style properties\n   * @return {String}\n   */\n  getSvgTextDecoration(\n    this: TextSVGExportMixin & FabricText,\n    style: TextStyleDeclaration,\n  ) {\n    return (['overline', 'underline', 'line-through'] as const)\n      .filter(\n        (decoration) =>\n          style[\n            decoration.replace('-', '') as\n              | 'overline'\n              | 'underline'\n              | 'linethrough'\n          ],\n      )\n      .join(' ');\n  }\n}\n", "import { cache } from '../../cache';\nimport { DEFAULT_SVG_FONT_SIZE, FILL, STROKE } from '../../constants';\nimport type { ObjectEvents } from '../../EventTypeDefs';\nimport type {\n  CompleteTextStyleDeclaration,\n  TextStyle,\n  TextStyleDeclaration,\n} from './StyledText';\nimport { StyledText } from './StyledText';\nimport { SHARED_ATTRIBUTES } from '../../parser/attributes';\nimport { parseAttributes } from '../../parser/parseAttributes';\nimport type {\n  Abortable,\n  TCacheCanvasDimensions,\n  TClassProperties,\n  TFiller,\n  TOptions,\n} from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport { graphemeSplit } from '../../util/lang_string';\nimport { createCanvasElementFor } from '../../util/misc/dom';\nimport type { TextStyleArray } from '../../util/misc/textStyles';\nimport {\n  hasStyleChanged,\n  stylesFromArray,\n  stylesToArray,\n} from '../../util/misc/textStyles';\nimport { getPathSegmentsInfo, getPointOnPath } from '../../util/path';\nimport { cacheProperties } from '../Object/FabricObject';\nimport type { Path } from '../Path';\nimport { TextSVGExportMixin } from './TextSVGExportMixin';\nimport { applyMixins } from '../../util/applyMixins';\nimport type { FabricObjectProps, SerializedObjectProps } from '../Object/types';\nimport type { StylePropertiesType } from './constants';\nimport {\n  additionalProps,\n  textDefaultValues,\n  textLayoutProperties,\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from './constants';\nimport { CENTER, LEFT, RIGHT, TOP, BOTTOM } from '../../constants';\nimport { isFiller } from '../../util/typeAssertions';\nimport type { Gradient } from '../../gradient/Gradient';\nimport type { Pattern } from '../../Pattern';\nimport type { CSSRules } from '../../parser/typedefs';\n\nlet measuringContext: CanvasRenderingContext2D | null;\n\n/**\n * Return a context for measurement of text string.\n * if created it gets stored for reuse\n */\nfunction getMeasuringContext() {\n  if (!measuringContext) {\n    const canvas = createCanvasElementFor({\n      width: 0,\n      height: 0,\n    });\n    measuringContext = canvas.getContext('2d');\n  }\n  return measuringContext;\n}\n\nexport type TPathSide = 'left' | 'right';\n\nexport type TPathAlign = 'baseline' | 'center' | 'ascender' | 'descender';\n\nexport type TextLinesInfo = {\n  lines: string[];\n  graphemeLines: string[][];\n  graphemeText: string[];\n  _unwrappedLines: string[][];\n};\n\n/**\n * Measure and return the info of a single grapheme.\n * needs the the info of previous graphemes already filled\n * Override to customize measuring\n */\nexport type GraphemeBBox = {\n  width: number;\n  height: number;\n  kernedWidth: number;\n  left: number;\n  deltaY: number;\n  renderLeft?: number;\n  renderTop?: number;\n  angle?: number;\n};\n\n// @TODO this is not complete\ninterface UniqueTextProps {\n  charSpacing: number;\n  lineHeight: number;\n  fontSize: number;\n  fontWeight: string | number;\n  fontFamily: string;\n  fontStyle: string;\n  pathSide: TPathSide;\n  pathAlign: TPathAlign;\n  underline: boolean;\n  overline: boolean;\n  linethrough: boolean;\n  textAlign: string;\n  direction: CanvasDirection;\n  path?: Path;\n}\n\nexport interface SerializedTextProps\n  extends SerializedObjectProps,\n    UniqueTextProps {\n  styles: TextStyleArray | TextStyle;\n}\n\nexport interface TextProps extends FabricObjectProps, UniqueTextProps {\n  styles: TextStyle;\n}\n\n/**\n * Text class\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n */\nexport class FabricText<\n    Props extends TOptions<TextProps> = Partial<TextProps>,\n    SProps extends SerializedTextProps = SerializedTextProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends StyledText<Props, SProps, EventSpec>\n  implements UniqueTextProps\n{\n  /**\n   * Properties that requires a text layout recalculation when changed\n   * @type string[]\n   * @protected\n   */\n  static textLayoutProperties: string[] = textLayoutProperties;\n\n  /**\n   * @private\n   */\n  declare _reNewline: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespaces that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpacesAndTabs: RegExp;\n\n  /**\n   * Use this regular expression to filter for whitespace that is not a new line.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reSpaceAndTab: RegExp;\n\n  /**\n   * Use this regular expression to filter consecutive groups of non spaces.\n   * Mostly used when text is 'justify' aligned.\n   * @private\n   */\n  declare _reWords: RegExp;\n\n  declare text: string;\n\n  /**\n   * Font size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare fontSize: number;\n\n  /**\n   * Font weight (e.g. bold, normal, 400, 600, 800)\n   * @type {(Number|String)}\n   * @default\n   */\n  declare fontWeight: string | number;\n\n  /**\n   * Font family\n   * @type String\n   * @default\n   */\n  declare fontFamily: string;\n\n  /**\n   * Text decoration underline.\n   * @type Boolean\n   * @default\n   */\n  declare underline: boolean;\n\n  /**\n   * Text decoration overline.\n   * @type Boolean\n   * @default\n   */\n  declare overline: boolean;\n\n  /**\n   * Text decoration linethrough.\n   * @type Boolean\n   * @default\n   */\n  declare linethrough: boolean;\n\n  /**\n   * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n   * \"justify-left\", \"justify-center\" or \"justify-right\".\n   * @type String\n   * @default\n   */\n  declare textAlign: string;\n\n  /**\n   * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n   * @type String\n   * @default\n   */\n  declare fontStyle: string;\n\n  /**\n   * Line height\n   * @type Number\n   * @default\n   */\n  declare lineHeight: number;\n\n  /**\n   * Superscript schema object (minimum overlap)\n   */\n  declare superscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (upwards)\n     * @default -0.35\n     */\n    baseline: number;\n  };\n\n  /**\n   * Subscript schema object (minimum overlap)\n   */\n  declare subscript: {\n    /**\n     * fontSize factor\n     * @default 0.6\n     */\n    size: number;\n    /**\n     * baseline-shift factor (downwards)\n     * @default 0.11\n     */\n    baseline: number;\n  };\n\n  /**\n   * Background color of text lines\n   * @type String\n   * @default\n   */\n  declare textBackgroundColor: string;\n\n  declare styles: TextStyle;\n\n  /**\n   * Path that the text should follow.\n   * since 4.6.0 the path will be drawn automatically.\n   * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n   * if you want it to be hidden, assign visible = false to the path.\n   * This feature is in BETA, and SVG import/export is not yet supported.\n   * @type Path\n   * @example\n   * const textPath = new Text('Text on a path', {\n   *     top: 150,\n   *     left: 150,\n   *     textAlign: 'center',\n   *     charSpacing: -50,\n   *     path: new Path('M 0 0 C 50 -100 150 -100 200 0', {\n   *         strokeWidth: 1,\n   *         visible: false\n   *     }),\n   *     pathSide: 'left',\n   *     pathStartOffset: 0\n   * });\n   * @default\n   */\n  declare path?: Path;\n\n  /**\n   * Offset amount for text path starting position\n   * Only used when text has a path\n   * @type Number\n   * @default\n   */\n  declare pathStartOffset: number;\n\n  /**\n   * Which side of the path the text should be drawn on.\n   * Only used when text has a path\n   * @type {TPathSide} 'left|right'\n   * @default\n   */\n  declare pathSide: TPathSide;\n\n  /**\n   * How text is aligned to the path. This property determines\n   * the perpendicular position of each character relative to the path.\n   * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n   * This feature is in BETA, and its behavior may change\n   * @type TPathAlign\n   * @default\n   */\n  declare pathAlign: TPathAlign;\n\n  /**\n   * @private\n   */\n  declare _fontSizeFraction: number;\n\n  /**\n   * @private\n   */\n  declare offsets: { underline: number; linethrough: number; overline: number };\n\n  /**\n   * Text Line proportion to font Size (in pixels)\n   * @type Number\n   * @default\n   */\n  declare _fontSizeMult: number;\n\n  /**\n   * additional space between characters\n   * expressed in thousands of em unit\n   * @type Number\n   * @default\n   */\n  declare charSpacing: number;\n\n  /**\n   * Baseline shift, styles only, keep at 0 for the main text object\n   * @type {Number}\n   * @default\n   */\n  declare deltaY: number;\n\n  /**\n   * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n   * determine the direction of the text.\n   * This has to be set manually together with textAlign and originX for proper\n   * experience.\n   * some interesting link for the future\n   * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n   * @since 4.5.0\n   * @type {CanvasDirection} 'ltr|rtl'\n   * @default\n   */\n  declare direction: CanvasDirection;\n\n  /**\n   * contains characters bounding boxes\n   * This variable is considered to be protected.\n   * But for how mixins are implemented right now, we can't leave it private\n   * @protected\n   */\n  __charBounds: GraphemeBBox[][] = [];\n\n  /**\n   * use this size when measuring text. To avoid IE11 rounding errors\n   * @type {Number}\n   * @default\n   * @readonly\n   * @private\n   */\n  declare CACHE_FONT_SIZE: number;\n\n  /**\n   * contains the min text width to avoid getting 0\n   * @type {Number}\n   * @default\n   */\n  declare MIN_TEXT_WIDTH: number;\n\n  /**\n   * contains the the text of the object, divided in lines as they are displayed\n   * on screen. Wrapping will divide the text independently of line breaks\n   * @type {string[]}\n   * @default\n   */\n  declare textLines: string[];\n\n  /**\n   * same as textlines, but each line is an array of graphemes as split by splitByGrapheme\n   * @type {string[]}\n   * @default\n   */\n  declare _textLines: string[][];\n\n  declare _unwrappedTextLines: string[][];\n  declare _text: string[];\n  declare cursorWidth: number;\n  declare __lineHeights: number[];\n  declare __lineWidths: number[];\n  declare initialized?: true;\n\n  static cacheProperties = [...cacheProperties, ...additionalProps];\n\n  static ownDefaults = textDefaultValues;\n\n  static type = 'Text';\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...FabricText.ownDefaults };\n  }\n\n  constructor(text: string, options?: Props) {\n    super();\n    Object.assign(this, FabricText.ownDefaults);\n    this.setOptions(options);\n    if (!this.styles) {\n      this.styles = {};\n    }\n    this.text = text;\n    this.initialized = true;\n    if (this.path) {\n      this.setPathInfo();\n    }\n    this.initDimensions();\n    this.setCoords();\n  }\n\n  /**\n   * If text has a path, it will add the extra information needed\n   * for path and text calculations\n   */\n  setPathInfo() {\n    const path = this.path;\n    if (path) {\n      path.segmentsInfo = getPathSegmentsInfo(path.path);\n    }\n  }\n\n  /**\n   * @private\n   * Divides text into lines of text and lines of graphemes.\n   */\n  _splitText(): TextLinesInfo {\n    const newLines = this._splitTextIntoLines(this.text);\n    this.textLines = newLines.lines;\n    this._textLines = newLines.graphemeLines;\n    this._unwrappedTextLines = newLines._unwrappedLines;\n    this._text = newLines.graphemeText;\n    return newLines;\n  }\n\n  /**\n   * Initialize or update text dimensions.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   */\n  initDimensions() {\n    this._splitText();\n    this._clearCache();\n    this.dirty = true;\n    if (this.path) {\n      this.width = this.path.width;\n      this.height = this.path.height;\n    } else {\n      this.width =\n        this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n      this.height = this.calcTextHeight();\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n  }\n\n  /**\n   * Enlarge space boxes and shift the others\n   */\n  enlargeSpaces() {\n    let diffSpace,\n      currentLineWidth,\n      numberOfSpaces,\n      accumulatedSpace,\n      line,\n      charBound,\n      spaces;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      if (\n        this.textAlign !== JUSTIFY &&\n        (i === len - 1 || this.isEndOfWrapping(i))\n      ) {\n        continue;\n      }\n      accumulatedSpace = 0;\n      line = this._textLines[i];\n      currentLineWidth = this.getLineWidth(i);\n      if (\n        currentLineWidth < this.width &&\n        (spaces = this.textLines[i].match(this._reSpacesAndTabs))\n      ) {\n        numberOfSpaces = spaces.length;\n        diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n        for (let j = 0; j <= line.length; j++) {\n          charBound = this.__charBounds[i][j];\n          if (this._reSpaceAndTab.test(line[j])) {\n            charBound.width += diffSpace;\n            charBound.kernedWidth += diffSpace;\n            charBound.left += accumulatedSpace;\n            accumulatedSpace += diffSpace;\n          } else {\n            charBound.left += accumulatedSpace;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    return lineIndex === this._textLines.length - 1;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * It return always 1 for text and Itext. Textbox has its own implementation\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1;\n  missingNewlineOffset(_lineIndex: number): 1 {\n    return 1;\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor\n   * @param {Number} selectionStart\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(selectionStart: number, skipWrapping?: boolean) {\n    const lines = skipWrapping ? this._unwrappedTextLines : this._textLines;\n    let i: number;\n    for (i = 0; i < lines.length; i++) {\n      if (selectionStart <= lines[i].length) {\n        return {\n          lineIndex: i,\n          charIndex: selectionStart,\n        };\n      }\n      selectionStart -=\n        lines[i].length + this.missingNewlineOffset(i, skipWrapping);\n    }\n    return {\n      lineIndex: i - 1,\n      charIndex:\n        lines[i - 1].length < selectionStart\n          ? lines[i - 1].length\n          : selectionStart,\n    };\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of text object\n   */\n  toString(): string {\n    return `#<Text (${this.complexity()}): { \"text\": \"${\n      this.text\n    }\", \"fontFamily\": \"${this.fontFamily}\" }>`;\n  }\n\n  /**\n   * Return the dimension and the zoom level needed to create a cache canvas\n   * big enough to host the object to be cached.\n   * @private\n   * @param {Object} dim.x width of object to be cached\n   * @param {Object} dim.y height of object to be cached\n   * @return {Object}.width width of canvas\n   * @return {Object}.height height of canvas\n   * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n   * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n   */\n  _getCacheCanvasDimensions(): TCacheCanvasDimensions {\n    const dims = super._getCacheCanvasDimensions();\n    const fontSize = this.fontSize;\n    dims.width += fontSize * dims.zoomX;\n    dims.height += fontSize * dims.zoomY;\n    return dims;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    const path = this.path;\n    path && !path.isNotVisible() && path._render(ctx);\n    this._setTextStyles(ctx);\n    this._renderTextLinesBackground(ctx);\n    this._renderTextDecoration(ctx, 'underline');\n    this._renderText(ctx);\n    this._renderTextDecoration(ctx, 'overline');\n    this._renderTextDecoration(ctx, 'linethrough');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderText(ctx: CanvasRenderingContext2D) {\n    if (this.paintFirst === STROKE) {\n      this._renderTextStroke(ctx);\n      this._renderTextFill(ctx);\n    } else {\n      this._renderTextFill(ctx);\n      this._renderTextStroke(ctx);\n    }\n  }\n\n  /**\n   * Set the font parameter of the context with the object properties or with charStyle\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [charStyle] object with font style properties\n   * @param {String} [charStyle.fontFamily] Font Family\n   * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n   * @param {String} [charStyle.fontWeight] Font weight\n   * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n   */\n  _setTextStyles(\n    ctx: CanvasRenderingContext2D,\n    charStyle?: any,\n    forMeasuring?: boolean,\n  ) {\n    ctx.textBaseline = 'alphabetic';\n    if (this.path) {\n      switch (this.pathAlign) {\n        case CENTER:\n          ctx.textBaseline = 'middle';\n          break;\n        case 'ascender':\n          ctx.textBaseline = TOP;\n          break;\n        case 'descender':\n          ctx.textBaseline = BOTTOM;\n          break;\n      }\n    }\n    ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n  }\n\n  /**\n   * calculate and return the text Width measuring each line.\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @return {Number} Maximum width of Text object\n   */\n  calcTextWidth(): number {\n    let maxWidth = this.getLineWidth(0);\n\n    for (let i = 1, len = this._textLines.length; i < len; i++) {\n      const currentLineWidth = this.getLineWidth(i);\n      if (currentLineWidth > maxWidth) {\n        maxWidth = currentLineWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  /**\n   * @private\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} line Text to render\n   * @param {Number} left Left position of text\n   * @param {Number} top Top position of text\n   * @param {Number} lineIndex Index of a line in a text\n   */\n  _renderTextLine(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: string[],\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    this._renderChars(method, ctx, line, left, top, lineIndex);\n  }\n\n  /**\n   * Renders the text background for lines, taking care of style\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextLinesBackground(ctx: CanvasRenderingContext2D) {\n    if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n      return;\n    }\n    const originalFill = ctx.fillStyle,\n      leftOffset = this._getLeftOffset();\n    let lineTopOffset = this._getTopOffset();\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (\n        !this.textBackgroundColor &&\n        !this.styleHas('textBackgroundColor', i)\n      ) {\n        lineTopOffset += heightOfLine;\n        continue;\n      }\n      const jlen = this._textLines[i].length;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxWidth = 0;\n      let boxStart = 0;\n      let drawStart;\n      let currentColor;\n      let lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n      for (let j = 0; j < jlen; j++) {\n        // at this point charbox are either standard or full with pathInfo if there is a path.\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n        if (this.path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillStyle = currentColor;\n          currentColor &&\n            ctx.fillRect(\n              -charBox.width / 2,\n              (-heightOfLine / this.lineHeight) * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight,\n            );\n          ctx.restore();\n        } else if (currentColor !== lastColor) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = lastColor;\n          lastColor &&\n            ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight,\n            );\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastColor = currentColor;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      if (currentColor && !this.path) {\n        drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentColor;\n        ctx.fillRect(\n          drawStart,\n          lineTopOffset,\n          boxWidth,\n          heightOfLine / this.lineHeight,\n        );\n      }\n      lineTopOffset += heightOfLine;\n    }\n    ctx.fillStyle = originalFill;\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * measure and return the width of a single character.\n   * possibly overridden to accommodate different measure logic or\n   * to hook some external lib for character measurement\n   * @private\n   * @param {String} _char, char to be measured\n   * @param {Object} charStyle style of char to be measured\n   * @param {String} [previousChar] previous char\n   * @param {Object} [prevCharStyle] style of previous char\n   */\n  _measureChar(\n    _char: string,\n    charStyle: CompleteTextStyleDeclaration,\n    previousChar: string | undefined,\n    prevCharStyle: CompleteTextStyleDeclaration | Record<string, never>,\n  ) {\n    const fontCache = cache.getFontCache(charStyle),\n      fontDeclaration = this._getFontDeclaration(charStyle),\n      couple = previousChar + _char,\n      stylesAreEqual =\n        previousChar &&\n        fontDeclaration === this._getFontDeclaration(prevCharStyle),\n      fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE;\n    let width: number | undefined,\n      coupleWidth: number | undefined,\n      previousWidth: number | undefined,\n      kernedWidth: number | undefined;\n\n    if (previousChar && fontCache[previousChar] !== undefined) {\n      previousWidth = fontCache[previousChar];\n    }\n    if (fontCache[_char] !== undefined) {\n      kernedWidth = width = fontCache[_char];\n    }\n    if (stylesAreEqual && fontCache[couple] !== undefined) {\n      coupleWidth = fontCache[couple];\n      kernedWidth = coupleWidth - previousWidth!;\n    }\n    if (\n      width === undefined ||\n      previousWidth === undefined ||\n      coupleWidth === undefined\n    ) {\n      const ctx = getMeasuringContext()!;\n      // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n      this._setTextStyles(ctx, charStyle, true);\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        // safe to use the non-null since if undefined we defined it before.\n        kernedWidth = coupleWidth - previousWidth!;\n      }\n    }\n    return {\n      width: width * fontMultiplier,\n      kernedWidth: kernedWidth! * fontMultiplier,\n    };\n  }\n\n  /**\n   * Computes height of character at given position\n   * @param {Number} line the line index number\n   * @param {Number} _char the character index number\n   * @return {Number} fontSize of the character\n   */\n  getHeightOfChar(line: number, _char: number): number {\n    return this.getValueOfPropertyAt(line, _char, 'fontSize');\n  }\n\n  /**\n   * measure a text line measuring all characters.\n   * @param {Number} lineIndex line number\n   */\n  measureLine(lineIndex: number) {\n    const lineInfo = this._measureLine(lineIndex);\n    if (this.charSpacing !== 0) {\n      lineInfo.width -= this._getWidthOfCharSpacing();\n    }\n    if (lineInfo.width < 0) {\n      lineInfo.width = 0;\n    }\n    return lineInfo;\n  }\n\n  /**\n   * measure every grapheme of a line, populating __charBounds\n   * @param {Number} lineIndex\n   * @return {Object} object.width total width of characters\n   * @return {Object} object.numOfSpaces length of chars that match this._reSpacesAndTabs\n   */\n  _measureLine(lineIndex: number) {\n    let width = 0,\n      prevGrapheme: string | undefined,\n      graphemeInfo: GraphemeBBox | undefined;\n\n    const reverse = this.pathSide === RIGHT,\n      path = this.path,\n      line = this._textLines[lineIndex],\n      llength = line.length,\n      lineBounds = new Array<GraphemeBBox>(llength);\n\n    this.__charBounds[lineIndex] = lineBounds;\n    for (let i = 0; i < llength; i++) {\n      const grapheme = line[i];\n      graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n      lineBounds[i] = graphemeInfo;\n      width += graphemeInfo.kernedWidth;\n      prevGrapheme = grapheme;\n    }\n    // this latest bound box represent the last character of the line\n    // to simplify cursor handling in interactive mode.\n    lineBounds[llength] = {\n      left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n      width: 0,\n      kernedWidth: 0,\n      height: this.fontSize,\n      deltaY: 0,\n    } as GraphemeBBox;\n    if (path && path.segmentsInfo) {\n      let positionInPath = 0;\n      const totalPathLength =\n        path.segmentsInfo[path.segmentsInfo.length - 1].length;\n      switch (this.textAlign) {\n        case LEFT:\n          positionInPath = reverse ? totalPathLength - width : 0;\n          break;\n        case CENTER:\n          positionInPath = (totalPathLength - width) / 2;\n          break;\n        case RIGHT:\n          positionInPath = reverse ? 0 : totalPathLength - width;\n          break;\n        //todo - add support for justify\n      }\n      positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n      for (\n        let i = reverse ? llength - 1 : 0;\n        reverse ? i >= 0 : i < llength;\n        reverse ? i-- : i++\n      ) {\n        graphemeInfo = lineBounds[i];\n        if (positionInPath > totalPathLength) {\n          positionInPath %= totalPathLength;\n        } else if (positionInPath < 0) {\n          positionInPath += totalPathLength;\n        }\n        // it would probably much faster to send all the grapheme position for a line\n        // and calculate path position/angle at once.\n        this._setGraphemeOnPath(positionInPath, graphemeInfo);\n        positionInPath += graphemeInfo.kernedWidth;\n      }\n    }\n    return { width: width, numOfSpaces: 0 };\n  }\n\n  /**\n   * Calculate the angle  and the left,top position of the char that follow a path.\n   * It appends it to graphemeInfo to be reused later at rendering\n   * @private\n   * @param {Number} positionInPath to be measured\n   * @param {GraphemeBBox} graphemeInfo current grapheme box information\n   * @param {Object} startingPoint position of the point\n   */\n  _setGraphemeOnPath(positionInPath: number, graphemeInfo: GraphemeBBox) {\n    const centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n      path = this.path!;\n\n    // we are at currentPositionOnPath. we want to know what point on the path is.\n    const info = getPointOnPath(path.path, centerPosition, path.segmentsInfo)!;\n    graphemeInfo.renderLeft = info.x - path.pathOffset.x;\n    graphemeInfo.renderTop = info.y - path.pathOffset.y;\n    graphemeInfo.angle = info.angle + (this.pathSide === RIGHT ? Math.PI : 0);\n  }\n\n  /**\n   *\n   * @param {String} grapheme to be measured\n   * @param {Number} lineIndex index of the line where the char is\n   * @param {Number} charIndex position in the line\n   * @param {String} [prevGrapheme] character preceding the one to be measured\n   * @returns {GraphemeBBox} grapheme bbox\n   */\n  _getGraphemeBox(\n    grapheme: string,\n    lineIndex: number,\n    charIndex: number,\n    prevGrapheme?: string,\n    skipLeft?: boolean,\n  ): GraphemeBBox {\n    const style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      prevStyle = prevGrapheme\n        ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1)\n        : {},\n      info = this._measureChar(grapheme, style, prevGrapheme, prevStyle);\n    let kernedWidth = info.kernedWidth,\n      width = info.width,\n      charSpacing;\n\n    if (this.charSpacing !== 0) {\n      charSpacing = this._getWidthOfCharSpacing();\n      width += charSpacing;\n      kernedWidth += charSpacing;\n    }\n\n    const box: GraphemeBBox = {\n      width,\n      left: 0,\n      height: style.fontSize,\n      kernedWidth,\n      deltaY: style.deltaY,\n    };\n    if (charIndex > 0 && !skipLeft) {\n      const previousBox = this.__charBounds[lineIndex][charIndex - 1];\n      box.left =\n        previousBox.left + previousBox.width + info.kernedWidth - info.width;\n    }\n    return box;\n  }\n\n  /**\n   * Calculate height of line at 'lineIndex'\n   * @param {Number} lineIndex index of line to calculate\n   * @return {Number}\n   */\n  getHeightOfLine(lineIndex: number): number {\n    if (this.__lineHeights[lineIndex]) {\n      return this.__lineHeights[lineIndex];\n    }\n\n    // char 0 is measured before the line cycle because it needs to char\n    // emptylines\n    let maxHeight = this.getHeightOfChar(lineIndex, 0);\n    for (let i = 1, len = this._textLines[lineIndex].length; i < len; i++) {\n      maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n    }\n\n    return (this.__lineHeights[lineIndex] =\n      maxHeight * this.lineHeight * this._fontSizeMult);\n  }\n\n  /**\n   * Calculate text box height\n   */\n  calcTextHeight() {\n    let lineHeight,\n      height = 0;\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      lineHeight = this.getHeightOfLine(i);\n      height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n    }\n    return height;\n  }\n\n  /**\n   * @private\n   * @return {Number} Left offset\n   */\n  _getLeftOffset(): number {\n    return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n  }\n\n  /**\n   * @private\n   * @return {Number} Top offset\n   */\n  _getTopOffset(): number {\n    return -this.height / 2;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {String} method Method name (\"fillText\" or \"strokeText\")\n   */\n  _renderTextCommon(\n    ctx: CanvasRenderingContext2D,\n    method: 'fillText' | 'strokeText',\n  ) {\n    ctx.save();\n    let lineHeights = 0;\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset();\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i),\n        maxHeight = heightOfLine / this.lineHeight,\n        leftOffset = this._getLineLeftOffset(i);\n      this._renderTextLine(\n        method,\n        ctx,\n        this._textLines[i],\n        left + leftOffset,\n        top + lineHeights + maxHeight,\n        i,\n      );\n      lineHeights += heightOfLine;\n    }\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextFill(ctx: CanvasRenderingContext2D) {\n    if (!this.fill && !this.styleHas(FILL)) {\n      return;\n    }\n\n    this._renderTextCommon(ctx, 'fillText');\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextStroke(ctx: CanvasRenderingContext2D) {\n    if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n      return;\n    }\n\n    if (this.shadow && !this.shadow.affectStroke) {\n      this._removeShadow(ctx);\n    }\n\n    ctx.save();\n    this._setLineDash(ctx, this.strokeDashArray);\n    ctx.beginPath();\n    this._renderTextCommon(ctx, 'strokeText');\n    ctx.closePath();\n    ctx.restore();\n  }\n\n  /**\n   * @private\n   * @param {String} method fillText or strokeText.\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Array} line Content of the line, splitted in an array by grapheme\n   * @param {Number} left\n   * @param {Number} top\n   * @param {Number} lineIndex\n   */\n  _renderChars(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    line: Array<any>,\n    left: number,\n    top: number,\n    lineIndex: number,\n  ) {\n    const lineHeight = this.getHeightOfLine(lineIndex),\n      isJustify = this.textAlign.includes(JUSTIFY),\n      path = this.path,\n      shortCut =\n        !isJustify &&\n        this.charSpacing === 0 &&\n        this.isEmptyStyles(lineIndex) &&\n        !path,\n      isLtr = this.direction === 'ltr',\n      sign = this.direction === 'ltr' ? 1 : -1,\n      // this was changed in the PR #7674\n      // currentDirection = ctx.canvas.getAttribute('dir');\n      currentDirection = ctx.direction;\n\n    let actualStyle,\n      nextStyle,\n      charsToRender = '',\n      charBox,\n      boxWidth = 0,\n      timeToRender,\n      drawingLeft;\n\n    ctx.save();\n    if (currentDirection !== this.direction) {\n      ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n      ctx.direction = isLtr ? 'ltr' : 'rtl';\n      ctx.textAlign = isLtr ? LEFT : RIGHT;\n    }\n    top -= (lineHeight * this._fontSizeFraction) / this.lineHeight;\n    if (shortCut) {\n      // render all the line in one pass without checking\n      // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n      this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top);\n      ctx.restore();\n      return;\n    }\n    for (let i = 0, len = line.length - 1; i <= len; i++) {\n      timeToRender = i === len || this.charSpacing || path;\n      charsToRender += line[i];\n      charBox = this.__charBounds[lineIndex][i] as Required<GraphemeBBox>;\n      if (boxWidth === 0) {\n        left += sign * (charBox.kernedWidth - charBox.width);\n        boxWidth += charBox.width;\n      } else {\n        boxWidth += charBox.kernedWidth;\n      }\n      if (isJustify && !timeToRender) {\n        if (this._reSpaceAndTab.test(line[i])) {\n          timeToRender = true;\n        }\n      }\n      if (!timeToRender) {\n        // if we have charSpacing, we render char by char\n        actualStyle =\n          actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n        nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n        timeToRender = hasStyleChanged(actualStyle, nextStyle, false);\n      }\n      if (timeToRender) {\n        if (path) {\n          ctx.save();\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            -boxWidth / 2,\n            0,\n          );\n          ctx.restore();\n        } else {\n          drawingLeft = left;\n          this._renderChar(\n            method,\n            ctx,\n            lineIndex,\n            i,\n            charsToRender,\n            drawingLeft,\n            top,\n          );\n        }\n        charsToRender = '';\n        actualStyle = nextStyle;\n        left += sign * boxWidth;\n        boxWidth = 0;\n      }\n    }\n    ctx.restore();\n  }\n\n  /**\n   * This function try to patch the missing gradientTransform on canvas gradients.\n   * transforming a context to transform the gradient, is going to transform the stroke too.\n   * we want to transform the gradient but not the stroke operation, so we create\n   * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n   * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n   * is limited.\n   * @private\n   * @param {TFiller} filler a fabric gradient instance\n   * @return {CanvasPattern} a pattern to use as fill/stroke style\n   */\n  _applyPatternGradientTransformText(filler: TFiller) {\n    // TODO: verify compatibility with strokeUniform\n    const width = this.width + this.strokeWidth,\n      height = this.height + this.strokeWidth,\n      pCanvas = createCanvasElementFor({\n        width,\n        height,\n      }),\n      pCtx = pCanvas.getContext('2d')!;\n    pCanvas.width = width;\n    pCanvas.height = height;\n    pCtx.beginPath();\n    pCtx.moveTo(0, 0);\n    pCtx.lineTo(width, 0);\n    pCtx.lineTo(width, height);\n    pCtx.lineTo(0, height);\n    pCtx.closePath();\n    pCtx.translate(width / 2, height / 2);\n    pCtx.fillStyle = filler.toLive(pCtx)!;\n    this._applyPatternGradientTransform(pCtx, filler);\n    pCtx.fill();\n    return pCtx.createPattern(pCanvas, 'no-repeat')!;\n  }\n\n  handleFiller<T extends 'fill' | 'stroke'>(\n    ctx: CanvasRenderingContext2D,\n    property: `${T}Style`,\n    filler: TFiller | string,\n  ): { offsetX: number; offsetY: number } {\n    let offsetX: number, offsetY: number;\n    if (isFiller(filler)) {\n      if (\n        (filler as Gradient<'linear'>).gradientUnits === 'percentage' ||\n        (filler as Gradient<'linear'>).gradientTransform ||\n        (filler as Pattern).patternTransform\n      ) {\n        // need to transform gradient in a pattern.\n        // this is a slow process. If you are hitting this codepath, and the object\n        // is not using caching, you should consider switching it on.\n        // we need a canvas as big as the current object caching canvas.\n        offsetX = -this.width / 2;\n        offsetY = -this.height / 2;\n        ctx.translate(offsetX, offsetY);\n        ctx[property] = this._applyPatternGradientTransformText(filler);\n        return { offsetX, offsetY };\n      } else {\n        // is a simple gradient or pattern\n        ctx[property] = filler.toLive(ctx)!;\n        return this._applyPatternGradientTransform(ctx, filler);\n      }\n    } else {\n      // is a color\n      ctx[property] = filler;\n    }\n    return { offsetX: 0, offsetY: 0 };\n  }\n\n  /**\n   * This function prepare the canvas for a stroke style, and stroke and strokeWidth\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with stroke and strokeWidth defined\n   * @returns\n   */\n  _setStrokeStyles(\n    ctx: CanvasRenderingContext2D,\n    {\n      stroke,\n      strokeWidth,\n    }: Pick<CompleteTextStyleDeclaration, 'stroke' | 'strokeWidth'>,\n  ) {\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.lineDashOffset = this.strokeDashOffset;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.miterLimit = this.strokeMiterLimit;\n    return this.handleFiller(ctx, 'strokeStyle', stroke!);\n  }\n\n  /**\n   * This function prepare the canvas for a ill style, and fill\n   * need to be sent in as defined\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {CompleteTextStyleDeclaration} style with ill defined\n   * @returns\n   */\n  _setFillStyles(ctx: CanvasRenderingContext2D, { fill }: Pick<this, 'fill'>) {\n    return this.handleFiller(ctx, 'fillStyle', fill!);\n  }\n\n  /**\n   * @private\n   * @param {String} method\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {String} _char\n   * @param {Number} left Left coordinate\n   * @param {Number} top Top coordinate\n   * @param {Number} lineHeight Height of the line\n   */\n  _renderChar(\n    method: 'fillText' | 'strokeText',\n    ctx: CanvasRenderingContext2D,\n    lineIndex: number,\n    charIndex: number,\n    _char: string,\n    left: number,\n    top: number,\n  ) {\n    const decl = this._getStyleDeclaration(lineIndex, charIndex),\n      fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n      shouldFill = method === 'fillText' && fullDecl.fill,\n      shouldStroke =\n        method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth;\n\n    if (!shouldStroke && !shouldFill) {\n      return;\n    }\n    ctx.save();\n\n    ctx.font = this._getFontDeclaration(fullDecl);\n\n    if (decl.textBackgroundColor) {\n      this._removeShadow(ctx);\n    }\n    if (decl.deltaY) {\n      top += decl.deltaY;\n    }\n\n    if (shouldFill) {\n      const fillOffsets = this._setFillStyles(ctx, fullDecl);\n      ctx.fillText(\n        _char,\n        left - fillOffsets.offsetX,\n        top - fillOffsets.offsetY,\n      );\n    }\n\n    if (shouldStroke) {\n      const strokeOffsets = this._setStrokeStyles(ctx, fullDecl);\n      ctx.strokeText(\n        _char,\n        left - strokeOffsets.offsetX,\n        top - strokeOffsets.offsetY,\n      );\n    }\n\n    ctx.restore();\n  }\n\n  /**\n   * Turns the character into a 'superior figure' (i.e. 'superscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSuperscript(start: number, end: number) {\n    this._setScript(start, end, this.superscript);\n  }\n\n  /**\n   * Turns the character into an 'inferior figure' (i.e. 'subscript')\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   */\n  setSubscript(start: number, end: number) {\n    this._setScript(start, end, this.subscript);\n  }\n\n  /**\n   * Applies 'schema' at given position\n   * @private\n   * @param {Number} start selection start\n   * @param {Number} end selection end\n   * @param {Number} schema\n   */\n  protected _setScript(\n    start: number,\n    end: number,\n    schema: {\n      size: number;\n      baseline: number;\n    },\n  ) {\n    const loc = this.get2DCursorLocation(start, true),\n      fontSize = this.getValueOfPropertyAt(\n        loc.lineIndex,\n        loc.charIndex,\n        'fontSize',\n      ),\n      dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n      style = {\n        fontSize: fontSize * schema.size,\n        deltaY: dy + fontSize * schema.baseline,\n      };\n    this.setSelectionStyles(style, start, end);\n  }\n\n  /**\n   * @private\n   * @param {Number} lineIndex index text line\n   * @return {Number} Line left offset\n   */\n  _getLineLeftOffset(lineIndex: number): number {\n    const lineWidth = this.getLineWidth(lineIndex),\n      lineDiff = this.width - lineWidth,\n      textAlign = this.textAlign,\n      direction = this.direction,\n      isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n    let leftOffset = 0;\n    if (\n      textAlign === JUSTIFY ||\n      (textAlign === JUSTIFY_CENTER && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_RIGHT && !isEndOfWrapping) ||\n      (textAlign === JUSTIFY_LEFT && !isEndOfWrapping)\n    ) {\n      return 0;\n    }\n    if (textAlign === CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (textAlign === JUSTIFY_CENTER) {\n      leftOffset = lineDiff / 2;\n    }\n    if (textAlign === JUSTIFY_RIGHT) {\n      leftOffset = lineDiff;\n    }\n    if (direction === 'rtl') {\n      if (\n        textAlign === RIGHT ||\n        textAlign === JUSTIFY ||\n        textAlign === JUSTIFY_RIGHT\n      ) {\n        leftOffset = 0;\n      } else if (textAlign === LEFT || textAlign === JUSTIFY_LEFT) {\n        leftOffset = -lineDiff;\n      } else if (textAlign === CENTER || textAlign === JUSTIFY_CENTER) {\n        leftOffset = -lineDiff / 2;\n      }\n    }\n    return leftOffset;\n  }\n\n  /**\n   * @private\n   */\n  _clearCache() {\n    this._forceClearCache = false;\n    this.__lineWidths = [];\n    this.__lineHeights = [];\n    this.__charBounds = [];\n  }\n\n  /**\n   * Measure a single line given its index. Used to calculate the initial\n   * text bounding box. The values are calculated and stored in __lineWidths cache.\n   * @private\n   * @param {Number} lineIndex line number\n   * @return {Number} Line width\n   */\n  getLineWidth(lineIndex: number): number {\n    if (this.__lineWidths[lineIndex] !== undefined) {\n      return this.__lineWidths[lineIndex];\n    }\n\n    const { width } = this.measureLine(lineIndex);\n    this.__lineWidths[lineIndex] = width;\n    return width;\n  }\n\n  _getWidthOfCharSpacing() {\n    if (this.charSpacing !== 0) {\n      return (this.fontSize * this.charSpacing) / 1000;\n    }\n    return 0;\n  }\n\n  /**\n   * Retrieves the value of property at given character position\n   * @param {Number} lineIndex the line number\n   * @param {Number} charIndex the character number\n   * @param {String} property the property name\n   * @returns the value of 'property'\n   */\n  getValueOfPropertyAt<T extends StylePropertiesType>(\n    lineIndex: number,\n    charIndex: number,\n    property: T,\n  ): this[T] {\n    const charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n    return (charStyle[property] ?? this[property]) as this[T];\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _renderTextDecoration(\n    ctx: CanvasRenderingContext2D,\n    type: 'underline' | 'linethrough' | 'overline',\n  ) {\n    if (!this[type] && !this.styleHas(type)) {\n      return;\n    }\n    let topOffset = this._getTopOffset();\n    const leftOffset = this._getLeftOffset(),\n      path = this.path,\n      charSpacing = this._getWidthOfCharSpacing(),\n      offsetY = this.offsets[type];\n\n    for (let i = 0, len = this._textLines.length; i < len; i++) {\n      const heightOfLine = this.getHeightOfLine(i);\n      if (!this[type] && !this.styleHas(type, i)) {\n        topOffset += heightOfLine;\n        continue;\n      }\n      const line = this._textLines[i];\n      const maxHeight = heightOfLine / this.lineHeight;\n      const lineLeftOffset = this._getLineLeftOffset(i);\n      let boxStart = 0;\n      let boxWidth = 0;\n      let lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n      let lastFill = this.getValueOfPropertyAt(i, 0, FILL);\n      let currentDecoration;\n      let currentFill;\n      const top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n      let size = this.getHeightOfChar(i, 0);\n      let dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n      for (let j = 0, jlen = line.length; j < jlen; j++) {\n        const charBox = this.__charBounds[i][j] as Required<GraphemeBBox>;\n        currentDecoration = this.getValueOfPropertyAt(i, j, type);\n        currentFill = this.getValueOfPropertyAt(i, j, FILL);\n        const currentSize = this.getHeightOfChar(i, j);\n        const currentDy = this.getValueOfPropertyAt(i, j, 'deltaY');\n        if (path && currentDecoration && currentFill) {\n          ctx.save();\n          // bug? verify lastFill is a valid fill here.\n          ctx.fillStyle = lastFill as string;\n          ctx.translate(charBox.renderLeft, charBox.renderTop);\n          ctx.rotate(charBox.angle);\n          ctx.fillRect(\n            -charBox.kernedWidth / 2,\n            offsetY * currentSize + currentDy,\n            charBox.kernedWidth,\n            this.fontSize / 15,\n          );\n          ctx.restore();\n        } else if (\n          (currentDecoration !== lastDecoration ||\n            currentFill !== lastFill ||\n            currentSize !== size ||\n            currentDy !== dy) &&\n          boxWidth > 0\n        ) {\n          let drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          if (lastDecoration && lastFill) {\n            // bug? verify lastFill is a valid fill here.\n            ctx.fillStyle = lastFill as string;\n            ctx.fillRect(\n              drawStart,\n              top + offsetY * size + dy,\n              boxWidth,\n              this.fontSize / 15,\n            );\n          }\n          boxStart = charBox.left;\n          boxWidth = charBox.width;\n          lastDecoration = currentDecoration;\n          lastFill = currentFill;\n          size = currentSize;\n          dy = currentDy;\n        } else {\n          boxWidth += charBox.kernedWidth;\n        }\n      }\n      let drawStart = leftOffset + lineLeftOffset + boxStart;\n      if (this.direction === 'rtl') {\n        drawStart = this.width - drawStart - boxWidth;\n      }\n      ctx.fillStyle = currentFill as string;\n      currentDecoration &&\n        currentFill &&\n        ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15,\n        );\n      topOffset += heightOfLine;\n    }\n    // if there is text background color no\n    // other shadows should be casted\n    this._removeShadow(ctx);\n  }\n\n  /**\n   * return font declaration string for canvas context\n   * @param {Object} [styleObject] object\n   * @returns {String} font declaration formatted for canvas context.\n   */\n  _getFontDeclaration(\n    {\n      fontFamily = this.fontFamily,\n      fontStyle = this.fontStyle,\n      fontWeight = this.fontWeight,\n      fontSize = this.fontSize,\n    }: Partial<\n      Pick<\n        TextStyleDeclaration,\n        'fontFamily' | 'fontStyle' | 'fontWeight' | 'fontSize'\n      >\n    > = {},\n    forMeasuring?: boolean,\n  ): string {\n    const parsedFontFamily =\n      fontFamily.includes(\"'\") ||\n      fontFamily.includes('\"') ||\n      fontFamily.includes(',') ||\n      FabricText.genericFonts.includes(fontFamily.toLowerCase())\n        ? fontFamily\n        : `\"${fontFamily}\"`;\n    return [\n      fontStyle,\n      fontWeight,\n      `${forMeasuring ? this.CACHE_FONT_SIZE : fontSize}px`,\n      parsedFontFamily,\n    ].join(' ');\n  }\n\n  /**\n   * Renders text instance on a specified context\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    if (!this.visible) {\n      return;\n    }\n    if (\n      this.canvas &&\n      this.canvas.skipOffscreen &&\n      !this.group &&\n      !this.isOnScreen()\n    ) {\n      return;\n    }\n    if (this._forceClearCache) {\n      this.initDimensions();\n    }\n    super.render(ctx);\n  }\n\n  /**\n   * Override this method to customize grapheme splitting\n   * @todo the util `graphemeSplit` needs to be injectable in some way.\n   * is more comfortable to inject the correct util rather than having to override text\n   * in the middle of the prototype chain\n   * @param {string} value\n   * @returns {string[]} array of graphemes\n   */\n  graphemeSplit(value: string): string[] {\n    return graphemeSplit(value);\n  }\n\n  /**\n   * Returns the text as an array of lines.\n   * @param {String} text text to split\n   * @returns  Lines in the text\n   */\n  _splitTextIntoLines(text: string): TextLinesInfo {\n    const lines = text.split(this._reNewline),\n      newLines = new Array<string[]>(lines.length),\n      newLine = ['\\n'];\n    let newText: string[] = [];\n    for (let i = 0; i < lines.length; i++) {\n      newLines[i] = this.graphemeSplit(lines[i]);\n      newText = newText.concat(newLines[i], newLine);\n    }\n    newText.pop();\n    return {\n      _unwrappedLines: newLines,\n      lines: lines,\n      graphemeText: newText,\n      graphemeLines: newLines,\n    };\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return {\n      ...super.toObject([...additionalProps, ...propertiesToInclude] as K[]),\n      styles: stylesToArray(this.styles, this.text),\n      ...(this.path ? { path: this.path.toObject() } : {}),\n    };\n  }\n\n  set(key: string | any, value?: any) {\n    const { textLayoutProperties } = this.constructor as typeof FabricText;\n    super.set(key, value);\n    let needsDims = false;\n    let isAddingPath = false;\n    if (typeof key === 'object') {\n      for (const _key in key) {\n        if (_key === 'path') {\n          this.setPathInfo();\n        }\n        needsDims = needsDims || textLayoutProperties.includes(_key);\n        isAddingPath = isAddingPath || _key === 'path';\n      }\n    } else {\n      needsDims = textLayoutProperties.includes(key);\n      isAddingPath = key === 'path';\n    }\n    if (isAddingPath) {\n      this.setPathInfo();\n    }\n    if (needsDims && this.initialized) {\n      this.initDimensions();\n      this.setCoords();\n    }\n    return this;\n  }\n\n  /**\n   * Returns complexity of an instance\n   * @return {Number} complexity\n   */\n  complexity(): number {\n    return 1;\n  }\n\n  /**\n   * List of generic font families\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#generic-name\n   */\n  static genericFonts = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n    'ui-serif',\n    'ui-sans-serif',\n    'ui-monospace',\n    'ui-rounded',\n    'math',\n    'emoji',\n    'fangsong',\n  ];\n\n  /* _FROM_SVG_START_ */\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricText.fromElement})\n   * @static\n   * @memberOf Text\n   * @see: http://www.w3.org/TR/SVG/text.html#TextElement\n   */\n  static ATTRIBUTE_NAMES = SHARED_ATTRIBUTES.concat(\n    'x',\n    'y',\n    'dx',\n    'dy',\n    'font-family',\n    'font-style',\n    'font-weight',\n    'font-size',\n    'letter-spacing',\n    'text-decoration',\n    'text-anchor',\n  );\n\n  /**\n   * Returns FabricText instance from an SVG element (<b>not yet implemented</b>)\n   * @static\n   * @memberOf Text\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable,\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      FabricText.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n\n    const {\n      textAnchor = LEFT as typeof LEFT | typeof CENTER | typeof RIGHT,\n      textDecoration = '',\n      dx = 0,\n      dy = 0,\n      top = 0,\n      left = 0,\n      fontSize = DEFAULT_SVG_FONT_SIZE,\n      strokeWidth = 1,\n      ...restOfOptions\n    } = { ...options, ...parsedAttributes };\n\n    const textContent = (element.textContent || '')\n      .replace(/^\\s+|\\s+$|\\n+/g, '')\n      .replace(/\\s+/g, ' ');\n\n    // this code here is probably the usual issue for SVG center find\n    // this can later looked at again and probably removed.\n\n    const text = new this(textContent, {\n        left: left + dx,\n        top: top + dy,\n        underline: textDecoration.includes('underline'),\n        overline: textDecoration.includes('overline'),\n        linethrough: textDecoration.includes('line-through'),\n        // we initialize this as 0\n        strokeWidth: 0,\n        fontSize,\n        ...restOfOptions,\n      }),\n      textHeightScaleFactor = text.getScaledHeight() / text.height,\n      lineHeightDiff =\n        (text.height + text.strokeWidth) * text.lineHeight - text.height,\n      scaledDiff = lineHeightDiff * textHeightScaleFactor,\n      textHeight = text.getScaledHeight() + scaledDiff;\n\n    let offX = 0;\n    /*\n      Adjust positioning:\n        x/y attributes in SVG correspond to the bottom-left corner of text bounding box\n        fabric output by default at top, left.\n    */\n    if (textAnchor === CENTER) {\n      offX = text.getScaledWidth() / 2;\n    }\n    if (textAnchor === RIGHT) {\n      offX = text.getScaledWidth();\n    }\n    text.set({\n      left: text.left - offX,\n      top:\n        text.top -\n        (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) /\n          text.lineHeight,\n      strokeWidth,\n    });\n    return text;\n  }\n\n  /* _FROM_SVG_END_ */\n\n  /**\n   * Returns FabricText instance from an object representation\n   * @param {Object} object plain js Object to create an instance from\n   * @returns {Promise<FabricText>}\n   */\n  static fromObject<\n    T extends TOptions<SerializedTextProps>,\n    S extends FabricText,\n  >(object: T) {\n    return this._fromObject<S>(\n      {\n        ...object,\n        styles: stylesFromArray(object.styles || {}, object.text),\n      },\n      {\n        extraParam: 'text',\n      },\n    );\n  }\n}\n\napplyMixins(FabricText, [TextSVGExportMixin]);\nclassRegistry.setClass(FabricText);\nclassRegistry.setSVGClass(FabricText);\n", "import type {\n  DragEventData,\n  DropEventData,\n  TPointerEvent,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { IText } from './IText';\nimport { setStyle } from '../../util/dom_style';\nimport { cloneStyles } from '../../util/internals/cloneStyles';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, NONE } from '../../constants';\n\n/**\n * #### Dragging IText/Textbox Lifecycle\n * - {@link start} is called from `mousedown` {@link IText#_mouseDownHandler} and determines if dragging should start by testing {@link isPointerOverSelection}\n * - if true `mousedown` {@link IText#_mouseDownHandler} is blocked to keep selection\n * - if the pointer moves, canvas fires numerous mousemove {@link Canvas#_onMouseMove} that we make sure **aren't** prevented ({@link IText#shouldStartDragging}) in order for the window to start a drag session\n * - once/if the session starts canvas calls {@link onDragStart} on the active object to determine if dragging should occur\n * - canvas fires relevant drag events that are handled by the handlers defined in this scope\n * - {@link end} is called from `mouseup` {@link IText#mouseUpHandler}, blocking IText default click behavior\n * - in case the drag session didn't occur, {@link end} handles a click, since logic to do so was blocked during `mousedown`\n */\nexport class DraggableTextDelegate {\n  readonly target: IText;\n  private __mouseDownInPlace = false;\n  private __dragStartFired = false;\n  private __isDraggingOver = false;\n  private __dragStartSelection?: {\n    selectionStart: number;\n    selectionEnd: number;\n  };\n  private __dragImageDisposer?: VoidFunction;\n  private _dispose?: () => void;\n\n  constructor(target: IText) {\n    this.target = target;\n    const disposers = [\n      this.target.on('dragenter', this.dragEnterHandler.bind(this)),\n      this.target.on('dragover', this.dragOverHandler.bind(this)),\n      this.target.on('dragleave', this.dragLeaveHandler.bind(this)),\n      this.target.on('dragend', this.dragEndHandler.bind(this)),\n      this.target.on('drop', this.dropHandler.bind(this)),\n    ];\n    this._dispose = () => {\n      disposers.forEach((d) => d());\n      this._dispose = undefined;\n    };\n  }\n\n  isPointerOverSelection(e: TPointerEvent) {\n    const target = this.target;\n    const newSelection = target.getSelectionStartFromPointer(e);\n    return (\n      target.isEditing &&\n      newSelection >= target.selectionStart &&\n      newSelection <= target.selectionEnd &&\n      target.selectionStart < target.selectionEnd\n    );\n  }\n\n  /**\n   * @public override this method to disable dragging and default to mousedown logic\n   */\n  start(e: TPointerEvent) {\n    return (this.__mouseDownInPlace = this.isPointerOverSelection(e));\n  }\n\n  /**\n   * @public override this method to disable dragging without discarding selection\n   */\n  isActive() {\n    return this.__mouseDownInPlace;\n  }\n\n  /**\n   * Ends interaction and sets cursor in case of a click\n   * @returns true if was active\n   */\n  end(e: TPointerEvent) {\n    const active = this.isActive();\n    if (active && !this.__dragStartFired) {\n      // mousedown has been blocked since `active` is true => cursor has not been set.\n      // `__dragStartFired` is false => dragging didn't occur, pointer didn't move and is over selection.\n      // meaning this is actually a click, `active` is a false positive.\n      this.target.setCursorByClick(e);\n      this.target.initDelayedCursor(true);\n    }\n    this.__mouseDownInPlace = false;\n    this.__dragStartFired = false;\n    this.__isDraggingOver = false;\n    return active;\n  }\n\n  getDragStartSelection() {\n    return this.__dragStartSelection;\n  }\n\n  /**\n   * Override to customize the drag image\n   * https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage\n   */\n  setDragImage(\n    e: DragEvent,\n    {\n      selectionStart,\n      selectionEnd,\n    }: {\n      selectionStart: number;\n      selectionEnd: number;\n    },\n  ) {\n    const target = this.target;\n    const canvas = target.canvas!;\n    const flipFactor = new Point(target.flipX ? -1 : 1, target.flipY ? -1 : 1);\n    const boundaries = target._getCursorBoundaries(selectionStart);\n    const selectionPosition = new Point(\n      boundaries.left + boundaries.leftOffset,\n      boundaries.top + boundaries.topOffset,\n    ).multiply(flipFactor);\n    const pos = selectionPosition.transform(target.calcTransformMatrix());\n    const pointer = canvas.getScenePoint(e);\n    const diff = pointer.subtract(pos);\n    const retinaScaling = target.getCanvasRetinaScaling();\n    const bbox = target.getBoundingRect();\n    const correction = pos.subtract(new Point(bbox.left, bbox.top));\n    const vpt = canvas.viewportTransform;\n    const offset = correction.add(diff).transform(vpt, true);\n    //  prepare instance for drag image snapshot by making all non selected text invisible\n    const bgc = target.backgroundColor;\n    const styles = cloneStyles(target.styles);\n    target.backgroundColor = '';\n    const styleOverride = {\n      stroke: 'transparent',\n      fill: 'transparent',\n      textBackgroundColor: 'transparent',\n    };\n    target.setSelectionStyles(styleOverride, 0, selectionStart);\n    target.setSelectionStyles(styleOverride, selectionEnd, target.text.length);\n    target.dirty = true;\n    const dragImage = target.toCanvasElement({\n      enableRetinaScaling: canvas.enableRetinaScaling,\n      viewportTransform: true,\n    });\n    // restore values\n    target.backgroundColor = bgc;\n    target.styles = styles;\n    target.dirty = true;\n    //  position drag image offscreen\n    setStyle(dragImage, {\n      position: 'fixed',\n      left: `${-dragImage.width}px`,\n      border: NONE,\n      width: `${dragImage.width / retinaScaling}px`,\n      height: `${dragImage.height / retinaScaling}px`,\n    });\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    this.__dragImageDisposer = () => {\n      dragImage.remove();\n    };\n    getDocumentFromElement(\n      (e.target || this.target.hiddenTextarea)! as HTMLElement,\n    ).body.appendChild(dragImage);\n    e.dataTransfer?.setDragImage(dragImage, offset.x, offset.y);\n  }\n\n  /**\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drag source\n   */\n  onDragStart(e: DragEvent): boolean {\n    this.__dragStartFired = true;\n    const target = this.target;\n    const active = this.isActive();\n    if (active && e.dataTransfer) {\n      const selection = (this.__dragStartSelection = {\n        selectionStart: target.selectionStart,\n        selectionEnd: target.selectionEnd,\n      });\n      const value = target._text\n        .slice(selection.selectionStart, selection.selectionEnd)\n        .join('');\n      const data = { text: target.text, value, ...selection };\n      e.dataTransfer.setData('text/plain', value);\n      e.dataTransfer.setData(\n        'application/fabric',\n        JSON.stringify({\n          value: value,\n          styles: target.getSelectionStyles(\n            selection.selectionStart,\n            selection.selectionEnd,\n            true,\n          ),\n        }),\n      );\n      e.dataTransfer.effectAllowed = 'copyMove';\n      this.setDragImage(e, data);\n    }\n    target.abortCursorAnimation();\n    return active;\n  }\n\n  /**\n   * use {@link targetCanDrop} to respect overriding\n   * @returns {boolean} determines whether {@link target} should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent): boolean {\n    if (\n      this.target.editable &&\n      !this.target.getActiveControl() &&\n      !e.defaultPrevented\n    ) {\n      if (this.isActive() && this.__dragStartSelection) {\n        //  drag source trying to drop over itself\n        //  allow dropping only outside of drag start selection\n        const index = this.target.getSelectionStartFromPointer(e);\n        const dragStartSelection = this.__dragStartSelection;\n        return (\n          index < dragStartSelection.selectionStart ||\n          index > dragStartSelection.selectionEnd\n        );\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * in order to respect overriding {@link IText#canDrop} we call that instead of calling {@link canDrop} directly\n   */\n  protected targetCanDrop(e: DragEvent) {\n    return this.target.canDrop(e);\n  }\n\n  dragEnterHandler({ e }: DragEventData) {\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    }\n  }\n\n  dragOverHandler(ev: DragEventData) {\n    const { e } = ev;\n    const canDrop = this.targetCanDrop(e);\n    if (!this.__isDraggingOver && canDrop) {\n      this.__isDraggingOver = true;\n    } else if (this.__isDraggingOver && !canDrop) {\n      //  drop state has changed\n      this.__isDraggingOver = false;\n    }\n    if (this.__isDraggingOver) {\n      //  can be dropped, inform browser\n      e.preventDefault();\n      //  inform event subscribers\n      ev.canDrop = true;\n      ev.dropTarget = this.target;\n    }\n  }\n\n  dragLeaveHandler() {\n    if (this.__isDraggingOver || this.isActive()) {\n      this.__isDraggingOver = false;\n    }\n  }\n\n  /**\n   * Override the `text/plain | application/fabric` types of {@link DragEvent#dataTransfer}\n   * in order to change the drop value or to customize styling respectively, by listening to the `drop:before` event\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#performing_a_drop\n   */\n  dropHandler(ev: DropEventData) {\n    const { e } = ev;\n    const didDrop = e.defaultPrevented;\n    this.__isDraggingOver = false;\n    // inform browser that the drop has been accepted\n    e.preventDefault();\n    let insert = e.dataTransfer?.getData('text/plain');\n    if (insert && !didDrop) {\n      const target = this.target;\n      const canvas = target.canvas!;\n      let insertAt = target.getSelectionStartFromPointer(e);\n      const { styles } = (\n        e.dataTransfer!.types.includes('application/fabric')\n          ? JSON.parse(e.dataTransfer!.getData('application/fabric'))\n          : {}\n      ) as { styles: TextStyleDeclaration[] };\n      const trailing = insert[Math.max(0, insert.length - 1)];\n      const selectionStartOffset = 0;\n      //  drag and drop in same instance\n      if (this.__dragStartSelection) {\n        const selectionStart = this.__dragStartSelection.selectionStart;\n        const selectionEnd = this.__dragStartSelection.selectionEnd;\n        if (insertAt > selectionStart && insertAt <= selectionEnd) {\n          insertAt = selectionStart;\n        } else if (insertAt > selectionEnd) {\n          insertAt -= selectionEnd - selectionStart;\n        }\n        target.removeChars(selectionStart, selectionEnd);\n        // prevent `dragend` from handling event\n        delete this.__dragStartSelection;\n      }\n      //  remove redundant line break\n      if (\n        target._reNewline.test(trailing) &&\n        (target._reNewline.test(target._text[insertAt]) ||\n          insertAt === target._text.length)\n      ) {\n        insert = insert.trimEnd();\n      }\n      //  inform subscribers\n      ev.didDrop = true;\n      ev.dropTarget = target;\n      //  finalize\n      target.insertChars(insert, styles, insertAt);\n      // can this part be moved in an outside event? andrea to check.\n      canvas.setActiveObject(target);\n      target.enterEditing(e);\n      target.selectionStart = Math.min(\n        insertAt + selectionStartOffset,\n        target._text.length,\n      );\n      target.selectionEnd = Math.min(\n        target.selectionStart + insert.length,\n        target._text.length,\n      );\n      target.hiddenTextarea!.value = target.text;\n      target._updateTextarea();\n      target.hiddenTextarea!.focus();\n      target.fire(CHANGED, {\n        index: insertAt + selectionStartOffset,\n        action: 'drop',\n      });\n      canvas.fire('text:changed', { target });\n      canvas.contextTopDirty = true;\n      canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * fired only on the drag source after drop (if occurred)\n   * handle changes to the drag source in case of a drop on another object or a cancellation\n   * https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Drag_operations#finishing_a_drag\n   */\n  dragEndHandler({ e }: DragEventData) {\n    if (this.isActive() && this.__dragStartFired) {\n      //  once the drop event finishes we check if we need to change the drag source\n      //  if the drag source received the drop we bail out since the drop handler has already handled logic\n      if (this.__dragStartSelection) {\n        const target = this.target;\n        const canvas = this.target.canvas!;\n        const { selectionStart, selectionEnd } = this.__dragStartSelection;\n        const dropEffect = e.dataTransfer?.dropEffect || NONE;\n        if (dropEffect === NONE) {\n          // pointer is back over selection\n          target.selectionStart = selectionStart;\n          target.selectionEnd = selectionEnd;\n          target._updateTextarea();\n          target.hiddenTextarea!.focus();\n        } else {\n          target.clearContextTop();\n          if (dropEffect === 'move') {\n            target.removeChars(selectionStart, selectionEnd);\n            target.selectionStart = target.selectionEnd = selectionStart;\n            target.hiddenTextarea &&\n              (target.hiddenTextarea.value = target.text);\n            target._updateTextarea();\n            target.fire(CHANGED, {\n              index: selectionStart,\n              action: 'dragend',\n            });\n            canvas.fire('text:changed', { target });\n            canvas.requestRenderAll();\n          }\n          target.exitEditing();\n        }\n      }\n    }\n\n    this.__dragImageDisposer && this.__dragImageDisposer();\n    delete this.__dragImageDisposer;\n    delete this.__dragStartSelection;\n    this.__isDraggingOver = false;\n  }\n\n  dispose() {\n    this._dispose && this._dispose();\n  }\n}\n", "import type {\n  ObjectEvents,\n  TPointerEvent,\n  TPointerEventInfo,\n} from '../../EventTypeDefs';\nimport { Point } from '../../Point';\nimport type { FabricObject } from '../Object/FabricObject';\nimport { FabricText } from '../Text/Text';\nimport { animate } from '../../util/animation/animate';\nimport type { TOnAnimationChangeCallback } from '../../util/animation/types';\nimport type { ValueAnimation } from '../../util/animation/ValueAnimation';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport type { TOptions } from '../../typedefs';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { LEFT, MODIFIED, RIGHT, reNewline } from '../../constants';\nimport type { IText } from './IText';\n\n/**\n *  extend this regex to support non english languages\n *\n *  - ` `      Matches a SPACE character (char code 32).\n *  - `\\n`     Matches a LINE FEED character (char code 10).\n *  - `\\.`     Matches a \".\" character (char code 46).\n *  - `,`      Matches a \",\" character (char code 44).\n *  - `;`      Matches a \";\" character (char code 59).\n *  - `!`      Matches a \"!\" character (char code 33).\n *  - `\\?`     Matches a \"?\" character (char code 63).\n *  - `\\-`     Matches a \"-\" character (char code 45).\n */\n// eslint-disable-next-line no-useless-escape\nconst reNonWord = /[ \\n\\.,;!\\?\\-]/;\n\nexport type ITextEvents = ObjectEvents & {\n  'selection:changed': never;\n  changed: never | { index: number; action: string };\n  tripleclick: TPointerEventInfo;\n  'editing:entered': never | { e: TPointerEvent };\n  'editing:exited': never;\n};\n\nexport abstract class ITextBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends FabricText<Props, SProps, EventSpec> {\n  declare abstract isEditing: boolean;\n  declare abstract cursorDelay: number;\n  declare abstract selectionStart: number;\n  declare abstract selectionEnd: number;\n  declare abstract cursorDuration: number;\n  declare abstract editable: boolean;\n  declare abstract editingBorderColor: string;\n\n  declare abstract compositionStart: number;\n  declare abstract compositionEnd: number;\n\n  declare abstract hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * Helps determining when the text is in composition, so that the cursor\n   * rendering is altered.\n   */\n  protected declare inCompositionMode: boolean;\n\n  protected declare _reSpace: RegExp;\n  private declare _currentTickState?: ValueAnimation;\n  private declare _currentTickCompleteState?: ValueAnimation;\n  protected _currentCursorOpacity = 1;\n  private declare _textBeforeEdit: string;\n  protected declare __selectionStartOnMouseDown: number;\n\n  protected declare selected: boolean;\n  protected declare cursorOffsetCache: { left?: number; top?: number };\n  protected declare _savedProps?: {\n    hasControls: boolean;\n    borderColor: string;\n    lockMovementX: boolean;\n    lockMovementY: boolean;\n    selectable: boolean;\n    hoverCursor: CSSStyleDeclaration['cursor'] | null;\n    defaultCursor?: CSSStyleDeclaration['cursor'];\n    moveCursor?: CSSStyleDeclaration['cursor'];\n  };\n  protected declare _selectionDirection: 'left' | 'right' | null;\n\n  abstract initHiddenTextarea(): void;\n  abstract _fireSelectionChanged(): void;\n  abstract renderCursorOrSelection(): void;\n  abstract getSelectionStartFromPointer(e: TPointerEvent): number;\n  abstract _getCursorBoundaries(\n    index: number,\n    skipCaching?: boolean,\n  ): {\n    left: number;\n    top: number;\n    leftOffset: number;\n    topOffset: number;\n  };\n\n  /**\n   * Initializes all the interactive behavior of IText\n   */\n  initBehavior() {\n    this._tick = this._tick.bind(this);\n    this._onTickComplete = this._onTickComplete.bind(this);\n    this.updateSelectionOnMouseMove =\n      this.updateSelectionOnMouseMove.bind(this);\n  }\n\n  onDeselect(options?: { e?: TPointerEvent; object?: FabricObject }) {\n    this.isEditing && this.exitEditing();\n    this.selected = false;\n    return super.onDeselect(options);\n  }\n\n  /**\n   * @private\n   */\n  _animateCursor({\n    toValue,\n    duration,\n    delay,\n    onComplete,\n  }: {\n    toValue: number;\n    duration: number;\n    delay?: number;\n    onComplete?: TOnAnimationChangeCallback<number, void>;\n  }) {\n    return animate({\n      startValue: this._currentCursorOpacity,\n      endValue: toValue,\n      duration,\n      delay,\n      onComplete,\n      abort: () =>\n        !this.canvas ||\n        // we do not want to animate a selection, only cursor\n        this.selectionStart !== this.selectionEnd,\n      onChange: (value) => {\n        this._currentCursorOpacity = value;\n        this.renderCursorOrSelection();\n      },\n    });\n  }\n\n  /**\n   * changes the cursor from visible to invisible\n   */\n  private _tick(delay?: number) {\n    this._currentTickState = this._animateCursor({\n      toValue: 0,\n      duration: this.cursorDuration / 2,\n      delay: Math.max(delay || 0, 100),\n      onComplete: this._onTickComplete,\n    });\n  }\n\n  /**\n   * Changes the cursor from invisible to visible\n   */\n  private _onTickComplete() {\n    this._currentTickCompleteState?.abort();\n    this._currentTickCompleteState = this._animateCursor({\n      toValue: 1,\n      duration: this.cursorDuration,\n      onComplete: this._tick,\n    });\n  }\n\n  /**\n   * Initializes delayed cursor\n   */\n  initDelayedCursor(restart?: boolean) {\n    this.abortCursorAnimation();\n    this._tick(restart ? 0 : this.cursorDelay);\n  }\n\n  /**\n   * Aborts cursor animation, clears all timeouts and clear textarea context if necessary\n   */\n  abortCursorAnimation() {\n    let shouldClear = false;\n    [this._currentTickState, this._currentTickCompleteState].forEach(\n      (cursorAnimation) => {\n        if (cursorAnimation && !cursorAnimation.isDone()) {\n          shouldClear = true;\n          cursorAnimation.abort();\n        }\n      },\n    );\n\n    this._currentCursorOpacity = 1;\n\n    //  make sure we clear context even if instance is not editing\n    if (shouldClear) {\n      this.clearContextTop();\n    }\n  }\n\n  /**\n   * Restart tue cursor animation if either is in complete state ( between animations )\n   * or if it never started before\n   */\n  restartCursorIfNeeded() {\n    if (\n      [this._currentTickState, this._currentTickCompleteState].some(\n        (cursorAnimation) => !cursorAnimation || cursorAnimation.isDone(),\n      )\n    ) {\n      this.initDelayedCursor();\n    }\n  }\n\n  /**\n   * Selects entire text\n   */\n  selectAll() {\n    this.selectionStart = 0;\n    this.selectionEnd = this._text.length;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Returns selected text\n   * @return {String}\n   */\n  getSelectedText(): string {\n    return this._text.slice(this.selectionStart, this.selectionEnd).join('');\n  }\n\n  /**\n   * Find new selection index representing start of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    // remove space before cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index--;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current word according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findWordBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    // remove space after cursor first\n    if (this._reSpace.test(this._text[index])) {\n      while (this._reSpace.test(this._text[index])) {\n        offset++;\n        index++;\n      }\n    }\n    while (/\\S/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Find new selection index representing start of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryLeft(startFrom: number): number {\n    let offset = 0,\n      index = startFrom - 1;\n\n    while (!/\\n/.test(this._text[index]) && index > -1) {\n      offset++;\n      index--;\n    }\n\n    return startFrom - offset;\n  }\n\n  /**\n   * Find new selection index representing end of current line according to current selection index\n   * @param {Number} startFrom Current selection index\n   * @return {Number} New selection index\n   */\n  findLineBoundaryRight(startFrom: number): number {\n    let offset = 0,\n      index = startFrom;\n\n    while (!/\\n/.test(this._text[index]) && index < this._text.length) {\n      offset++;\n      index++;\n    }\n\n    return startFrom + offset;\n  }\n\n  /**\n   * Finds index corresponding to beginning or end of a word\n   * @param {Number} selectionStart Index of a character\n   * @param {Number} direction 1 or -1\n   * @return {Number} Index of the beginning or end of a word\n   */\n  searchWordBoundary(selectionStart: number, direction: 1 | -1): number {\n    const text = this._text;\n    // if we land on a space we move the cursor backwards\n    // if we are searching boundary end we move the cursor backwards ONLY if we don't land on a line break\n    let index =\n        selectionStart > 0 &&\n        this._reSpace.test(text[selectionStart]) &&\n        (direction === -1 || !reNewline.test(text[selectionStart - 1]))\n          ? selectionStart - 1\n          : selectionStart,\n      _char = text[index];\n    while (index > 0 && index < text.length && !reNonWord.test(_char)) {\n      index += direction;\n      _char = text[index];\n    }\n    if (direction === -1 && reNonWord.test(_char)) {\n      index++;\n    }\n    return index;\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a word based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectWord(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    // search backwards\n    const newSelectionStart = this.searchWordBoundary(selectionStart, -1),\n      // search forward\n      newSelectionEnd = Math.max(\n        newSelectionStart,\n        this.searchWordBoundary(selectionStart, 1),\n      );\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * TODO fix: selectionStart set as 0 will be ignored?\n   * Selects a line based on the index\n   * @param {Number} selectionStart Index of a character\n   */\n  selectLine(selectionStart?: number) {\n    selectionStart = selectionStart || this.selectionStart;\n    const newSelectionStart = this.findLineBoundaryLeft(selectionStart),\n      newSelectionEnd = this.findLineBoundaryRight(selectionStart);\n\n    this.selectionStart = newSelectionStart;\n    this.selectionEnd = newSelectionEnd;\n    this._fireSelectionChanged();\n    this._updateTextarea();\n    return this;\n  }\n\n  /**\n   * Enters editing state\n   */\n  enterEditing(e?: TPointerEvent) {\n    if (this.isEditing || !this.editable) {\n      return;\n    }\n    this.enterEditingImpl();\n    this.fire('editing:entered', e ? { e } : undefined);\n    this._fireSelectionChanged();\n    if (this.canvas) {\n      this.canvas.fire('text:editing:entered', {\n        target: this as unknown as IText,\n        e,\n      });\n      this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * runs the actual logic that enter from editing state, see {@link enterEditing}\n   */\n  enterEditingImpl() {\n    if (this.canvas) {\n      this.canvas.calcOffset();\n      this.canvas.textEditingManager.exitTextEditing();\n    }\n\n    this.isEditing = true;\n\n    this.initHiddenTextarea();\n    this.hiddenTextarea!.focus();\n    this.hiddenTextarea!.value = this.text;\n    this._updateTextarea();\n    this._saveEditingProps();\n    this._setEditingProps();\n    this._textBeforeEdit = this.text;\n\n    this._tick();\n  }\n\n  /**\n   * called by {@link Canvas#textEditingManager}\n   */\n  updateSelectionOnMouseMove(e: TPointerEvent) {\n    if (this.getActiveControl()) {\n      return;\n    }\n\n    const el = this.hiddenTextarea!;\n    // regain focus\n    getDocumentFromElement(el).activeElement !== el && el.focus();\n\n    const newSelectionStart = this.getSelectionStartFromPointer(e),\n      currentStart = this.selectionStart,\n      currentEnd = this.selectionEnd;\n    if (\n      (newSelectionStart !== this.__selectionStartOnMouseDown ||\n        currentStart === currentEnd) &&\n      (currentStart === newSelectionStart || currentEnd === newSelectionStart)\n    ) {\n      return;\n    }\n    if (newSelectionStart > this.__selectionStartOnMouseDown) {\n      this.selectionStart = this.__selectionStartOnMouseDown;\n      this.selectionEnd = newSelectionStart;\n    } else {\n      this.selectionStart = newSelectionStart;\n      this.selectionEnd = this.__selectionStartOnMouseDown;\n    }\n    if (\n      this.selectionStart !== currentStart ||\n      this.selectionEnd !== currentEnd\n    ) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setEditingProps() {\n    this.hoverCursor = 'text';\n\n    if (this.canvas) {\n      this.canvas.defaultCursor = this.canvas.moveCursor = 'text';\n    }\n\n    this.borderColor = this.editingBorderColor;\n    this.hasControls = this.selectable = false;\n    this.lockMovementX = this.lockMovementY = true;\n  }\n\n  /**\n   * convert from textarea to grapheme indexes\n   */\n  fromStringToGraphemeSelection(start: number, end: number, text: string) {\n    const smallerTextStart = text.slice(0, start),\n      graphemeStart = this.graphemeSplit(smallerTextStart).length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = text.slice(start, end),\n      graphemeEnd = this.graphemeSplit(smallerTextEnd).length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * convert from fabric to textarea values\n   */\n  fromGraphemeToStringSelection(\n    start: number,\n    end: number,\n    graphemes: string[],\n  ) {\n    const smallerTextStart = graphemes.slice(0, start),\n      graphemeStart = smallerTextStart.join('').length;\n    if (start === end) {\n      return { selectionStart: graphemeStart, selectionEnd: graphemeStart };\n    }\n    const smallerTextEnd = graphemes.slice(start, end),\n      graphemeEnd = smallerTextEnd.join('').length;\n    return {\n      selectionStart: graphemeStart,\n      selectionEnd: graphemeStart + graphemeEnd,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _updateTextarea() {\n    this.cursorOffsetCache = {};\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    if (!this.inCompositionMode) {\n      const newSelection = this.fromGraphemeToStringSelection(\n        this.selectionStart,\n        this.selectionEnd,\n        this._text,\n      );\n      this.hiddenTextarea.selectionStart = newSelection.selectionStart;\n      this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateFromTextArea() {\n    if (!this.hiddenTextarea) {\n      return;\n    }\n    this.cursorOffsetCache = {};\n    const textarea = this.hiddenTextarea;\n    this.text = textarea.value;\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    const newSelection = this.fromStringToGraphemeSelection(\n      textarea.selectionStart,\n      textarea.selectionEnd,\n      textarea.value,\n    );\n    this.selectionEnd = this.selectionStart = newSelection.selectionEnd;\n    if (!this.inCompositionMode) {\n      this.selectionStart = newSelection.selectionStart;\n    }\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * @private\n   */\n  updateTextareaPosition() {\n    if (this.selectionStart === this.selectionEnd) {\n      const style = this._calcTextareaPosition();\n      this.hiddenTextarea!.style.left = style.left;\n      this.hiddenTextarea!.style.top = style.top;\n    }\n  }\n\n  /**\n   * @private\n   * @return {Object} style contains style for hiddenTextarea\n   */\n  _calcTextareaPosition() {\n    if (!this.canvas) {\n      return { left: '1px', top: '1px' };\n    }\n    const desiredPosition = this.inCompositionMode\n        ? this.compositionStart\n        : this.selectionStart,\n      boundaries = this._getCursorBoundaries(desiredPosition),\n      cursorLocation = this.get2DCursorLocation(desiredPosition),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex = cursorLocation.charIndex,\n      charHeight =\n        this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') *\n        this.lineHeight,\n      leftOffset = boundaries.leftOffset,\n      retinaScaling = this.getCanvasRetinaScaling(),\n      upperCanvas = this.canvas.upperCanvasEl,\n      upperCanvasWidth = upperCanvas.width / retinaScaling,\n      upperCanvasHeight = upperCanvas.height / retinaScaling,\n      maxWidth = upperCanvasWidth - charHeight,\n      maxHeight = upperCanvasHeight - charHeight;\n\n    const p = new Point(\n      boundaries.left + leftOffset,\n      boundaries.top + boundaries.topOffset + charHeight,\n    )\n      .transform(this.calcTransformMatrix())\n      .transform(this.canvas.viewportTransform)\n      .multiply(\n        new Point(\n          upperCanvas.clientWidth / upperCanvasWidth,\n          upperCanvas.clientHeight / upperCanvasHeight,\n        ),\n      );\n\n    if (p.x < 0) {\n      p.x = 0;\n    }\n    if (p.x > maxWidth) {\n      p.x = maxWidth;\n    }\n    if (p.y < 0) {\n      p.y = 0;\n    }\n    if (p.y > maxHeight) {\n      p.y = maxHeight;\n    }\n\n    // add canvas offset on document\n    p.x += this.canvas._offset.left;\n    p.y += this.canvas._offset.top;\n\n    return {\n      left: `${p.x}px`,\n      top: `${p.y}px`,\n      fontSize: `${charHeight}px`,\n      charHeight: charHeight,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _saveEditingProps() {\n    this._savedProps = {\n      hasControls: this.hasControls,\n      borderColor: this.borderColor,\n      lockMovementX: this.lockMovementX,\n      lockMovementY: this.lockMovementY,\n      hoverCursor: this.hoverCursor,\n      selectable: this.selectable,\n      defaultCursor: this.canvas && this.canvas.defaultCursor,\n      moveCursor: this.canvas && this.canvas.moveCursor,\n    };\n  }\n\n  /**\n   * @private\n   */\n  _restoreEditingProps() {\n    if (!this._savedProps) {\n      return;\n    }\n\n    this.hoverCursor = this._savedProps.hoverCursor;\n    this.hasControls = this._savedProps.hasControls;\n    this.borderColor = this._savedProps.borderColor;\n    this.selectable = this._savedProps.selectable;\n    this.lockMovementX = this._savedProps.lockMovementX;\n    this.lockMovementY = this._savedProps.lockMovementY;\n\n    if (this.canvas) {\n      this.canvas.defaultCursor =\n        this._savedProps.defaultCursor || this.canvas.defaultCursor;\n      this.canvas.moveCursor =\n        this._savedProps.moveCursor || this.canvas.moveCursor;\n    }\n\n    delete this._savedProps;\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * Please use exitEditingImpl, this function was kept to avoid breaking changes.\n   * Will be removed in fabric 7.0\n   * @deprecated use \"exitEditingImpl\"\n   */\n  protected _exitEditing() {\n    const hiddenTextarea = this.hiddenTextarea;\n    this.selected = false;\n    this.isEditing = false;\n\n    if (hiddenTextarea) {\n      hiddenTextarea.blur && hiddenTextarea.blur();\n      hiddenTextarea.parentNode &&\n        hiddenTextarea.parentNode.removeChild(hiddenTextarea);\n    }\n    this.hiddenTextarea = null;\n    this.abortCursorAnimation();\n    this.selectionStart !== this.selectionEnd && this.clearContextTop();\n  }\n\n  /**\n   * runs the actual logic that exits from editing state, see {@link exitEditing}\n   * But it does not fire events\n   */\n  exitEditingImpl() {\n    this._exitEditing();\n    this.selectionEnd = this.selectionStart;\n    this._restoreEditingProps();\n    if (this._forceClearCache) {\n      this.initDimensions();\n      this.setCoords();\n    }\n  }\n\n  /**\n   * Exits from editing state and fires relevant events\n   */\n  exitEditing() {\n    const isTextChanged = this._textBeforeEdit !== this.text;\n    this.exitEditingImpl();\n\n    this.fire('editing:exited');\n    isTextChanged && this.fire(MODIFIED);\n    if (this.canvas) {\n      this.canvas.fire('text:editing:exited', {\n        target: this as unknown as IText,\n      });\n      // todo: evaluate add an action to this event\n      isTextChanged && this.canvas.fire('object:modified', { target: this });\n    }\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _removeExtraneousStyles() {\n    for (const prop in this.styles) {\n      if (!this._textLines[prop as unknown as number]) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * remove and reflow a style block from start to end.\n   * @param {Number} start linear start position for removal (included in removal)\n   * @param {Number} end linear end position for removal ( excluded from removal )\n   */\n  removeStyleFromTo(start: number, end: number) {\n    const { lineIndex: lineStart, charIndex: charStart } =\n        this.get2DCursorLocation(start, true),\n      { lineIndex: lineEnd, charIndex: charEnd } = this.get2DCursorLocation(\n        end,\n        true,\n      );\n    if (lineStart !== lineEnd) {\n      // step1 remove the trailing of lineStart\n      if (this.styles[lineStart]) {\n        for (\n          let i = charStart;\n          i < this._unwrappedTextLines[lineStart].length;\n          i++\n        ) {\n          delete this.styles[lineStart][i];\n        }\n      }\n      // step2 move the trailing of lineEnd to lineStart if needed\n      if (this.styles[lineEnd]) {\n        for (\n          let i = charEnd;\n          i < this._unwrappedTextLines[lineEnd].length;\n          i++\n        ) {\n          const styleObj = this.styles[lineEnd][i];\n          if (styleObj) {\n            this.styles[lineStart] || (this.styles[lineStart] = {});\n            this.styles[lineStart][charStart + i - charEnd] = styleObj;\n          }\n        }\n      }\n      // step3 detects lines will be completely removed.\n      for (let i = lineStart + 1; i <= lineEnd; i++) {\n        delete this.styles[i];\n      }\n      // step4 shift remaining lines.\n      this.shiftLineStyles(lineEnd, lineStart - lineEnd);\n    } else {\n      // remove and shift left on the same line\n      if (this.styles[lineStart]) {\n        const styleObj = this.styles[lineStart];\n        const diff = charEnd - charStart;\n        for (let i = charStart; i < charEnd; i++) {\n          delete styleObj[i];\n        }\n        for (const char in this.styles[lineStart]) {\n          const numericChar = parseInt(char, 10);\n          if (numericChar >= charEnd) {\n            styleObj[numericChar - diff] = styleObj[char];\n            delete styleObj[char];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Shifts line styles up or down\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} offset Can any number?\n   */\n  shiftLineStyles(lineIndex: number, offset: number) {\n    const clonedStyles = Object.assign({}, this.styles);\n    for (const line in this.styles) {\n      const numericLine = parseInt(line, 10);\n      if (numericLine > lineIndex) {\n        this.styles[numericLine + offset] = clonedStyles[numericLine];\n        if (!clonedStyles[numericLine - offset]) {\n          delete this.styles[numericLine];\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle insertion of more consecutive style lines for when one or more\n   * newlines gets added to the text. Since current style needs to be shifted\n   * first we shift the current style of the number lines needed, then we add\n   * new lines from the last to the first.\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} qty number of lines to add\n   * @param {Array} copiedStyle Array of objects styles\n   */\n  insertNewlineStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    qty: number,\n    copiedStyle?: { [index: number]: TextStyleDeclaration },\n  ) {\n    const newLineStyles: { [index: number]: TextStyleDeclaration } = {};\n    const originalLineLength = this._unwrappedTextLines[lineIndex].length;\n    const isEndOfLine = originalLineLength === charIndex;\n\n    let someStyleIsCarryingOver = false;\n    qty || (qty = 1);\n    this.shiftLineStyles(lineIndex, qty);\n    const currentCharStyle = this.styles[lineIndex]\n      ? this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1]\n      : undefined;\n\n    // we clone styles of all chars\n    // after cursor onto the current line\n    for (const index in this.styles[lineIndex]) {\n      const numIndex = parseInt(index, 10);\n      if (numIndex >= charIndex) {\n        someStyleIsCarryingOver = true;\n        newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];\n        // remove lines from the previous line since they're on a new line now\n        if (!(isEndOfLine && charIndex === 0)) {\n          delete this.styles[lineIndex][index];\n        }\n      }\n    }\n    let styleCarriedOver = false;\n    if (someStyleIsCarryingOver && !isEndOfLine) {\n      // if is end of line, the extra style we copied\n      // is probably not something we want\n      this.styles[lineIndex + qty] = newLineStyles;\n      styleCarriedOver = true;\n    }\n    if (styleCarriedOver || originalLineLength > charIndex) {\n      // skip the last line of since we already prepared it.\n      // or contains text without style that we don't want to style\n      // just because it changed lines\n      qty--;\n    }\n    // for the all the lines or all the other lines\n    // we clone current char style onto the next (otherwise empty) line\n    while (qty > 0) {\n      if (copiedStyle && copiedStyle[qty - 1]) {\n        this.styles[lineIndex + qty] = {\n          0: { ...copiedStyle[qty - 1] },\n        };\n      } else if (currentCharStyle) {\n        this.styles[lineIndex + qty] = {\n          0: { ...currentCharStyle },\n        };\n      } else {\n        delete this.styles[lineIndex + qty];\n      }\n      qty--;\n    }\n    this._forceClearCache = true;\n  }\n\n  /**\n   * Inserts style object for a given line/char index\n   * @param {Number} lineIndex Index of a line\n   * @param {Number} charIndex Index of a char\n   * @param {Number} quantity number Style object to insert, if given\n   * @param {Array} copiedStyle array of style objects\n   */\n  insertCharStyleObject(\n    lineIndex: number,\n    charIndex: number,\n    quantity: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    if (!this.styles) {\n      this.styles = {};\n    }\n    const currentLineStyles = this.styles[lineIndex],\n      currentLineStylesCloned = currentLineStyles\n        ? { ...currentLineStyles }\n        : {};\n\n    quantity || (quantity = 1);\n    // shift all char styles by quantity forward\n    // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4\n    for (const index in currentLineStylesCloned) {\n      const numericIndex = parseInt(index, 10);\n      if (numericIndex >= charIndex) {\n        currentLineStyles[numericIndex + quantity] =\n          currentLineStylesCloned[numericIndex];\n        // only delete the style if there was nothing moved there\n        if (!currentLineStylesCloned[numericIndex - quantity]) {\n          delete currentLineStyles[numericIndex];\n        }\n      }\n    }\n    this._forceClearCache = true;\n    if (copiedStyle) {\n      while (quantity--) {\n        if (!Object.keys(copiedStyle[quantity]).length) {\n          continue;\n        }\n        if (!this.styles[lineIndex]) {\n          this.styles[lineIndex] = {};\n        }\n        this.styles[lineIndex][charIndex + quantity] = {\n          ...copiedStyle[quantity],\n        };\n      }\n      return;\n    }\n    if (!currentLineStyles) {\n      return;\n    }\n    const newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];\n    while (newStyle && quantity--) {\n      this.styles[lineIndex][charIndex + quantity] = { ...newStyle };\n    }\n  }\n\n  /**\n   * Inserts style object(s)\n   * @param {Array} insertedText Characters at the location where style is inserted\n   * @param {Number} start cursor index for inserting style\n   * @param {Array} [copiedStyle] array of style objects to insert.\n   */\n  insertNewStyleBlock(\n    insertedText: string[],\n    start: number,\n    copiedStyle?: TextStyleDeclaration[],\n  ) {\n    const cursorLoc = this.get2DCursorLocation(start, true),\n      addedLines = [0];\n    let linesLength = 0;\n    // get an array of how many char per lines are being added.\n    for (let i = 0; i < insertedText.length; i++) {\n      if (insertedText[i] === '\\n') {\n        linesLength++;\n        addedLines[linesLength] = 0;\n      } else {\n        addedLines[linesLength]++;\n      }\n    }\n    // for the first line copy the style from the current char position.\n    if (addedLines[0] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex,\n        addedLines[0],\n        copiedStyle,\n      );\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);\n    }\n    linesLength &&\n      this.insertNewlineStyleObject(\n        cursorLoc.lineIndex,\n        cursorLoc.charIndex + addedLines[0],\n        linesLength,\n      );\n    let i;\n    for (i = 1; i < linesLength; i++) {\n      if (addedLines[i] > 0) {\n        this.insertCharStyleObject(\n          cursorLoc.lineIndex + i,\n          0,\n          addedLines[i],\n          copiedStyle,\n        );\n      } else if (copiedStyle) {\n        // this test is required in order to close #6841\n        // when a pasted buffer begins with a newline then\n        // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]\n        // may be undefined for some reason\n        if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {\n          this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];\n        }\n      }\n      copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);\n    }\n    if (addedLines[i] > 0) {\n      this.insertCharStyleObject(\n        cursorLoc.lineIndex + i,\n        0,\n        addedLines[i],\n        copiedStyle,\n      );\n    }\n  }\n\n  /**\n   * Removes characters from start/end\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  removeChars(start: number, end: number = start + 1) {\n    this.removeStyleFromTo(start, end);\n    this._text.splice(start, end - start);\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * insert characters at start position, before start position.\n   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1\n   * if style array is provided, it must be as the same length of text in graphemes\n   * if end is provided and is bigger than start, old text is replaced.\n   * start/end ar per grapheme position in _text array.\n   *\n   * @param {String} text text to insert\n   * @param {Array} style array of style objects\n   * @param {Number} start\n   * @param {Number} end default to start + 1\n   */\n  insertChars(\n    text: string,\n    style: TextStyleDeclaration[] | undefined,\n    start: number,\n    end: number = start,\n  ) {\n    if (end > start) {\n      this.removeStyleFromTo(start, end);\n    }\n    const graphemes = this.graphemeSplit(text);\n    this.insertNewStyleBlock(graphemes, start, style);\n    this._text = [\n      ...this._text.slice(0, start),\n      ...graphemes,\n      ...this._text.slice(end),\n    ];\n    this.text = this._text.join('');\n    this.set('dirty', true);\n    this.initDimensions();\n    this.setCoords();\n    this._removeExtraneousStyles();\n  }\n\n  /**\n   * Set the selectionStart and selectionEnd according to the new position of cursor\n   * mimic the key - mouse navigation when shift is pressed.\n   */\n  setSelectionStartEndWithShift(\n    start: number,\n    end: number,\n    newSelection: number,\n  ) {\n    if (newSelection <= start) {\n      if (end === start) {\n        this._selectionDirection = LEFT;\n      } else if (this._selectionDirection === RIGHT) {\n        this._selectionDirection = LEFT;\n        this.selectionEnd = start;\n      }\n      this.selectionStart = newSelection;\n    } else if (newSelection > start && newSelection < end) {\n      if (this._selectionDirection === RIGHT) {\n        this.selectionEnd = newSelection;\n      } else {\n        this.selectionStart = newSelection;\n      }\n    } else {\n      // newSelection is > selection start and end\n      if (end === start) {\n        this._selectionDirection = RIGHT;\n      } else if (this._selectionDirection === LEFT) {\n        this._selectionDirection = RIGHT;\n        this.selectionStart = end;\n      }\n      this.selectionEnd = newSelection;\n    }\n  }\n}\n", "import { config } from '../../config';\nimport { getFabricDocument, getEnv } from '../../env';\nimport { capValue } from '../../util/misc/capValue';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextBehavior } from './ITextBehavior';\nimport type { TKeyMapIText } from './constants';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\nimport { getDocumentFromElement } from '../../util/dom_misc';\nimport { CHANGED, LEFT, RIGHT } from '../../constants';\nimport type { IText } from './IText';\nimport type { TextStyleDeclaration } from '../Text/StyledText';\n\nexport abstract class ITextKeyBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextBehavior<Props, SProps, EventSpec> {\n  /**\n   * For functionalities on keyDown\n   * Map a special key to a function of the instance/prototype\n   * If you need different behavior for ESC or TAB or arrows, you have to change\n   * this map setting the name of a function that you build on the IText or\n   * your prototype.\n   * the map change will affect all Instances unless you need for only some text Instances\n   * in that case you have to clone this object and assign your Instance.\n   * this.keysMap = Object.assign({}, this.keysMap);\n   * The function must be in IText.prototype.myFunction And will receive event as args[0]\n   */\n  declare keysMap: TKeyMapIText;\n\n  declare keysMapRtl: TKeyMapIText;\n\n  /**\n   * For functionalities on keyUp + ctrl || cmd\n   */\n  declare ctrlKeysMapUp: TKeyMapIText;\n\n  /**\n   * For functionalities on keyDown + ctrl || cmd\n   */\n  declare ctrlKeysMapDown: TKeyMapIText;\n\n  declare hiddenTextarea: HTMLTextAreaElement | null;\n\n  /**\n   * DOM container to append the hiddenTextarea.\n   * An alternative to attaching to the document.body.\n   * Useful to reduce laggish redraw of the full document.body tree and\n   * also with modals event capturing that won't let the textarea take focus.\n   * @type HTMLElement\n   * @default\n   */\n  declare hiddenTextareaContainer?: HTMLElement | null;\n\n  private declare _clickHandlerInitialized: boolean;\n  private declare _copyDone: boolean;\n  private declare fromPaste: boolean;\n\n  /**\n   * Initializes hidden textarea (needed to bring up keyboard in iOS)\n   */\n  initHiddenTextarea() {\n    const doc =\n      (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n      getFabricDocument();\n    const textarea = doc.createElement('textarea');\n    Object.entries({\n      autocapitalize: 'off',\n      autocorrect: 'off',\n      autocomplete: 'off',\n      spellcheck: 'false',\n      'data-fabric': 'textarea',\n      wrap: 'off',\n    }).map(([attribute, value]) => textarea.setAttribute(attribute, value));\n    const { top, left, fontSize } = this._calcTextareaPosition();\n    // line-height: 1px; was removed from the style to fix this:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966\n    textarea.style.cssText = `position: absolute; top: ${top}; left: ${left}; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding-top: ${fontSize};`;\n\n    (this.hiddenTextareaContainer || doc.body).appendChild(textarea);\n\n    Object.entries({\n      blur: 'blur',\n      keydown: 'onKeyDown',\n      keyup: 'onKeyUp',\n      input: 'onInput',\n      copy: 'copy',\n      cut: 'copy',\n      paste: 'paste',\n      compositionstart: 'onCompositionStart',\n      compositionupdate: 'onCompositionUpdate',\n      compositionend: 'onCompositionEnd',\n    } as Record<string, keyof this>).map(([eventName, handler]) =>\n      textarea.addEventListener(\n        eventName,\n        (this[handler] as EventListener).bind(this),\n      ),\n    );\n    this.hiddenTextarea = textarea;\n  }\n\n  /**\n   * Override this method to customize cursor behavior on textbox blur\n   */\n  blur() {\n    this.abortCursorAnimation();\n  }\n\n  /**\n   * Handles keydown event\n   * only used for arrows and combination of modifier keys.\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyDown(e: KeyboardEvent) {\n    if (!this.isEditing) {\n      return;\n    }\n    const keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;\n    if (e.keyCode in keyMap) {\n      // @ts-expect-error legacy method calling pattern\n      this[keyMap[e.keyCode]](e);\n    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {\n      // @ts-expect-error legacy method calling pattern\n      this[this.ctrlKeysMapDown[e.keyCode]](e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    if (e.keyCode >= 33 && e.keyCode <= 40) {\n      // if i press an arrow key just update selection\n      this.inCompositionMode = false;\n      this.clearContextTop();\n      this.renderCursorOrSelection();\n    } else {\n      this.canvas && this.canvas.requestRenderAll();\n    }\n  }\n\n  /**\n   * Handles keyup event\n   * We handle KeyUp because ie11 and edge have difficulties copy/pasting\n   * if a copy/cut event fired, keyup is dismissed\n   * @param {KeyboardEvent} e Event object\n   */\n  onKeyUp(e: KeyboardEvent) {\n    if (!this.isEditing || this._copyDone || this.inCompositionMode) {\n      this._copyDone = false;\n      return;\n    }\n    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {\n      // @ts-expect-error legacy method calling pattern\n      this[this.ctrlKeysMapUp[e.keyCode]](e);\n    } else {\n      return;\n    }\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.canvas && this.canvas.requestRenderAll();\n  }\n\n  /**\n   * Handles onInput event\n   * @param {Event} e Event object\n   */\n  onInput(this: this & { hiddenTextarea: HTMLTextAreaElement }, e: Event) {\n    const fromPaste = this.fromPaste;\n    this.fromPaste = false;\n    e && e.stopPropagation();\n    if (!this.isEditing) {\n      return;\n    }\n    const updateAndFire = () => {\n      this.updateFromTextArea();\n      this.fire(CHANGED);\n      if (this.canvas) {\n        this.canvas.fire('text:changed', { target: this as unknown as IText });\n        this.canvas.requestRenderAll();\n      }\n    };\n    if (this.hiddenTextarea.value === '') {\n      this.styles = {};\n      updateAndFire();\n      return;\n    }\n    // decisions about style changes.\n    const nextText = this._splitTextIntoLines(\n        this.hiddenTextarea.value,\n      ).graphemeText,\n      charCount = this._text.length,\n      nextCharCount = nextText.length,\n      selectionStart = this.selectionStart,\n      selectionEnd = this.selectionEnd,\n      selection = selectionStart !== selectionEnd;\n    let copiedStyle: TextStyleDeclaration[] | undefined,\n      removedText,\n      charDiff = nextCharCount - charCount,\n      removeFrom,\n      removeTo;\n\n    const textareaSelection = this.fromStringToGraphemeSelection(\n      this.hiddenTextarea.selectionStart,\n      this.hiddenTextarea.selectionEnd,\n      this.hiddenTextarea.value,\n    );\n    const backDelete = selectionStart > textareaSelection.selectionStart;\n\n    if (selection) {\n      removedText = this._text.slice(selectionStart, selectionEnd);\n      charDiff += selectionEnd - selectionStart;\n    } else if (nextCharCount < charCount) {\n      if (backDelete) {\n        removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);\n      } else {\n        removedText = this._text.slice(\n          selectionStart,\n          selectionStart - charDiff,\n        );\n      }\n    }\n    const insertedText = nextText.slice(\n      textareaSelection.selectionEnd - charDiff,\n      textareaSelection.selectionEnd,\n    );\n    if (removedText && removedText.length) {\n      if (insertedText.length) {\n        // let's copy some style before deleting.\n        // we want to copy the style before the cursor OR the style at the cursor if selection\n        // is bigger than 0.\n        copiedStyle = this.getSelectionStyles(\n          selectionStart,\n          selectionStart + 1,\n          false,\n        );\n        // now duplicate the style one for each inserted text.\n        copiedStyle = insertedText.map(\n          () =>\n            // this return an array of references, but that is fine since we are\n            // copying the style later.\n            copiedStyle![0],\n        );\n      }\n      if (selection) {\n        removeFrom = selectionStart;\n        removeTo = selectionEnd;\n      } else if (backDelete) {\n        // detect differences between forwardDelete and backDelete\n        removeFrom = selectionEnd - removedText.length;\n        removeTo = selectionEnd;\n      } else {\n        removeFrom = selectionEnd;\n        removeTo = selectionEnd + removedText.length;\n      }\n      this.removeStyleFromTo(removeFrom, removeTo);\n    }\n    if (insertedText.length) {\n      const { copyPasteData } = getEnv();\n      if (\n        fromPaste &&\n        insertedText.join('') === copyPasteData.copiedText &&\n        !config.disableStyleCopyPaste\n      ) {\n        copiedStyle = copyPasteData.copiedTextStyle;\n      }\n      this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);\n    }\n    updateAndFire();\n  }\n\n  /**\n   * Composition start\n   */\n  onCompositionStart() {\n    this.inCompositionMode = true;\n  }\n\n  /**\n   * Composition end\n   */\n  onCompositionEnd() {\n    this.inCompositionMode = false;\n  }\n\n  onCompositionUpdate({ target }: CompositionEvent) {\n    const { selectionStart, selectionEnd } = target as HTMLTextAreaElement;\n    this.compositionStart = selectionStart;\n    this.compositionEnd = selectionEnd;\n    this.updateTextareaPosition();\n  }\n\n  /**\n   * Copies selected text\n   */\n  copy() {\n    if (this.selectionStart === this.selectionEnd) {\n      //do not cut-copy if no selection\n      return;\n    }\n    const { copyPasteData } = getEnv();\n    copyPasteData.copiedText = this.getSelectedText();\n    if (!config.disableStyleCopyPaste) {\n      copyPasteData.copiedTextStyle = this.getSelectionStyles(\n        this.selectionStart,\n        this.selectionEnd,\n        true,\n      );\n    } else {\n      copyPasteData.copiedTextStyle = undefined;\n    }\n    this._copyDone = true;\n  }\n\n  /**\n   * Pastes text\n   */\n  paste() {\n    this.fromPaste = true;\n  }\n\n  /**\n   * Finds the width in pixels before the cursor on the same line\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {Number} widthBeforeCursor width before cursor\n   */\n  _getWidthBeforeCursor(lineIndex: number, charIndex: number): number {\n    let widthBeforeCursor = this._getLineLeftOffset(lineIndex),\n      bound;\n\n    if (charIndex > 0) {\n      bound = this.__charBounds[lineIndex][charIndex - 1];\n      widthBeforeCursor += bound.left + bound.width;\n    }\n    return widthBeforeCursor;\n  }\n\n  /**\n   * Gets start offset of a selection\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getDownCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    // if on last line, down cursor goes to end of line\n    if (\n      lineIndex === this._textLines.length - 1 ||\n      e.metaKey ||\n      e.keyCode === 34\n    ) {\n      // move to the end of a text\n      return this._text.length - selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),\n      textAfterCursor = this._textLines[lineIndex].slice(charIndex);\n    return (\n      textAfterCursor.length +\n      indexOnOtherLine +\n      1 +\n      this.missingNewlineOffset(lineIndex)\n    );\n  }\n\n  /**\n   * private\n   * Helps finding if the offset should be counted from Start or End\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  _getSelectionForOffset(e: KeyboardEvent, isRight: boolean): number {\n    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {\n      return this.selectionEnd;\n    } else {\n      return this.selectionStart;\n    }\n  }\n\n  /**\n   * @param {KeyboardEvent} e Event object\n   * @param {Boolean} isRight\n   * @return {Number}\n   */\n  getUpCursorOffset(e: KeyboardEvent, isRight: boolean): number {\n    const selectionProp = this._getSelectionForOffset(e, isRight),\n      cursorLocation = this.get2DCursorLocation(selectionProp),\n      lineIndex = cursorLocation.lineIndex;\n    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {\n      // if on first line, up cursor goes to start of line\n      return -selectionProp;\n    }\n    const charIndex = cursorLocation.charIndex,\n      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),\n      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),\n      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),\n      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);\n    // return a negative offset\n    return (\n      -this._textLines[lineIndex - 1].length +\n      indexOnOtherLine -\n      textBeforeCursor.length +\n      (1 - missingNewlineOffset)\n    );\n  }\n\n  /**\n   * for a given width it founds the matching character.\n   * @private\n   */\n  _getIndexOnLine(lineIndex: number, width: number) {\n    const line = this._textLines[lineIndex],\n      lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    let widthOfCharsOnLine = lineLeftOffset,\n      indexOnLine = 0,\n      charWidth,\n      foundMatch;\n\n    for (let j = 0, jlen = line.length; j < jlen; j++) {\n      charWidth = this.__charBounds[lineIndex][j].width;\n      widthOfCharsOnLine += charWidth;\n      if (widthOfCharsOnLine > width) {\n        foundMatch = true;\n        const leftEdge = widthOfCharsOnLine - charWidth,\n          rightEdge = widthOfCharsOnLine,\n          offsetFromLeftEdge = Math.abs(leftEdge - width),\n          offsetFromRightEdge = Math.abs(rightEdge - width);\n\n        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;\n        break;\n      }\n    }\n\n    // reached end\n    if (!foundMatch) {\n      indexOnLine = line.length - 1;\n    }\n\n    return indexOnLine;\n  }\n\n  /**\n   * Moves cursor down\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorDown(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorUpOrDown('Down', e);\n  }\n\n  /**\n   * Moves cursor up\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorUp(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorUpOrDown('Up', e);\n  }\n\n  /**\n   * Moves cursor up or down, fires the events\n   * @param {String} direction 'Up' or 'Down'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorUpOrDown(direction: 'Up' | 'Down', e: KeyboardEvent) {\n    const offset = this[`get${direction}CursorOffset`](\n      e,\n      this._selectionDirection === RIGHT,\n    );\n    if (e.shiftKey) {\n      this.moveCursorWithShift(offset);\n    } else {\n      this.moveCursorWithoutShift(offset);\n    }\n    if (offset !== 0) {\n      const max = this.text.length;\n      this.selectionStart = capValue(0, this.selectionStart, max);\n      this.selectionEnd = capValue(0, this.selectionEnd, max);\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor with shift\n   * @param {Number} offset\n   */\n  moveCursorWithShift(offset: number) {\n    const newSelection =\n      this._selectionDirection === LEFT\n        ? this.selectionStart + offset\n        : this.selectionEnd + offset;\n    this.setSelectionStartEndWithShift(\n      this.selectionStart,\n      this.selectionEnd,\n      newSelection,\n    );\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor up without shift\n   * @param {Number} offset\n   */\n  moveCursorWithoutShift(offset: number) {\n    if (offset < 0) {\n      this.selectionStart += offset;\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionEnd += offset;\n      this.selectionStart = this.selectionEnd;\n    }\n    return offset !== 0;\n  }\n\n  /**\n   * Moves cursor left\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorLeft(e: KeyboardEvent) {\n    if (this.selectionStart === 0 && this.selectionEnd === 0) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Left', e);\n  }\n\n  /**\n   * @private\n   * @return {Boolean} true if a change happened\n   *\n   * @todo refactor not to use method name composition\n   */\n  _move(\n    e: KeyboardEvent,\n    prop: 'selectionStart' | 'selectionEnd',\n    direction: 'Left' | 'Right',\n  ): boolean {\n    let newValue: number | undefined;\n    if (e.altKey) {\n      newValue = this[`findWordBoundary${direction}`](this[prop]);\n    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {\n      newValue = this[`findLineBoundary${direction}`](this[prop]);\n    } else {\n      this[prop] += direction === 'Left' ? -1 : 1;\n      return true;\n    }\n    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {\n      this[prop] = newValue;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @private\n   */\n  _moveLeft(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Left');\n  }\n\n  /**\n   * @private\n   */\n  _moveRight(e: KeyboardEvent, prop: 'selectionStart' | 'selectionEnd') {\n    return this._move(e, prop, 'Right');\n  }\n\n  /**\n   * Moves cursor left without keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithoutShift(e: KeyboardEvent) {\n    let change = true;\n    this._selectionDirection = LEFT;\n\n    // only move cursor when there is no selection,\n    // otherwise we discard it, and leave cursor on same place\n    if (\n      this.selectionEnd === this.selectionStart &&\n      this.selectionStart !== 0\n    ) {\n      change = this._moveLeft(e, 'selectionStart');\n    }\n    this.selectionEnd = this.selectionStart;\n    return change;\n  }\n\n  /**\n   * Moves cursor left while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorLeftWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === RIGHT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveLeft(e, 'selectionEnd');\n    } else if (this.selectionStart !== 0) {\n      this._selectionDirection = LEFT;\n      return this._moveLeft(e, 'selectionStart');\n    }\n  }\n\n  /**\n   * Moves cursor right\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRight(e: KeyboardEvent) {\n    if (\n      this.selectionStart >= this._text.length &&\n      this.selectionEnd >= this._text.length\n    ) {\n      return;\n    }\n    this._moveCursorLeftOrRight('Right', e);\n  }\n\n  /**\n   * Moves cursor right or Left, fires event\n   * @param {String} direction 'Left', 'Right'\n   * @param {KeyboardEvent} e Event object\n   */\n  _moveCursorLeftOrRight(direction: 'Left' | 'Right', e: KeyboardEvent) {\n    const actionName = `moveCursor${direction}${\n      e.shiftKey ? 'WithShift' : 'WithoutShift'\n    }` as const;\n    this._currentCursorOpacity = 1;\n    if (this[actionName](e)) {\n      // TODO fix: abort and init should be an alternative depending\n      // on selectionStart/End being equal or different\n      this.abortCursorAnimation();\n      this.initDelayedCursor();\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Moves cursor right while keeping selection\n   * @param {KeyboardEvent} e\n   */\n  moveCursorRightWithShift(e: KeyboardEvent) {\n    if (\n      this._selectionDirection === LEFT &&\n      this.selectionStart !== this.selectionEnd\n    ) {\n      return this._moveRight(e, 'selectionStart');\n    } else if (this.selectionEnd !== this._text.length) {\n      this._selectionDirection = RIGHT;\n      return this._moveRight(e, 'selectionEnd');\n    }\n  }\n\n  /**\n   * Moves cursor right without keeping selection\n   * @param {KeyboardEvent} e Event object\n   */\n  moveCursorRightWithoutShift(e: KeyboardEvent) {\n    let changed = true;\n    this._selectionDirection = RIGHT;\n\n    if (this.selectionStart === this.selectionEnd) {\n      changed = this._moveRight(e, 'selectionStart');\n      this.selectionEnd = this.selectionStart;\n    } else {\n      this.selectionStart = this.selectionEnd;\n    }\n    return changed;\n  }\n}\n", "import type { TPointerEvent, TPointerEventInfo } from '../../EventTypeDefs';\nimport type { XY } from '../../Point';\nimport { Point } from '../../Point';\nimport { stopEvent } from '../../util/dom_event';\nimport { invertTransform } from '../../util/misc/matrix';\nimport { DraggableTextDelegate } from './DraggableTextDelegate';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextKeyBehavior } from './ITextKeyBehavior';\nimport type { TOptions } from '../../typedefs';\nimport type { TextProps, SerializedTextProps } from '../Text/Text';\n\n/**\n * `LEFT_CLICK === 0`\n */\nconst notALeftClick = (e: Event) => !!(e as MouseEvent).button;\n\nexport abstract class ITextClickBehavior<\n  Props extends TOptions<TextProps> = Partial<TextProps>,\n  SProps extends SerializedTextProps = SerializedTextProps,\n  EventSpec extends ITextEvents = ITextEvents,\n> extends ITextKeyBehavior<Props, SProps, EventSpec> {\n  private declare __lastSelected: boolean;\n  private declare __lastClickTime: number;\n  private declare __lastLastClickTime: number;\n  private declare __lastPointer: XY | Record<string, never>;\n  private declare __newClickTime: number;\n\n  protected draggableTextDelegate: DraggableTextDelegate;\n\n  initBehavior() {\n    // Initializes event handlers related to cursor or selection\n    this.on('mousedown', this._mouseDownHandler);\n    this.on('mousedown:before', this._mouseDownHandlerBefore);\n    this.on('mouseup', this.mouseUpHandler);\n    this.on('mousedblclick', this.doubleClickHandler);\n    this.on('tripleclick', this.tripleClickHandler);\n\n    // Initializes \"dbclick\" event handler\n    this.__lastClickTime = +new Date();\n    // for triple click\n    this.__lastLastClickTime = +new Date();\n    this.__lastPointer = {};\n    this.on('mousedown', this.onMouseDown);\n\n    // @ts-expect-error in reality it is an IText instance\n    this.draggableTextDelegate = new DraggableTextDelegate(this);\n\n    super.initBehavior();\n  }\n\n  /**\n   * If this method returns true a mouse move operation over a text selection\n   * will not prevent the native mouse event allowing the browser to start a drag operation.\n   * shouldStartDragging can be read 'do not prevent default for mouse move event'\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns\n   */\n  shouldStartDragging() {\n    return this.draggableTextDelegate.isActive();\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drag source,\n   * @see also {@link DraggableTextDelegate#isActive}\n   * To prevent drag and drop between objects both shouldStartDragging and onDragStart should return false\n   * @returns {boolean} should handle event\n   */\n  onDragStart(e: DragEvent) {\n    return this.draggableTextDelegate.onDragStart(e);\n  }\n\n  /**\n   * @public override this method to control whether instance should/shouldn't become a drop target\n   */\n  canDrop(e: DragEvent) {\n    return this.draggableTextDelegate.canDrop(e);\n  }\n\n  /**\n   * Default event handler to simulate triple click\n   * @private\n   */\n  onMouseDown(options: TPointerEventInfo) {\n    if (!this.canvas) {\n      return;\n    }\n    this.__newClickTime = +new Date();\n    const newPointer = options.pointer;\n    if (this.isTripleClick(newPointer)) {\n      this.fire('tripleclick', options);\n      stopEvent(options.e);\n    }\n    this.__lastLastClickTime = this.__lastClickTime;\n    this.__lastClickTime = this.__newClickTime;\n    this.__lastPointer = newPointer;\n    this.__lastSelected = this.selected && !this.getActiveControl();\n  }\n\n  isTripleClick(newPointer: XY) {\n    return (\n      this.__newClickTime - this.__lastClickTime < 500 &&\n      this.__lastClickTime - this.__lastLastClickTime < 500 &&\n      this.__lastPointer.x === newPointer.x &&\n      this.__lastPointer.y === newPointer.y\n    );\n  }\n\n  /**\n   * Default handler for double click, select a word\n   */\n  doubleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectWord(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default handler for triple click, select a line\n   */\n  tripleClickHandler(options: TPointerEventInfo) {\n    if (!this.isEditing) {\n      return;\n    }\n    this.selectLine(this.getSelectionStartFromPointer(options.e));\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on _mouseDown\n   * can be overridden to do something different.\n   * Scope of this implementation is: find the click position, set selectionStart\n   * find selectionEnd, initialize the drawing of either cursor or selection area\n   * initializing a mousedDown on a text area will cancel fabricjs knowledge of\n   * current compositionMode. It will be set to false.\n   */\n  _mouseDownHandler({ e }: TPointerEventInfo) {\n    if (\n      !this.canvas ||\n      !this.editable ||\n      notALeftClick(e) ||\n      this.getActiveControl()\n    ) {\n      return;\n    }\n\n    if (this.draggableTextDelegate.start(e)) {\n      return;\n    }\n\n    this.canvas.textEditingManager.register(this);\n\n    if (this.selected) {\n      this.inCompositionMode = false;\n      this.setCursorByClick(e);\n    }\n\n    if (this.isEditing) {\n      this.__selectionStartOnMouseDown = this.selectionStart;\n      if (this.selectionStart === this.selectionEnd) {\n        this.abortCursorAnimation();\n      }\n      this.renderCursorOrSelection();\n    }\n  }\n\n  /**\n   * Default event handler for the basic functionalities needed on mousedown:before\n   * can be overridden to do something different.\n   * Scope of this implementation is: verify the object is already selected when mousing down\n   */\n  _mouseDownHandlerBefore({ e }: TPointerEventInfo) {\n    if (!this.canvas || !this.editable || notALeftClick(e)) {\n      return;\n    }\n    // we want to avoid that an object that was selected and then becomes unselectable,\n    // may trigger editing mode in some way.\n    this.selected = this === this.canvas._activeObject;\n  }\n\n  /**\n   * standard handler for mouse up, overridable\n   * @private\n   */\n  mouseUpHandler({ e, transform }: TPointerEventInfo) {\n    const didDrag = this.draggableTextDelegate.end(e);\n    if (this.canvas) {\n      this.canvas.textEditingManager.unregister(this);\n\n      const activeObject = this.canvas._activeObject;\n      if (activeObject && activeObject !== this) {\n        // avoid running this logic when there is an active object\n        // this because is possible with shift click and fast clicks,\n        // to rapidly deselect and reselect this object and trigger an enterEdit\n        return;\n      }\n    }\n    if (\n      !this.editable ||\n      (this.group && !this.group.interactive) ||\n      (transform && transform.actionPerformed) ||\n      notALeftClick(e) ||\n      didDrag\n    ) {\n      return;\n    }\n\n    if (this.__lastSelected && !this.getActiveControl()) {\n      this.selected = false;\n      this.__lastSelected = false;\n      this.enterEditing(e);\n      if (this.selectionStart === this.selectionEnd) {\n        this.initDelayedCursor(true);\n      } else {\n        this.renderCursorOrSelection();\n      }\n    } else {\n      this.selected = true;\n    }\n  }\n\n  /**\n   * Changes cursor location in a text depending on passed pointer (x/y) object\n   * @param {TPointerEvent} e Event object\n   */\n  setCursorByClick(e: TPointerEvent) {\n    const newSelection = this.getSelectionStartFromPointer(e),\n      start = this.selectionStart,\n      end = this.selectionEnd;\n    if (e.shiftKey) {\n      this.setSelectionStartEndWithShift(start, end, newSelection);\n    } else {\n      this.selectionStart = newSelection;\n      this.selectionEnd = newSelection;\n    }\n    if (this.isEditing) {\n      this._fireSelectionChanged();\n      this._updateTextarea();\n    }\n  }\n\n  /**\n   * Returns index of a character corresponding to where an object was clicked\n   * @param {TPointerEvent} e Event object\n   * @return {Number} Index of a character\n   */\n  getSelectionStartFromPointer(e: TPointerEvent): number {\n    const mouseOffset = this.canvas!.getScenePoint(e)\n      .transform(invertTransform(this.calcTransformMatrix()))\n      .add(new Point(-this._getLeftOffset(), -this._getTopOffset()));\n    let height = 0,\n      charIndex = 0,\n      lineIndex = 0;\n\n    for (let i = 0; i < this._textLines.length; i++) {\n      if (height <= mouseOffset.y) {\n        height += this.getHeightOfLine(i);\n        lineIndex = i;\n        if (i > 0) {\n          charIndex +=\n            this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);\n        }\n      } else {\n        break;\n      }\n    }\n    const lineLeftOffset = Math.abs(this._getLineLeftOffset(lineIndex));\n    let width = lineLeftOffset;\n    const charLength = this._textLines[lineIndex].length;\n    const chars = this.__charBounds[lineIndex];\n    for (let j = 0; j < charLength; j++) {\n      // i removed something about flipX here, check.\n      const charWidth = chars[j].kernedWidth;\n      const widthAfter = width + charWidth;\n      if (mouseOffset.x <= widthAfter) {\n        // if the pointer is closer to the end of the char we increment charIndex\n        // in order to position the cursor after the char\n        if (\n          Math.abs(mouseOffset.x - widthAfter) <=\n          Math.abs(mouseOffset.x - width)\n        ) {\n          charIndex++;\n        }\n        break;\n      }\n      width = widthAfter;\n      charIndex++;\n    }\n\n    return Math.min(\n      // if object is horizontally flipped, mirror cursor location from the end\n      this.flipX ? charLength - charIndex : charIndex,\n      this._text.length,\n    );\n  }\n}\n", "export type TKeyMapIText = Record<\n  KeyboardEvent['keyCode'],\n  CursorHandlingMethods\n>;\n\nexport type CursorHandlingMethods =\n  | 'moveCursorUp'\n  | 'moveCursorDown'\n  | 'moveCursorLeft'\n  | 'moveCursorRight'\n  | 'exitEditing'\n  | 'copy'\n  | 'cut'\n  | 'selectAll';\n\nconst MOVE_CURSOR_UP: CursorHandlingMethods = 'moveCursorUp';\nconst MOVE_CURSOR_DOWN: CursorHandlingMethods = 'moveCursorDown';\nconst MOVE_CURSOR_LEFT: CursorHandlingMethods = 'moveCursorLeft';\nconst MOVE_CURSOR_RIGHT: CursorHandlingMethods = 'moveCursorRight';\nconst EXIT_EDITING: CursorHandlingMethods = 'exitEditing';\n\n// @TODO look into import { Key } from 'ts-key-enum';\n// and transition from keyCode to Key\n// also reduce string duplication\nexport const keysMap: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_RIGHT,\n  36: MOVE_CURSOR_LEFT,\n  37: MOVE_CURSOR_LEFT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_RIGHT,\n  40: MOVE_CURSOR_DOWN,\n};\n\nexport const keysMapRtl: TKeyMapIText = {\n  9: EXIT_EDITING,\n  27: EXIT_EDITING,\n  33: MOVE_CURSOR_UP,\n  34: MOVE_CURSOR_DOWN,\n  35: MOVE_CURSOR_LEFT,\n  36: MOVE_CURSOR_RIGHT,\n  37: MOVE_CURSOR_RIGHT,\n  38: MOVE_CURSOR_UP,\n  39: MOVE_CURSOR_LEFT,\n  40: MOVE_CURSOR_DOWN,\n};\n\n/**\n * For functionalities on keyUp + ctrl || cmd\n */\nexport const ctrlKeysMapUp: TKeyMapIText = {\n  67: 'copy',\n  // there was a reason this wasn't deleted. for now leave it here\n  88: 'cut',\n};\n\n/**\n * For functionalities on keyDown + ctrl || cmd\n */\nexport const ctrlKeysMapDown: TKeyMapIText = {\n  65: 'selectAll',\n};\n", "import { Canvas } from '../../canvas/Canvas';\nimport type { ITextEvents } from './ITextBehavior';\nimport { ITextClickBehavior } from './ITextClickBehavior';\nimport {\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  keysMap,\n  keysMapRtl,\n} from './constants';\nimport type { TClassProperties, TFiller, TOptions } from '../../typedefs';\nimport { classRegistry } from '../../ClassRegistry';\nimport type { SerializedTextProps, TextProps } from '../Text/Text';\nimport {\n  JUSTIFY,\n  JUSTIFY_CENTER,\n  JUSTIFY_LEFT,\n  JUSTIFY_RIGHT,\n} from '../Text/constants';\nimport { CENTER, FILL, LEFT, RIGHT } from '../../constants';\nimport type { ObjectToCanvasElementOptions } from '../Object/Object';\n\nexport type CursorBoundaries = {\n  left: number;\n  top: number;\n  leftOffset: number;\n  topOffset: number;\n};\n\nexport type CursorRenderingData = {\n  color: string;\n  opacity: number;\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\n// Declare IText protected properties to workaround TS\nconst protectedDefaultValues = {\n  _selectionDirection: null,\n  _reSpace: /\\s|\\r?\\n/,\n  inCompositionMode: false,\n};\n\nexport const iTextDefaultValues: Partial<TClassProperties<IText>> = {\n  selectionStart: 0,\n  selectionEnd: 0,\n  selectionColor: 'rgba(17,119,255,0.3)',\n  isEditing: false,\n  editable: true,\n  editingBorderColor: 'rgba(102,153,255,0.25)',\n  cursorWidth: 2,\n  cursorColor: '',\n  cursorDelay: 1000,\n  cursorDuration: 600,\n  caching: true,\n  hiddenTextareaContainer: null,\n  keysMap,\n  keysMapRtl,\n  ctrlKeysMapDown,\n  ctrlKeysMapUp,\n  ...protectedDefaultValues,\n};\n\n// @TODO this is not complete\ninterface UniqueITextProps {\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface SerializedITextProps\n  extends SerializedTextProps,\n    UniqueITextProps {}\n\nexport interface ITextProps extends TextProps, UniqueITextProps {}\n\n/**\n * @fires changed\n * @fires selection:changed\n * @fires editing:entered\n * @fires editing:exited\n * @fires dragstart\n * @fires drag drag event firing on the drag source\n * @fires dragend\n * @fires copy\n * @fires cut\n * @fires paste\n *\n * #### Supported key combinations\n * ```\n *   Move cursor:                    left, right, up, down\n *   Select character:               shift + left, shift + right\n *   Select text vertically:         shift + up, shift + down\n *   Move cursor by word:            alt + left, alt + right\n *   Select words:                   shift + alt + left, shift + alt + right\n *   Move cursor to line start/end:  cmd + left, cmd + right or home, end\n *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end\n *   Jump to start/end of text:      cmd + up, cmd + down\n *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown\n *   Delete character:               backspace\n *   Delete word:                    alt + backspace\n *   Delete line:                    cmd + backspace\n *   Forward delete:                 delete\n *   Copy text:                      ctrl/cmd + c\n *   Paste text:                     ctrl/cmd + v\n *   Cut text:                       ctrl/cmd + x\n *   Select entire text:             ctrl/cmd + a\n *   Quit editing                    tab or esc\n * ```\n *\n * #### Supported mouse/touch combination\n * ```\n *   Position cursor:                click/touch\n *   Create selection:               click/touch & drag\n *   Create selection:               click & shift + click\n *   Select word:                    double click\n *   Select line:                    triple click\n * ```\n */\nexport class IText<\n    Props extends TOptions<ITextProps> = Partial<ITextProps>,\n    SProps extends SerializedITextProps = SerializedITextProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends ITextClickBehavior<Props, SProps, EventSpec>\n  implements UniqueITextProps\n{\n  /**\n   * Index where text selection starts (or where cursor is when there is no selection)\n   * @type Number\n   * @default\n   */\n  declare selectionStart: number;\n\n  /**\n   * Index where text selection ends\n   * @type Number\n   * @default\n   */\n  declare selectionEnd: number;\n\n  declare compositionStart: number;\n\n  declare compositionEnd: number;\n\n  /**\n   * Color of text selection\n   * @type String\n   * @default\n   */\n  declare selectionColor: string;\n\n  /**\n   * Indicates whether text is in editing mode\n   * @type Boolean\n   * @default\n   */\n  declare isEditing: boolean;\n\n  /**\n   * Indicates whether a text can be edited\n   * @type Boolean\n   * @default\n   */\n  declare editable: boolean;\n\n  /**\n   * Border color of text object while it's in editing mode\n   * @type String\n   * @default\n   */\n  declare editingBorderColor: string;\n\n  /**\n   * Width of cursor (in px)\n   * @type Number\n   * @default\n   */\n  declare cursorWidth: number;\n\n  /**\n   * Color of text cursor color in editing mode.\n   * if not set (default) will take color from the text.\n   * if set to a color value that fabric can understand, it will\n   * be used instead of the color of the text at the current position.\n   * @type String\n   * @default\n   */\n  declare cursorColor: string;\n\n  /**\n   * Delay between cursor blink (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDelay: number;\n\n  /**\n   * Duration of cursor fade in (in ms)\n   * @type Number\n   * @default\n   */\n  declare cursorDuration: number;\n\n  declare compositionColor: string;\n\n  /**\n   * Indicates whether internal text char widths can be cached\n   * @type Boolean\n   * @default\n   */\n  declare caching: boolean;\n\n  static ownDefaults = iTextDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...IText.ownDefaults };\n  }\n\n  static type = 'IText';\n\n  get type() {\n    const type = super.type;\n    // backward compatibility\n    return type === 'itext' ? 'i-text' : type;\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...IText.ownDefaults, ...options } as Props);\n    this.initBehavior();\n  }\n\n  /**\n   * While editing handle differently\n   * @private\n   * @param {string} key\n   * @param {*} value\n   */\n  _set(key: string, value: any) {\n    if (this.isEditing && this._savedProps && key in this._savedProps) {\n      // @ts-expect-error irritating TS\n      this._savedProps[key] = value;\n      return this;\n    }\n    if (key === 'canvas') {\n      this.canvas instanceof Canvas &&\n        this.canvas.textEditingManager.remove(this);\n      value instanceof Canvas && value.textEditingManager.add(this);\n    }\n    return super._set(key, value);\n  }\n\n  /**\n   * Sets selection start (left boundary of a selection)\n   * @param {Number} index Index to set selection start to\n   */\n  setSelectionStart(index: number) {\n    index = Math.max(index, 0);\n    this._updateAndFire('selectionStart', index);\n  }\n\n  /**\n   * Sets selection end (right boundary of a selection)\n   * @param {Number} index Index to set selection end to\n   */\n  setSelectionEnd(index: number) {\n    index = Math.min(index, this.text.length);\n    this._updateAndFire('selectionEnd', index);\n  }\n\n  /**\n   * @private\n   * @param {String} property 'selectionStart' or 'selectionEnd'\n   * @param {Number} index new position of property\n   */\n  protected _updateAndFire(\n    property: 'selectionStart' | 'selectionEnd',\n    index: number,\n  ) {\n    if (this[property] !== index) {\n      this._fireSelectionChanged();\n      this[property] = index;\n    }\n    this._updateTextarea();\n  }\n\n  /**\n   * Fires the even of selection changed\n   * @private\n   */\n  _fireSelectionChanged() {\n    this.fire('selection:changed');\n    this.canvas && this.canvas.fire('text:selection:changed', { target: this });\n  }\n\n  /**\n   * Initialize text dimensions. Render all text on given context\n   * or on a offscreen canvas to get the text width with measureText.\n   * Updates this.width and this.height with the proper values.\n   * Does not return dimensions.\n   * @private\n   */\n  initDimensions() {\n    this.isEditing && this.initDelayedCursor();\n    super.initDimensions();\n  }\n\n  /**\n   * Gets style of a current selection/cursor (at the start position)\n   * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n   * @param {Number} startIndex Start index to get styles at\n   * @param {Number} endIndex End index to get styles at, if not specified selectionEnd or startIndex + 1\n   * @param {Boolean} [complete] get full style or not\n   * @return {Array} styles an array with one, zero or more Style objects\n   */\n  getSelectionStyles(\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n    complete?: boolean,\n  ) {\n    return super.getSelectionStyles(startIndex, endIndex, complete);\n  }\n\n  /**\n   * Sets style of a current selection, if no selection exist, do not set anything.\n   * @param {Object} [styles] Styles object\n   * @param {Number} [startIndex] Start index to get styles at\n   * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n   */\n  setSelectionStyles(\n    styles: object,\n    startIndex: number = this.selectionStart || 0,\n    endIndex: number = this.selectionEnd,\n  ) {\n    return super.setSelectionStyles(styles, startIndex, endIndex);\n  }\n\n  /**\n   * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n   * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n   * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n   */\n  get2DCursorLocation(\n    selectionStart = this.selectionStart,\n    skipWrapping?: boolean,\n  ) {\n    return super.get2DCursorLocation(selectionStart, skipWrapping);\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  render(ctx: CanvasRenderingContext2D) {\n    super.render(ctx);\n    // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor\n    // the correct position but not at every cursor animation.\n    this.cursorOffsetCache = {};\n    this.renderCursorOrSelection();\n  }\n\n  /**\n   * @override block cursor/selection logic while rendering the exported canvas\n   * @todo this workaround should be replaced with a more robust solution\n   */\n  toCanvasElement(options?: ObjectToCanvasElementOptions): HTMLCanvasElement {\n    const isEditing = this.isEditing;\n    this.isEditing = false;\n    const canvas = super.toCanvasElement(options);\n    this.isEditing = isEditing;\n    return canvas;\n  }\n\n  /**\n   * Renders cursor or selection (depending on what exists)\n   * it does on the contextTop. If contextTop is not available, do nothing.\n   */\n  renderCursorOrSelection() {\n    if (!this.isEditing) {\n      return;\n    }\n    const ctx = this.clearContextTop(true);\n    if (!ctx) {\n      return;\n    }\n    const boundaries = this._getCursorBoundaries();\n    if (this.selectionStart === this.selectionEnd && !this.inCompositionMode) {\n      this.renderCursor(ctx, boundaries);\n    } else {\n      this.renderSelection(ctx, boundaries);\n    }\n    this.canvas!.contextTopDirty = true;\n    ctx.restore();\n  }\n\n  /**\n   * Returns cursor boundaries (left, top, leftOffset, topOffset)\n   * left/top are left/top of entire text box\n   * leftOffset/topOffset are offset from that left/top point of a text box\n   * @private\n   * @param {number} [index] index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundaries(\n    index: number = this.selectionStart,\n    skipCaching?: boolean,\n  ): CursorBoundaries {\n    const left = this._getLeftOffset(),\n      top = this._getTopOffset(),\n      offsets = this._getCursorBoundariesOffsets(index, skipCaching);\n    return {\n      left: left,\n      top: top,\n      leftOffset: offsets.left,\n      topOffset: offsets.top,\n    };\n  }\n\n  /**\n   * Caches and returns cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   * @param {boolean} [skipCaching]\n   */\n  _getCursorBoundariesOffsets(\n    index: number,\n    skipCaching?: boolean,\n  ): { left: number; top: number } {\n    if (skipCaching) {\n      return this.__getCursorBoundariesOffsets(index);\n    }\n    if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {\n      return this.cursorOffsetCache as { left: number; top: number };\n    }\n    return (this.cursorOffsetCache = this.__getCursorBoundariesOffsets(index));\n  }\n\n  /**\n   * Calculates cursor left/top offset relative to instance's center point\n   * @private\n   * @param {number} index index from start\n   */\n  __getCursorBoundariesOffsets(index: number) {\n    let topOffset = 0,\n      leftOffset = 0;\n    const { charIndex, lineIndex } = this.get2DCursorLocation(index);\n\n    for (let i = 0; i < lineIndex; i++) {\n      topOffset += this.getHeightOfLine(i);\n    }\n    const lineLeftOffset = this._getLineLeftOffset(lineIndex);\n    const bound = this.__charBounds[lineIndex][charIndex];\n    bound && (leftOffset = bound.left);\n    if (\n      this.charSpacing !== 0 &&\n      charIndex === this._textLines[lineIndex].length\n    ) {\n      leftOffset -= this._getWidthOfCharSpacing();\n    }\n    const boundaries = {\n      top: topOffset,\n      left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0),\n    };\n    if (this.direction === 'rtl') {\n      if (\n        this.textAlign === RIGHT ||\n        this.textAlign === JUSTIFY ||\n        this.textAlign === JUSTIFY_RIGHT\n      ) {\n        boundaries.left *= -1;\n      } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      } else if (\n        this.textAlign === CENTER ||\n        this.textAlign === JUSTIFY_CENTER\n      ) {\n        boundaries.left = lineLeftOffset - (leftOffset > 0 ? leftOffset : 0);\n      }\n    }\n    return boundaries;\n  }\n\n  /**\n   * Renders cursor on context Top, outside the animation cycle, on request\n   * Used for the drag/drop effect.\n   * If contextTop is not available, do nothing.\n   */\n  renderCursorAt(selectionStart: number) {\n    this._renderCursor(\n      this.canvas!.contextTop,\n      this._getCursorBoundaries(selectionStart, true),\n      selectionStart,\n    );\n  }\n\n  /**\n   * Renders cursor\n   * @param {Object} boundaries\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderCursor(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    this._renderCursor(ctx, boundaries, this.selectionStart);\n  }\n\n  /**\n   * Return the data needed to render the cursor for given selection start\n   * The left,top are relative to the object, while width and height are prescaled\n   * to look think with canvas zoom and object scaling,\n   * so they depend on canvas and object scaling\n   */\n  getCursorRenderingData(\n    selectionStart: number = this.selectionStart,\n    boundaries: CursorBoundaries = this._getCursorBoundaries(selectionStart),\n  ): CursorRenderingData {\n    const cursorLocation = this.get2DCursorLocation(selectionStart),\n      lineIndex = cursorLocation.lineIndex,\n      charIndex =\n        cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,\n      charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),\n      multiplier = this.getObjectScaling().x * this.canvas!.getZoom(),\n      cursorWidth = this.cursorWidth / multiplier,\n      dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY'),\n      topOffset =\n        boundaries.topOffset +\n        ((1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex)) /\n          this.lineHeight -\n        charHeight * (1 - this._fontSizeFraction);\n\n    return {\n      color:\n        this.cursorColor ||\n        (this.getValueOfPropertyAt(lineIndex, charIndex, 'fill') as string),\n      opacity: this._currentCursorOpacity,\n      left: boundaries.left + boundaries.leftOffset - cursorWidth / 2,\n      top: topOffset + boundaries.top + dy,\n      width: cursorWidth,\n      height: charHeight,\n    };\n  }\n\n  /**\n   * Render the cursor at the given selectionStart.\n   *\n   */\n  _renderCursor(\n    ctx: CanvasRenderingContext2D,\n    boundaries: CursorBoundaries,\n    selectionStart: number,\n  ) {\n    const { color, opacity, left, top, width, height } =\n      this.getCursorRenderingData(selectionStart, boundaries);\n    ctx.fillStyle = color;\n    ctx.globalAlpha = opacity;\n    ctx.fillRect(left, top, width, height);\n  }\n\n  /**\n   * Renders text selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  renderSelection(ctx: CanvasRenderingContext2D, boundaries: CursorBoundaries) {\n    const selection = {\n      selectionStart: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionStart\n        : this.selectionStart,\n      selectionEnd: this.inCompositionMode\n        ? this.hiddenTextarea!.selectionEnd\n        : this.selectionEnd,\n    };\n    this._renderSelection(ctx, selection, boundaries);\n  }\n\n  /**\n   * Renders drag start text selection\n   */\n  renderDragSourceEffect() {\n    const dragStartSelection =\n      this.draggableTextDelegate.getDragStartSelection()!;\n    this._renderSelection(\n      this.canvas!.contextTop,\n      dragStartSelection,\n      this._getCursorBoundaries(dragStartSelection.selectionStart, true),\n    );\n  }\n\n  renderDropTargetEffect(e: DragEvent) {\n    const dragSelection = this.getSelectionStartFromPointer(e);\n    this.renderCursorAt(dragSelection);\n  }\n\n  /**\n   * Renders text selection\n   * @private\n   * @param {{ selectionStart: number, selectionEnd: number }} selection\n   * @param {Object} boundaries Object with left/top/leftOffset/topOffset\n   * @param {CanvasRenderingContext2D} ctx transformed context to draw on\n   */\n  _renderSelection(\n    ctx: CanvasRenderingContext2D,\n    selection: { selectionStart: number; selectionEnd: number },\n    boundaries: CursorBoundaries,\n  ) {\n    const selectionStart = selection.selectionStart,\n      selectionEnd = selection.selectionEnd,\n      isJustify = this.textAlign.includes(JUSTIFY),\n      start = this.get2DCursorLocation(selectionStart),\n      end = this.get2DCursorLocation(selectionEnd),\n      startLine = start.lineIndex,\n      endLine = end.lineIndex,\n      startChar = start.charIndex < 0 ? 0 : start.charIndex,\n      endChar = end.charIndex < 0 ? 0 : end.charIndex;\n\n    for (let i = startLine; i <= endLine; i++) {\n      const lineOffset = this._getLineLeftOffset(i) || 0;\n      let lineHeight = this.getHeightOfLine(i),\n        realLineHeight = 0,\n        boxStart = 0,\n        boxEnd = 0;\n\n      if (i === startLine) {\n        boxStart = this.__charBounds[startLine][startChar].left;\n      }\n      if (i >= startLine && i < endLine) {\n        boxEnd =\n          isJustify && !this.isEndOfWrapping(i)\n            ? this.width\n            : this.getLineWidth(i) || 5; // WTF is this 5?\n      } else if (i === endLine) {\n        if (endChar === 0) {\n          boxEnd = this.__charBounds[endLine][endChar].left;\n        } else {\n          const charSpacing = this._getWidthOfCharSpacing();\n          boxEnd =\n            this.__charBounds[endLine][endChar - 1].left +\n            this.__charBounds[endLine][endChar - 1].width -\n            charSpacing;\n        }\n      }\n      realLineHeight = lineHeight;\n      if (this.lineHeight < 1 || (i === endLine && this.lineHeight > 1)) {\n        lineHeight /= this.lineHeight;\n      }\n      let drawStart = boundaries.left + lineOffset + boxStart,\n        drawHeight = lineHeight,\n        extraTop = 0;\n      const drawWidth = boxEnd - boxStart;\n      if (this.inCompositionMode) {\n        ctx.fillStyle = this.compositionColor || 'black';\n        drawHeight = 1;\n        extraTop = lineHeight;\n      } else {\n        ctx.fillStyle = this.selectionColor;\n      }\n      if (this.direction === 'rtl') {\n        if (\n          this.textAlign === RIGHT ||\n          this.textAlign === JUSTIFY ||\n          this.textAlign === JUSTIFY_RIGHT\n        ) {\n          drawStart = this.width - drawStart - drawWidth;\n        } else if (this.textAlign === LEFT || this.textAlign === JUSTIFY_LEFT) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        } else if (\n          this.textAlign === CENTER ||\n          this.textAlign === JUSTIFY_CENTER\n        ) {\n          drawStart = boundaries.left + lineOffset - boxEnd;\n        }\n      }\n      ctx.fillRect(\n        drawStart,\n        boundaries.top + boundaries.topOffset + extraTop,\n        drawWidth,\n        drawHeight,\n      );\n      boundaries.topOffset += realLineHeight;\n    }\n  }\n\n  /**\n   * High level function to know the height of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns fontSize of char at the current cursor\n   * Unused from the library, is for the end user\n   * @return {Number} Character font size\n   */\n  getCurrentCharFontSize(): number {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');\n  }\n\n  /**\n   * High level function to know the color of the cursor.\n   * the currentChar is the one that precedes the cursor\n   * Returns color (fill) of char at the current cursor\n   * if the text object has a pattern or gradient for filler, it will return that.\n   * Unused by the library, is for the end user\n   * @return {String | TFiller} Character color (fill)\n   */\n  getCurrentCharColor(): string | TFiller | null {\n    const cp = this._getCurrentCharIndex();\n    return this.getValueOfPropertyAt(cp.l, cp.c, FILL);\n  }\n\n  /**\n   * Returns the cursor position for the getCurrent.. functions\n   * @private\n   */\n  _getCurrentCharIndex() {\n    const cursorPosition = this.get2DCursorLocation(this.selectionStart, true),\n      charIndex =\n        cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;\n    return { l: cursorPosition.lineIndex, c: charIndex };\n  }\n\n  dispose() {\n    this.exitEditingImpl();\n    this.draggableTextDelegate.dispose();\n    super.dispose();\n  }\n}\n\nclassRegistry.setClass(IText);\n// legacy\nclassRegistry.setClass(IText, 'i-text');\n", "import type { TClassProperties, TOptions } from '../typedefs';\nimport { IText } from './IText/IText';\nimport { classRegistry } from '../ClassRegistry';\nimport { createTextboxDefaultControls } from '../controls/commonControls';\nimport { JUSTIFY } from './Text/constants';\nimport type { TextStyleDeclaration } from './Text/StyledText';\nimport type { SerializedITextProps, ITextProps } from './IText/IText';\nimport type { ITextEvents } from './IText/ITextBehavior';\nimport type { TextLinesInfo } from './Text/Text';\nimport type { Control } from '../controls/Control';\n\n// @TODO: Many things here are configuration related and shouldn't be on the class nor prototype\n// regexes, list of properties that are not suppose to change by instances, magic consts.\n// this will be a separated effort\nexport const textboxDefaultValues: Partial<TClassProperties<Textbox>> = {\n  minWidth: 20,\n  dynamicMinWidth: 2,\n  lockScalingFlip: true,\n  noScaleCache: false,\n  _wordJoiners: /[ \\t\\r]/,\n  splitByGrapheme: false,\n};\n\nexport type GraphemeData = {\n  wordsData: {\n    word: string[];\n    width: number;\n  }[][];\n  largestWordWidth: number;\n};\n\nexport type StyleMap = Record<string, { line: number; offset: number }>;\n\n// @TODO this is not complete\ninterface UniqueTextboxProps {\n  minWidth: number;\n  splitByGrapheme: boolean;\n  dynamicMinWidth: number;\n  _wordJoiners: RegExp;\n}\n\nexport interface SerializedTextboxProps\n  extends SerializedITextProps,\n    Pick<UniqueTextboxProps, 'minWidth' | 'splitByGrapheme'> {}\n\nexport interface TextboxProps extends ITextProps, UniqueTextboxProps {}\n\n/**\n * Textbox class, based on IText, allows the user to resize the text rectangle\n * and wraps lines automatically. Textboxes have their Y scaling locked, the\n * user can only change width. Height is adjusted automatically based on the\n * wrapping of lines.\n */\nexport class Textbox<\n    Props extends TOptions<TextboxProps> = Partial<TextboxProps>,\n    SProps extends SerializedTextboxProps = SerializedTextboxProps,\n    EventSpec extends ITextEvents = ITextEvents,\n  >\n  extends IText<Props, SProps, EventSpec>\n  implements UniqueTextboxProps\n{\n  /**\n   * Minimum width of textbox, in pixels.\n   * @type Number\n   * @default\n   */\n  declare minWidth: number;\n\n  /**\n   * Minimum calculated width of a textbox, in pixels.\n   * fixed to 2 so that an empty textbox cannot go to 0\n   * and is still selectable without text.\n   * @type Number\n   * @default\n   */\n  declare dynamicMinWidth: number;\n\n  /**\n   * Use this boolean property in order to split strings that have no white space concept.\n   * this is a cheap way to help with chinese/japanese\n   * @type Boolean\n   * @since 2.6.0\n   */\n  declare splitByGrapheme: boolean;\n\n  declare _wordJoiners: RegExp;\n\n  declare _styleMap: StyleMap;\n\n  declare isWrapping: boolean;\n\n  static type = 'Textbox';\n\n  static textLayoutProperties = [...IText.textLayoutProperties, 'width'];\n\n  static ownDefaults = textboxDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...Textbox.ownDefaults,\n    };\n  }\n\n  /**\n   * Constructor\n   * @param {String} text Text string\n   * @param {Object} [options] Options object\n   */\n  constructor(text: string, options?: Props) {\n    super(text, { ...Textbox.ownDefaults, ...options } as Props);\n  }\n\n  /**\n   * Creates the default control object.\n   * If you prefer to have on instance of controls shared among all objects\n   * make this function return an empty object and add controls to the ownDefaults object\n   */\n  static createControls(): { controls: Record<string, Control> } {\n    return { controls: createTextboxDefaultControls() };\n  }\n\n  /**\n   * Unlike superclass's version of this function, Textbox does not update\n   * its width.\n   * @private\n   * @override\n   */\n  initDimensions() {\n    if (!this.initialized) {\n      return;\n    }\n    this.isEditing && this.initDelayedCursor();\n    this._clearCache();\n    // clear dynamicMinWidth as it will be different after we re-wrap line\n    this.dynamicMinWidth = 0;\n    // wrap lines\n    this._styleMap = this._generateStyleMap(this._splitText());\n    // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap\n    if (this.dynamicMinWidth > this.width) {\n      this._set('width', this.dynamicMinWidth);\n    }\n    if (this.textAlign.includes(JUSTIFY)) {\n      // once text is measured we need to make space fatter to make justified text.\n      this.enlargeSpaces();\n    }\n    // clear cache and re-calculate height\n    this.height = this.calcTextHeight();\n  }\n\n  /**\n   * Generate an object that translates the style object so that it is\n   * broken up by visual lines (new lines and automatic wrapping).\n   * The original text styles object is broken up by actual lines (new lines only),\n   * which is only sufficient for Text / IText\n   * @private\n   */\n  _generateStyleMap(textInfo: TextLinesInfo): StyleMap {\n    let realLineCount = 0,\n      realLineCharCount = 0,\n      charCount = 0;\n    const map: StyleMap = {};\n\n    for (let i = 0; i < textInfo.graphemeLines.length; i++) {\n      if (textInfo.graphemeText[charCount] === '\\n' && i > 0) {\n        realLineCharCount = 0;\n        charCount++;\n        realLineCount++;\n      } else if (\n        !this.splitByGrapheme &&\n        this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) &&\n        i > 0\n      ) {\n        // this case deals with space's that are removed from end of lines when wrapping\n        realLineCharCount++;\n        charCount++;\n      }\n\n      map[i] = { line: realLineCount, offset: realLineCharCount };\n\n      charCount += textInfo.graphemeLines[i].length;\n      realLineCharCount += textInfo.graphemeLines[i].length;\n    }\n\n    return map;\n  }\n\n  /**\n   * Returns true if object has a style property or has it on a specified line\n   * @param {Number} lineIndex\n   * @return {Boolean}\n   */\n  styleHas(property: keyof TextStyleDeclaration, lineIndex: number): boolean {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (map) {\n        lineIndex = map.line;\n      }\n    }\n    return super.styleHas(property, lineIndex);\n  }\n\n  /**\n   * Returns true if object has no styling or no styling in a line\n   * @param {Number} lineIndex , lineIndex is on wrapped lines.\n   * @return {Boolean}\n   */\n  isEmptyStyles(lineIndex: number): boolean {\n    if (!this.styles) {\n      return true;\n    }\n    let offset = 0,\n      nextLineIndex = lineIndex + 1,\n      nextOffset: number,\n      shouldLimit = false;\n    const map = this._styleMap[lineIndex],\n      mapNextLine = this._styleMap[lineIndex + 1];\n    if (map) {\n      lineIndex = map.line;\n      offset = map.offset;\n    }\n    if (mapNextLine) {\n      nextLineIndex = mapNextLine.line;\n      shouldLimit = nextLineIndex === lineIndex;\n      nextOffset = mapNextLine.offset;\n    }\n    const obj =\n      typeof lineIndex === 'undefined'\n        ? this.styles\n        : { line: this.styles[lineIndex] };\n    for (const p1 in obj) {\n      for (const p2 in obj[p1]) {\n        const p2Number = parseInt(p2, 10);\n        if (p2Number >= offset && (!shouldLimit || p2Number < nextOffset!)) {\n          // eslint-disable-next-line no-unused-vars\n          for (const p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @protected\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @return {TextStyleDeclaration} a style object reference to the existing one or a new empty object when undefined\n   */\n  _getStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n  ): TextStyleDeclaration {\n    if (this._styleMap && !this.isWrapping) {\n      const map = this._styleMap[lineIndex];\n      if (!map) {\n        return {};\n      }\n      lineIndex = map.line;\n      charIndex = map.offset + charIndex;\n    }\n    return super._getStyleDeclaration(lineIndex, charIndex);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setStyleDeclaration(\n    lineIndex: number,\n    charIndex: number,\n    style: object,\n  ) {\n    const map = this._styleMap[lineIndex];\n    super._setStyleDeclaration(map.line, map.offset + charIndex, style);\n  }\n\n  /**\n   * @param {Number} lineIndex\n   * @param {Number} charIndex\n   * @private\n   */\n  protected _deleteStyleDeclaration(lineIndex: number, charIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._deleteStyleDeclaration(map.line, map.offset + charIndex);\n  }\n\n  /**\n   * probably broken need a fix\n   * Returns the real style line that correspond to the wrapped lineIndex line\n   * Used just to verify if the line does exist or not.\n   * @param {Number} lineIndex\n   * @returns {Boolean} if the line exists or not\n   * @private\n   */\n  protected _getLineStyle(lineIndex: number): boolean {\n    const map = this._styleMap[lineIndex];\n    return !!this.styles[map.line];\n  }\n\n  /**\n   * Set the line style to an empty object so that is initialized\n   * @param {Number} lineIndex\n   * @param {Object} style\n   * @private\n   */\n  protected _setLineStyle(lineIndex: number) {\n    const map = this._styleMap[lineIndex];\n    super._setLineStyle(map.line);\n  }\n\n  /**\n   * Wraps text using the 'width' property of Textbox. First this function\n   * splits text on newlines, so we preserve newlines entered by the user.\n   * Then it wraps each line using the width of the Textbox by calling\n   * _wrapLine().\n   * @param {Array} lines The string array of text that is split into lines\n   * @param {Number} desiredWidth width you want to wrap to\n   * @returns {Array} Array of lines\n   */\n  _wrapText(lines: string[], desiredWidth: number): string[][] {\n    this.isWrapping = true;\n    // extract all thewords and the widths to optimally wrap lines.\n    const data = this.getGraphemeDataForRender(lines);\n    const wrapped: string[][] = [];\n    for (let i = 0; i < data.wordsData.length; i++) {\n      wrapped.push(...this._wrapLine(i, desiredWidth, data));\n    }\n    this.isWrapping = false;\n    return wrapped;\n  }\n\n  /**\n   * For each line of text terminated by an hard line stop,\n   * measure each word width and extract the largest word from all.\n   * The returned words here are the one that at the end will be rendered.\n   * @param {string[]} lines the lines we need to measure\n   *\n   */\n  getGraphemeDataForRender(lines: string[]): GraphemeData {\n    const splitByGrapheme = this.splitByGrapheme,\n      infix = splitByGrapheme ? '' : ' ';\n\n    let largestWordWidth = 0;\n\n    const data = lines.map((line, lineIndex) => {\n      let offset = 0;\n      const wordsOrGraphemes = splitByGrapheme\n        ? this.graphemeSplit(line)\n        : this.wordSplit(line);\n\n      if (wordsOrGraphemes.length === 0) {\n        return [{ word: [], width: 0 }];\n      }\n\n      return wordsOrGraphemes.map((word: string) => {\n        // if using splitByGrapheme words are already in graphemes.\n        const graphemeArray = splitByGrapheme\n          ? [word]\n          : this.graphemeSplit(word);\n        const width = this._measureWord(graphemeArray, lineIndex, offset);\n        largestWordWidth = Math.max(width, largestWordWidth);\n        offset += graphemeArray.length + infix.length;\n        return { word: graphemeArray, width };\n      });\n    });\n\n    return {\n      wordsData: data,\n      largestWordWidth,\n    };\n  }\n\n  /**\n   * Helper function to measure a string of text, given its lineIndex and charIndex offset\n   * It gets called when charBounds are not available yet.\n   * Override if necessary\n   * Use with {@link Textbox#wordSplit}\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {String} text\n   * @param {number} lineIndex\n   * @param {number} charOffset\n   * @returns {number}\n   */\n  _measureWord(word: string[], lineIndex: number, charOffset = 0): number {\n    let width = 0,\n      prevGrapheme;\n    const skipLeft = true;\n    for (let i = 0, len = word.length; i < len; i++) {\n      const box = this._getGraphemeBox(\n        word[i],\n        lineIndex,\n        i + charOffset,\n        prevGrapheme,\n        skipLeft,\n      );\n      width += box.kernedWidth;\n      prevGrapheme = word[i];\n    }\n    return width;\n  }\n\n  /**\n   * Override this method to customize word splitting\n   * Use with {@link Textbox#_measureWord}\n   * @param {string} value\n   * @returns {string[]} array of words\n   */\n  wordSplit(value: string): string[] {\n    return value.split(this._wordJoiners);\n  }\n\n  /**\n   * Wraps a line of text using the width of the Textbox as desiredWidth\n   * and leveraging the known width o words from GraphemeData\n   * @private\n   * @param {Number} lineIndex\n   * @param {Number} desiredWidth width you want to wrap the line to\n   * @param {GraphemeData} graphemeData an object containing all the lines' words width.\n   * @param {Number} reservedSpace space to remove from wrapping for custom functionalities\n   * @returns {Array} Array of line(s) into which the given text is wrapped\n   * to.\n   */\n  _wrapLine(\n    lineIndex: number,\n    desiredWidth: number,\n    { largestWordWidth, wordsData }: GraphemeData,\n    reservedSpace = 0,\n  ): string[][] {\n    const additionalSpace = this._getWidthOfCharSpacing(),\n      splitByGrapheme = this.splitByGrapheme,\n      graphemeLines = [],\n      infix = splitByGrapheme ? '' : ' ';\n\n    let lineWidth = 0,\n      line: string[] = [],\n      // spaces in different languages?\n      offset = 0,\n      infixWidth = 0,\n      lineJustStarted = true;\n\n    desiredWidth -= reservedSpace;\n\n    const maxWidth = Math.max(\n      desiredWidth,\n      largestWordWidth,\n      this.dynamicMinWidth,\n    );\n    // layout words\n    const data = wordsData[lineIndex];\n    offset = 0;\n    let i;\n    for (i = 0; i < data.length; i++) {\n      const { word, width: wordWidth } = data[i];\n      offset += word.length;\n\n      lineWidth += infixWidth + wordWidth - additionalSpace;\n      if (lineWidth > maxWidth && !lineJustStarted) {\n        graphemeLines.push(line);\n        line = [];\n        lineWidth = wordWidth;\n        lineJustStarted = true;\n      } else {\n        lineWidth += additionalSpace;\n      }\n\n      if (!lineJustStarted && !splitByGrapheme) {\n        line.push(infix);\n      }\n      line = line.concat(word);\n\n      infixWidth = splitByGrapheme\n        ? 0\n        : this._measureWord([infix], lineIndex, offset);\n      offset++;\n      lineJustStarted = false;\n    }\n\n    i && graphemeLines.push(line);\n\n    // TODO: this code is probably not necessary anymore.\n    // it can be moved out of this function since largestWordWidth is now\n    // known in advance\n    if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {\n      this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;\n    }\n    return graphemeLines;\n  }\n\n  /**\n   * Detect if the text line is ended with an hard break\n   * text and itext do not have wrapping, return false\n   * @param {Number} lineIndex text to split\n   * @return {Boolean}\n   */\n  isEndOfWrapping(lineIndex: number): boolean {\n    if (!this._styleMap[lineIndex + 1]) {\n      // is last line, return true;\n      return true;\n    }\n    if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {\n      // this is last line before a line break, return true;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Detect if a line has a linebreak and so we need to account for it when moving\n   * and counting style.\n   * This is important only for splitByGrapheme at the end of wrapping.\n   * If we are not wrapping the offset is always 1\n   * @return Number\n   */\n  missingNewlineOffset(lineIndex: number, skipWrapping?: boolean): 0 | 1 {\n    if (this.splitByGrapheme && !skipWrapping) {\n      return this.isEndOfWrapping(lineIndex) ? 1 : 0;\n    }\n    return 1;\n  }\n\n  /**\n   * Gets lines of text to render in the Textbox. This function calculates\n   * text wrapping on the fly every time it is called.\n   * @param {String} text text to split\n   * @returns {Array} Array of lines in the Textbox.\n   * @override\n   */\n  _splitTextIntoLines(text: string) {\n    const newText = super._splitTextIntoLines(text),\n      graphemeLines = this._wrapText(newText.lines, this.width),\n      lines = new Array(graphemeLines.length);\n    for (let i = 0; i < graphemeLines.length; i++) {\n      lines[i] = graphemeLines[i].join('');\n    }\n    newText.lines = lines;\n    newText.graphemeLines = graphemeLines;\n    return newText;\n  }\n\n  getMinWidth() {\n    return Math.max(this.minWidth, this.dynamicMinWidth);\n  }\n\n  _removeExtraneousStyles() {\n    const linesToKeep = new Map();\n    for (const prop in this._styleMap) {\n      const propNumber = parseInt(prop, 10);\n      if (this._textLines[propNumber]) {\n        const lineIndex = this._styleMap[prop].line;\n        linesToKeep.set(`${lineIndex}`, true);\n      }\n    }\n    for (const prop in this.styles) {\n      if (!linesToKeep.has(prop)) {\n        delete this.styles[prop];\n      }\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @method toObject\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    return super.toObject<T, K>([\n      'minWidth',\n      'splitByGrapheme',\n      ...propertiesToInclude,\n    ] as K[]) as Pick<T, K> & SProps;\n  }\n}\n\nclassRegistry.setClass(Textbox);\n", "import { Point } from '../../Point';\nimport type { FabricObject } from '../../shapes/Object/FabricObject';\nimport { makeBoundingBoxFromPoints } from '../../util/misc/boundingBoxFromPoints';\nimport { sendPointToPlane } from '../../util/misc/planeChange';\nimport type { LayoutStrategyResult, StrictLayoutContext } from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { getObjectBounds } from './utils';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will adjust the bounding box to match the clip path bounding box.\n */\nexport class ClipPathLayout extends LayoutStrategy {\n  static readonly type = 'clip-path';\n\n  shouldPerformLayout(context: StrictLayoutContext): boolean {\n    return !!context.target.clipPath && super.shouldPerformLayout(context);\n  }\n\n  shouldLayoutClipPath() {\n    return false;\n  }\n\n  calcLayoutResult(\n    context: StrictLayoutContext,\n    objects: FabricObject[],\n  ): LayoutStrategyResult | undefined {\n    const { target } = context;\n    const { clipPath, group } = target;\n    if (!clipPath || !this.shouldPerformLayout(context)) {\n      return;\n    }\n    // TODO: remove stroke calculation from this case\n    const { width, height } = makeBoundingBoxFromPoints(\n      getObjectBounds(target, clipPath as FabricObject),\n    );\n    const size = new Point(width, height);\n    if (clipPath.absolutePositioned) {\n      //  we want the center point to exist in group's containing plane\n      const clipPathCenter = sendPointToPlane(\n        clipPath.getRelativeCenterPoint(),\n        undefined,\n        group ? group.calcTransformMatrix() : undefined,\n      );\n      return {\n        center: clipPathCenter,\n        size,\n      };\n    } else {\n      //  we want the center point to exist in group's containing plane, so we send it upwards\n      const clipPathCenter = clipPath\n        .getRelativeCenterPoint()\n        .transform(target.calcOwnMatrix(), true);\n      if (this.shouldPerformLayout(context)) {\n        // the clip path is positioned relative to the group's center which is affected by the bbox\n        // so we first calculate the bbox\n        const { center = new Point(), correction = new Point() } =\n          this.calcBoundingBox(objects, context) || {};\n        return {\n          center: center.add(clipPathCenter),\n          correction: correction.subtract(clipPathCenter),\n          size,\n        };\n      } else {\n        return {\n          center: target.getRelativeCenterPoint().add(clipPathCenter),\n          size,\n        };\n      }\n    }\n  }\n}\n\nclassRegistry.setClass(ClipPathLayout);\n", "import { Point } from '../../Point';\nimport type {\n  InitializationLayoutContext,\n  LayoutStrategyResult,\n  StrictLayoutContext,\n} from '../types';\nimport { LayoutStrategy } from './LayoutStrategy';\nimport { classRegistry } from '../../ClassRegistry';\n\n/**\n * Layout will keep target's initial size.\n */\nexport class FixedLayout extends LayoutStrategy {\n  static readonly type = 'fixed';\n\n  /**\n   * @override respect target's initial size\n   */\n  getInitialSize(\n    { target }: StrictLayoutContext & InitializationLayoutContext,\n    { size }: Pick<LayoutStrategyResult, 'center' | 'size'>,\n  ): Point {\n    return new Point(target.width || size.x, target.height || size.y);\n  }\n}\n\nclassRegistry.setClass(FixedLayout);\n", "import { LayoutManager } from './LayoutManager';\nimport type { RegistrationContext, StrictLayoutContext } from './types';\nimport type { Group } from '../shapes/Group';\n\n/**\n * Today the LayoutManager class also takes care of subscribing event handlers\n * to update the group layout when the group is interactive and a transform is applied\n * to a child object.\n * The ActiveSelection is never interactive, but it could contain objects from\n * groups that are.\n * The standard LayoutManager would subscribe the children of the activeSelection to\n * perform layout changes to the active selection itself, what we need instead is that\n * the transformation applied to the active selection will trigger changes to the\n * original group of the children ( the one referenced under the parent property )\n * This subclass of the LayoutManager has a single duty to fill the gap of this difference.`\n */\nexport class ActiveSelectionLayoutManager extends LayoutManager {\n  subscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      parent.layoutManager.subscribeTargets({\n        target: parent,\n        targets: [activeSelection],\n      });\n    });\n  }\n\n  /**\n   * unsubscribe from parent only if all its children were deselected\n   */\n  unsubscribeTargets(\n    context: RegistrationContext & Partial<StrictLayoutContext>,\n  ): void {\n    const activeSelection = context.target;\n    const selectedObjects = activeSelection.getObjects();\n    const parents = context.targets.reduce((parents, target) => {\n      target.parent && parents.add(target.parent);\n      return parents;\n    }, new Set<Group>());\n    parents.forEach((parent) => {\n      !selectedObjects.some((object) => object.parent === parent) &&\n        parent.layoutManager.unsubscribeTargets({\n          target: parent,\n          targets: [activeSelection],\n        });\n    });\n  }\n}\n", "import type { ControlRenderingStyleOverride } from '../controls/controlRendering';\nimport { classRegistry } from '../ClassRegistry';\nimport type { GroupProps } from './Group';\nimport { Group } from './Group';\nimport type { FabricObject } from './Object/FabricObject';\nimport {\n  LAYOUT_TYPE_ADDED,\n  LAYOUT_TYPE_REMOVED,\n} from '../LayoutManager/constants';\nimport type { TClassProperties } from '../typedefs';\nimport { log } from '../util/internals/console';\nimport { ActiveSelectionLayoutManager } from '../LayoutManager/ActiveSelectionLayoutManager';\n\nexport type MultiSelectionStacking = 'canvas-stacking' | 'selection-order';\n\nexport interface ActiveSelectionOptions extends GroupProps {\n  multiSelectionStacking: MultiSelectionStacking;\n}\n\nconst activeSelectionDefaultValues: Partial<TClassProperties<ActiveSelection>> =\n  {\n    multiSelectionStacking: 'canvas-stacking',\n  };\n\n/**\n * Used by Canvas to manage selection.\n *\n * @example\n * class MyActiveSelection extends ActiveSelection {\n *   ...\n * }\n *\n * // override the default `ActiveSelection` class\n * classRegistry.setClass(MyActiveSelection)\n */\nexport class ActiveSelection extends Group {\n  static type = 'ActiveSelection';\n\n  static ownDefaults: Record<string, any> = activeSelectionDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return { ...super.getDefaults(), ...ActiveSelection.ownDefaults };\n  }\n\n  /**\n   * The ActiveSelection needs to use the ActiveSelectionLayoutManager\n   * or selections on interactive groups may be broken\n   */\n  declare layoutManager: ActiveSelectionLayoutManager;\n\n  /**\n   * controls how selected objects are added during a multiselection event\n   * - `canvas-stacking` adds the selected object to the active selection while respecting canvas object stacking order\n   * - `selection-order` adds the selected object to the top of the stack,\n   * meaning that the stack is ordered by the order in which objects were selected\n   * @default `canvas-stacking`\n   */\n  declare multiSelectionStacking: MultiSelectionStacking;\n\n  constructor(\n    objects: FabricObject[] = [],\n    options: Partial<ActiveSelectionOptions> = {},\n  ) {\n    super();\n    Object.assign(this, ActiveSelection.ownDefaults);\n    this.setOptions(options);\n    const { left, top, layoutManager } = options;\n    this.groupInit(objects, {\n      left,\n      top,\n      layoutManager: layoutManager ?? new ActiveSelectionLayoutManager(),\n    });\n  }\n\n  /**\n   * @private\n   */\n  _shouldSetNestedCoords() {\n    return true;\n  }\n\n  /**\n   * @private\n   * @override we don't want the selection monitor to be active\n   */\n  __objectSelectionMonitor() {\n    //  noop\n  }\n\n  /**\n   * Adds objects with respect to {@link multiSelectionStacking}\n   * @param targets object to add to selection\n   */\n  multiSelectAdd(...targets: FabricObject[]) {\n    if (this.multiSelectionStacking === 'selection-order') {\n      this.add(...targets);\n    } else {\n      //  respect object stacking as it is on canvas\n      //  perf enhancement for large ActiveSelection: consider a binary search of `isInFrontOf`\n      targets.forEach((target) => {\n        const index = this._objects.findIndex((obj) => obj.isInFrontOf(target));\n        const insertAt =\n          index === -1\n            ? //  `target` is in front of all other objects\n              this.size()\n            : index;\n        this.insertAt(insertAt, target);\n      });\n    }\n  }\n\n  /**\n   * @override block ancestors/descendants of selected objects from being selected to prevent a circular object tree\n   */\n  canEnterGroup(object: FabricObject) {\n    if (\n      this.getObjects().some(\n        (o) => o.isDescendantOf(object) || object.isDescendantOf(o),\n      )\n    ) {\n      //  prevent circular object tree\n      log(\n        'error',\n        'ActiveSelection: circular object trees are not supported, this call has no effect',\n      );\n      return false;\n    }\n\n    return super.canEnterGroup(object);\n  }\n\n  /**\n   * Change an object so that it can be part of an active selection.\n   * this method is called by multiselectAdd from canvas code.\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object is in canvas coordinate plane\n   */\n  enterGroup(object: FabricObject, removeParentTransform?: boolean) {\n    // This condition check that the object has currently a group, and the group\n    // is also its parent, meaning that is not in an active selection, but is\n    // in a normal group.\n    if (object.parent && object.parent === object.group) {\n      // Disconnect the object from the group functionalities, but keep the ref parent intact\n      // for later re-enter\n      object.parent._exitGroup(object);\n      // in this case the object is probably inside an active selection.\n    } else if (object.group && object.parent !== object.group) {\n      // in this case group.remove will also clear the old parent reference.\n      object.group.remove(object);\n    }\n    // enter the active selection from a render perspective\n    // the object will be in the objects array of both the ActiveSelection and the Group\n    // but referenced in the group's _activeObjects so that it won't be rendered twice.\n    this._enterGroup(object, removeParentTransform);\n  }\n\n  /**\n   * we want objects to retain their canvas ref when exiting instance\n   * @private\n   * @param {FabricObject} object\n   * @param {boolean} [removeParentTransform] true if object should exit group without applying group's transform to it\n   */\n  exitGroup(object: FabricObject, removeParentTransform?: boolean) {\n    this._exitGroup(object, removeParentTransform);\n    // return to parent\n    object.parent && object.parent._enterGroup(object, true);\n  }\n\n  /**\n   * @private\n   * @param {'added'|'removed'} type\n   * @param {FabricObject[]} targets\n   */\n  _onAfterObjectsChange(type: 'added' | 'removed', targets: FabricObject[]) {\n    super._onAfterObjectsChange(type, targets);\n    const groups = new Set<Group>();\n    targets.forEach((object) => {\n      const { parent } = object;\n      parent && groups.add(parent);\n    });\n    if (type === LAYOUT_TYPE_REMOVED) {\n      //  invalidate groups' layout and mark as dirty\n      groups.forEach((group) => {\n        group._onAfterObjectsChange(LAYOUT_TYPE_ADDED, targets);\n      });\n    } else {\n      //  mark groups as dirty\n      groups.forEach((group) => {\n        group._set('dirty', true);\n      });\n    }\n  }\n\n  /**\n   * @override remove all objects\n   */\n  onDeselect() {\n    this.removeAll();\n    return false;\n  }\n\n  /**\n   * Returns string representation of a group\n   * @return {String}\n   */\n  toString() {\n    return `#<ActiveSelection: (${this.complexity()})>`;\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * objectCaching is a global flag, wins over everything\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return false;\n  }\n\n  /**\n   * Check if this group or its parent group are caching, recursively up\n   * @return {Boolean}\n   */\n  isOnACache() {\n    return false;\n  }\n\n  /**\n   * Renders controls and borders for the object\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   * @param {Object} [styleOverride] properties to override the object style\n   * @param {Object} [childrenOverride] properties to override the children overrides\n   */\n  _renderControls(\n    ctx: CanvasRenderingContext2D,\n    styleOverride?: ControlRenderingStyleOverride,\n    childrenOverride?: ControlRenderingStyleOverride,\n  ) {\n    ctx.save();\n    ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n    const options = {\n      hasControls: false,\n      ...childrenOverride,\n      forActiveSelection: true,\n    };\n    for (let i = 0; i < this._objects.length; i++) {\n      this._objects[i]._renderControls(ctx, options);\n    }\n    super._renderControls(ctx, styleOverride);\n    ctx.restore();\n  }\n}\n\nclassRegistry.setClass(ActiveSelection);\nclassRegistry.setClass(ActiveSelection, 'activeSelection');\n", "/**\n * Canvas 2D filter backend.\n */\nimport type { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TPipelineResources } from './typedefs';\n\nexport class Canvas2dFilterBackend {\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  /**\n   * Apply a set of filters against a source image and draw the filtered output\n   * to the provided destination canvas.\n   *\n   * @param {EnhancedFilter} filters The filter to apply.\n   * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n   * @param {Number} sourceWidth The width of the source input.\n   * @param {Number} sourceHeight The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    sourceElement: CanvasImageSource,\n    sourceWidth: number,\n    sourceHeight: number,\n    targetCanvas: HTMLCanvasElement,\n  ): T2DPipelineState | void {\n    const ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n    const imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n    const pipelineState: T2DPipelineState = {\n      sourceWidth,\n      sourceHeight,\n      imageData,\n      originalEl: sourceElement,\n      originalImageData,\n      canvasEl: targetCanvas,\n      ctx,\n      filterBackend: this,\n    };\n    filters.forEach((filter) => {\n      filter.applyTo(pipelineState);\n    });\n    const { imageData: imageDataPostFilter } = pipelineState;\n    if (\n      imageDataPostFilter.width !== sourceWidth ||\n      imageDataPostFilter.height !== sourceHeight\n    ) {\n      targetCanvas.width = imageDataPostFilter.width;\n      targetCanvas.height = imageDataPostFilter.height;\n    }\n    ctx.putImageData(imageDataPostFilter, 0, 0);\n    return pipelineState;\n  }\n}\n", "import { config } from '../config';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport type {\n  TWebGLPipelineState,\n  TProgramCache,\n  TTextureCache,\n  TPipelineResources,\n} from './typedefs';\nimport type { BaseFilter } from './BaseFilter';\n\nexport class WebGLFilterBackend {\n  declare tileSize: number;\n\n  /**\n   * Define ...\n   **/\n  aPosition: Float32Array = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\n  /**\n   * If GLPut data is the fastest operation, or if forced, this buffer will be used\n   * to transfer the data back in the 2d logic\n   **/\n  declare imageBuffer?: ArrayBuffer;\n\n  declare canvas: HTMLCanvasElement;\n\n  /**\n   * The Webgl context that will execute the operations for filtering\n   **/\n  declare gl: WebGLRenderingContext;\n\n  /**\n   * Keyed map for shader cache\n   **/\n  declare programCache: TProgramCache;\n\n  /**\n   * Keyed map for texture cache\n   **/\n  declare textureCache: TTextureCache;\n\n  /**\n   * Contains GPU info for debug\n   **/\n  declare gpuInfo: any;\n\n  /**\n   * Experimental. This object is a sort of repository of help layers used to avoid\n   * of recreating them during frequent filtering. If you are previewing a filter with\n   * a slider you probably do not want to create help layers every filter step.\n   * in this object there will be appended some canvases, created once, resized sometimes\n   * cleared never. Clearing is left to the developer.\n   **/\n  resources: TPipelineResources = {};\n\n  constructor({ tileSize = config.textureSize } = {}) {\n    this.tileSize = tileSize;\n    this.setupGLContext(tileSize, tileSize);\n    this.captureGPUInfo();\n  }\n\n  /**\n   * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n   */\n  setupGLContext(width: number, height: number): void {\n    this.dispose();\n    this.createWebGLCanvas(width, height);\n  }\n\n  /**\n   * Create a canvas element and associated WebGL context and attaches them as\n   * class properties to the GLFilterBackend class.\n   */\n  createWebGLCanvas(width: number, height: number): void {\n    const canvas = createCanvasElementFor({ width, height });\n    const glOptions = {\n        alpha: true,\n        premultipliedAlpha: false,\n        depth: false,\n        stencil: false,\n        antialias: false,\n      },\n      gl = canvas.getContext('webgl', glOptions) as WebGLRenderingContext;\n\n    if (!gl) {\n      return;\n    }\n    gl.clearColor(0, 0, 0, 0);\n    // this canvas can fire webglcontextlost and webglcontextrestored\n    this.canvas = canvas;\n    this.gl = gl;\n  }\n\n  /**\n   * Attempts to apply the requested filters to the source provided, drawing the filtered output\n   * to the provided target canvas.\n   *\n   * @param {Array} filters The filters to apply.\n   * @param {TexImageSource} source The source to be filtered.\n   * @param {Number} width The width of the source input.\n   * @param {Number} height The height of the source input.\n   * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n   * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n   * omitted, caching will be skipped.\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[],\n    source: TexImageSource,\n    width: number,\n    height: number,\n    targetCanvas: HTMLCanvasElement,\n    cacheKey?: string,\n  ): TWebGLPipelineState | undefined {\n    const gl = this.gl;\n    const ctx = targetCanvas.getContext('2d');\n    if (!gl || !ctx) {\n      return;\n    }\n    let cachedTexture;\n    if (cacheKey) {\n      cachedTexture = this.getCachedTexture(cacheKey, source);\n    }\n    const pipelineState: TWebGLPipelineState = {\n      originalWidth:\n        (source as HTMLImageElement).width ||\n        // @ts-expect-error is this a bug? should this be naturalWidth? or is this the pipeline state?\n        (source as HTMLImageElement).originalWidth ||\n        0,\n      originalHeight:\n        (source as HTMLImageElement).height ||\n        // @ts-expect-error is this a bug? should this be naturalHeight? or is this the pipeline state?\n        (source as HTMLImageElement).originalHeight ||\n        0,\n      sourceWidth: width,\n      sourceHeight: height,\n      destinationWidth: width,\n      destinationHeight: height,\n      context: gl,\n      sourceTexture: this.createTexture(\n        gl,\n        width,\n        height,\n        !cachedTexture ? source : undefined,\n      ),\n      targetTexture: this.createTexture(gl, width, height),\n      originalTexture:\n        cachedTexture ||\n        this.createTexture(\n          gl,\n          width,\n          height,\n          !cachedTexture ? source : undefined,\n        )!,\n      passes: filters.length,\n      webgl: true,\n      aPosition: this.aPosition,\n      programCache: this.programCache,\n      pass: 0,\n      filterBackend: this,\n      targetCanvas: targetCanvas,\n    };\n    const tempFbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n    filters.forEach((filter: any) => {\n      filter && filter.applyTo(pipelineState);\n    });\n    resizeCanvasIfNeeded(pipelineState);\n    this.copyGLTo2D(gl, pipelineState);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.deleteTexture(pipelineState.sourceTexture);\n    gl.deleteTexture(pipelineState.targetTexture);\n    gl.deleteFramebuffer(tempFbo);\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    return pipelineState;\n  }\n\n  /**\n   * Detach event listeners, remove references, and clean up caches.\n   */\n  dispose() {\n    if (this.canvas) {\n      // we are disposing, we don't care about the fact\n      // that the canvas shouldn't be null.\n      // @ts-expect-error disposing\n      this.canvas = null;\n      // @ts-expect-error disposing\n      this.gl = null;\n    }\n    this.clearWebGLCaches();\n  }\n\n  /**\n   * Wipe out WebGL-related caches.\n   */\n  clearWebGLCaches() {\n    this.programCache = {};\n    this.textureCache = {};\n  }\n\n  /**\n   * Create a WebGL texture object.\n   *\n   * Accepts specific dimensions to initialize the texture to or a source image.\n   *\n   * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n   * @param {number} width The width to initialize the texture at.\n   * @param {number} height The height to initialize the texture.\n   * @param {TexImageSource} textureImageSource A source for the texture data.\n   * @param {number} filter gl.NEAREST default or gl.LINEAR filters for the texture.\n   * This filter is very useful for LUTs filters. If you need interpolation use gl.LINEAR\n   * @returns {WebGLTexture}\n   */\n  createTexture(\n    gl: WebGLRenderingContext,\n    width: number,\n    height: number,\n    textureImageSource?: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ) {\n    const {\n      NEAREST,\n      TEXTURE_2D,\n      RGBA,\n      UNSIGNED_BYTE,\n      CLAMP_TO_EDGE,\n      TEXTURE_MAG_FILTER,\n      TEXTURE_MIN_FILTER,\n      TEXTURE_WRAP_S,\n      TEXTURE_WRAP_T,\n    } = gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(TEXTURE_2D, texture);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MAG_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, filter || NEAREST);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n    if (textureImageSource) {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        RGBA,\n        UNSIGNED_BYTE,\n        textureImageSource,\n      );\n    } else {\n      gl.texImage2D(\n        TEXTURE_2D,\n        0,\n        RGBA,\n        width,\n        height,\n        0,\n        RGBA,\n        UNSIGNED_BYTE,\n        null,\n      );\n    }\n    return texture;\n  }\n\n  /**\n   * Can be optionally used to get a texture from the cache array\n   *\n   * If an existing texture is not found, a new texture is created and cached.\n   *\n   * @param {String} uniqueId A cache key to use to find an existing texture.\n   * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n   * texture cache entry if one does not already exist.\n   */\n  getCachedTexture(\n    uniqueId: string,\n    textureImageSource: TexImageSource,\n    filter?:\n      | WebGLRenderingContextBase['NEAREST']\n      | WebGLRenderingContextBase['LINEAR'],\n  ): WebGLTexture | null {\n    const { textureCache } = this;\n    if (textureCache[uniqueId]) {\n      return textureCache[uniqueId];\n    } else {\n      const texture = this.createTexture(\n        this.gl,\n        (textureImageSource as HTMLImageElement).width,\n        (textureImageSource as HTMLImageElement).height,\n        textureImageSource,\n        filter,\n      );\n      if (texture) {\n        textureCache[uniqueId] = texture;\n      }\n      return texture;\n    }\n  }\n\n  /**\n   * Clear out cached resources related to a source image that has been\n   * filtered previously.\n   *\n   * @param {String} cacheKey The cache key provided when the source image was filtered.\n   */\n  evictCachesForKey(cacheKey: string) {\n    if (this.textureCache[cacheKey]) {\n      this.gl.deleteTexture(this.textureCache[cacheKey]);\n      delete this.textureCache[cacheKey];\n    }\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas.\n   *\n   * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n   * desired output image appearing in the bottom-left corner of the WebGL canvas.\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2D(gl: WebGLRenderingContext, pipelineState: TWebGLPipelineState) {\n    const glCanvas = gl.canvas,\n      targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    const sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(\n      glCanvas,\n      0,\n      sourceY,\n      targetCanvas.width,\n      targetCanvas.height,\n      0,\n      0,\n      targetCanvas.width,\n      targetCanvas.height,\n    );\n  }\n\n  /**\n   * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n   * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n   *\n   * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n   * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n   * @param {Object} pipelineState The 2D target canvas to copy on to.\n   */\n  copyGLTo2DPutImageData(\n    this: Required<WebGLFilterBackend>,\n    gl: WebGLRenderingContext,\n    pipelineState: TWebGLPipelineState,\n  ) {\n    const targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n    if (!ctx) {\n      return;\n    }\n    const u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    const u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    const imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Attempt to extract GPU information strings from a WebGL context.\n   *\n   * Useful information when debugging or blacklisting specific GPUs.\n   *\n   * @returns {Object} A GPU info object with renderer and vendor strings.\n   */\n  captureGPUInfo() {\n    if (this.gpuInfo) {\n      return this.gpuInfo;\n    }\n    const gl = this.gl,\n      gpuInfo = { renderer: '', vendor: '' };\n    if (!gl) {\n      return gpuInfo;\n    }\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    if (ext) {\n      const renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n      const vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n      if (renderer) {\n        gpuInfo.renderer = renderer.toLowerCase();\n      }\n      if (vendor) {\n        gpuInfo.vendor = vendor.toLowerCase();\n      }\n    }\n    this.gpuInfo = gpuInfo;\n    return gpuInfo;\n  }\n}\n\nfunction resizeCanvasIfNeeded(pipelineState: TWebGLPipelineState): void {\n  const targetCanvas = pipelineState.targetCanvas,\n    width = targetCanvas.width,\n    height = targetCanvas.height,\n    dWidth = pipelineState.destinationWidth,\n    dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n", "import { config } from '../config';\nimport { getEnv } from '../env';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { Canvas2dFilterBackend } from './Canvas2dFilterBackend';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\n\nexport type FilterBackend = WebGLFilterBackend | Canvas2dFilterBackend;\n\nlet filterBackend: FilterBackend;\n\n/**\n * Verifies if it is possible to initialize webgl or fallback on a canvas2d filtering backend\n */\nexport function initFilterBackend(): FilterBackend {\n  const { WebGLProbe } = getEnv();\n  WebGLProbe.queryWebGL(createCanvasElement());\n  if (config.enableGLFiltering && WebGLProbe.isSupported(config.textureSize)) {\n    return new WebGLFilterBackend({ tileSize: config.textureSize });\n  } else {\n    return new Canvas2dFilterBackend();\n  }\n}\n\n/**\n * Get the current fabricJS filter backend  or initialize one if not available yet\n * @param [strict] pass `true` to create the backend if it wasn't created yet (default behavior),\n * pass `false` to get the backend ref without mutating it\n */\nexport function getFilterBackend(strict = true): FilterBackend {\n  if (!filterBackend && strict) {\n    filterBackend = initFilterBackend();\n  }\n  return filterBackend;\n}\n\nexport function setFilterBackend(backend: FilterBackend) {\n  filterBackend = backend;\n}\n", "import { getFabricDocument, getEnv } from '../env';\nimport type { BaseFilter } from '../filters/BaseFilter';\nimport { getFilterBackend } from '../filters/FilterBackend';\nimport { SHARED_ATTRIBUTES } from '../parser/attributes';\nimport { parseAttributes } from '../parser/parseAttributes';\nimport type {\n  TClassProperties,\n  TCrossOrigin,\n  TSize,\n  Abortable,\n  TOptions,\n} from '../typedefs';\nimport { uid } from '../util/internals/uid';\nimport { createCanvasElementFor } from '../util/misc/dom';\nimport { findScaleToCover, findScaleToFit } from '../util/misc/findScaleTo';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport {\n  enlivenObjectEnlivables,\n  enlivenObjects,\n  loadImage,\n} from '../util/misc/objectEnlive';\nimport { parsePreserveAspectRatioAttribute } from '../util/misc/svgParsing';\nimport { classRegistry } from '../ClassRegistry';\nimport { FabricObject, cacheProperties } from './Object/FabricObject';\nimport type { FabricObjectProps, SerializedObjectProps } from './Object/types';\nimport type { ObjectEvents } from '../EventTypeDefs';\nimport { WebGLFilterBackend } from '../filters/WebGLFilterBackend';\nimport { FILL, NONE } from '../constants';\nimport { getDocumentFromElement } from '../util/dom_misc';\nimport type { CSSRules } from '../parser/typedefs';\nimport type { Resize } from '../filters/Resize';\nimport type { TCachedFabricObject } from './Object/Object';\nimport { log } from '../util/internals/console';\n\n// @todo Would be nice to have filtering code not imported directly.\n\nexport type ImageSource =\n  | HTMLImageElement\n  | HTMLVideoElement\n  | HTMLCanvasElement;\n\ninterface UniqueImageProps {\n  srcFromAttribute: boolean;\n  minimumScaleTrigger: number;\n  cropX: number;\n  cropY: number;\n  imageSmoothing: boolean;\n  filters: BaseFilter<string, Record<string, any>>[];\n  resizeFilter?: Resize;\n}\n\nexport const imageDefaultValues: Partial<TClassProperties<FabricImage>> = {\n  strokeWidth: 0,\n  srcFromAttribute: false,\n  minimumScaleTrigger: 0.5,\n  cropX: 0,\n  cropY: 0,\n  imageSmoothing: true,\n};\n\nexport interface SerializedImageProps extends SerializedObjectProps {\n  src: string;\n  crossOrigin: TCrossOrigin;\n  filters: any[];\n  resizeFilter?: any;\n  cropX: number;\n  cropY: number;\n}\n\nexport interface ImageProps extends FabricObjectProps, UniqueImageProps {}\n\nconst IMAGE_PROPS = ['cropX', 'cropY'] as const;\n\n/**\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n */\nexport class FabricImage<\n    Props extends TOptions<ImageProps> = Partial<ImageProps>,\n    SProps extends SerializedImageProps = SerializedImageProps,\n    EventSpec extends ObjectEvents = ObjectEvents,\n  >\n  extends FabricObject<Props, SProps, EventSpec>\n  implements ImageProps\n{\n  /**\n   * When calling {@link FabricImage.getSrc}, return value from element src with `element.getAttribute('src')`.\n   * This allows for relative urls as image src.\n   * @since 2.7.0\n   * @type Boolean\n   * @default false\n   */\n  declare srcFromAttribute: boolean;\n\n  /**\n   * private\n   * contains last value of scaleX to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleX = 1;\n\n  /**\n   * private\n   * contains last value of scaleY to detect\n   * if the Image got resized after the last Render\n   * @type Number\n   */\n  protected _lastScaleY = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingX = 1;\n\n  /**\n   * private\n   * contains last value of scaling applied by the apply filter chain\n   * @type Number\n   */\n  protected _filterScalingY = 1;\n\n  /**\n   * minimum scale factor under which any resizeFilter is triggered to resize the image\n   * 0 will disable the automatic resize. 1 will trigger automatically always.\n   * number bigger than 1 are not implemented yet.\n   * @type Number\n   */\n  declare minimumScaleTrigger: number;\n\n  /**\n   * key used to retrieve the texture representing this image\n   * @since 2.0.0\n   * @type String\n   * @default\n   */\n  declare cacheKey: string;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropX: number;\n\n  /**\n   * Image crop in pixels from original image size.\n   * @since 2.0.0\n   * @type Number\n   * @default\n   */\n  declare cropY: number;\n\n  /**\n   * Indicates whether this canvas will use image smoothing when painting this image.\n   * Also influence if the cacheCanvas for this image uses imageSmoothing\n   * @since 4.0.0-beta.11\n   * @type Boolean\n   * @default\n   */\n  declare imageSmoothing: boolean;\n\n  declare preserveAspectRatio: string;\n\n  protected declare src: string;\n\n  declare filters: BaseFilter<string, Record<string, any>>[];\n  declare resizeFilter: Resize;\n\n  declare _element: ImageSource;\n  declare _filteredEl?: HTMLCanvasElement;\n  declare _originalElement: ImageSource;\n\n  static type = 'Image';\n\n  static cacheProperties = [...cacheProperties, ...IMAGE_PROPS];\n\n  static ownDefaults = imageDefaultValues;\n\n  static getDefaults(): Record<string, any> {\n    return {\n      ...super.getDefaults(),\n      ...FabricImage.ownDefaults,\n    };\n  }\n  /**\n   * Constructor\n   * Image can be initialized with any canvas drawable or a string.\n   * The string should be a url and will be loaded as an image.\n   * Canvas and Image element work out of the box, while videos require extra code to work.\n   * Please check video element events for seeking.\n   * @param {ImageSource | string} element Image element\n   * @param {Object} [options] Options object\n   */\n  constructor(elementId: string, options?: Props);\n  constructor(element: ImageSource, options?: Props);\n  constructor(arg0: ImageSource | string, options?: Props) {\n    super();\n    this.filters = [];\n    Object.assign(this, FabricImage.ownDefaults);\n    this.setOptions(options);\n    this.cacheKey = `texture${uid()}`;\n    this.setElement(\n      typeof arg0 === 'string'\n        ? ((\n            (this.canvas && getDocumentFromElement(this.canvas.getElement())) ||\n            getFabricDocument()\n          ).getElementById(arg0) as ImageSource)\n        : arg0,\n      options,\n    );\n  }\n\n  /**\n   * Returns image element which this instance if based on\n   */\n  getElement() {\n    return this._element;\n  }\n\n  /**\n   * Sets image element for this instance to a specified one.\n   * If filters defined they are applied to new image.\n   * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n   * @param {HTMLImageElement} element\n   * @param {Partial<TSize>} [size] Options object\n   */\n  setElement(element: ImageSource, size: Partial<TSize> = {}) {\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._element = element;\n    this._originalElement = element;\n    this._setWidthHeight(size);\n    element.classList.add(FabricImage.CSS_CANVAS);\n    if (this.filters.length !== 0) {\n      this.applyFilters();\n    }\n    // resizeFilters work on the already filtered copy.\n    // we need to apply resizeFilters AFTER normal filters.\n    // applyResizeFilters is run more often than normal filters\n    // and is triggered by user interactions rather than dev code\n    if (this.resizeFilter) {\n      this.applyResizeFilters();\n    }\n  }\n\n  /**\n   * Delete a single texture if in webgl mode\n   */\n  removeTexture(key: string) {\n    const backend = getFilterBackend(false);\n    if (backend instanceof WebGLFilterBackend) {\n      backend.evictCachesForKey(key);\n    }\n  }\n\n  /**\n   * Delete textures, reference to elements and eventually JSDOM cleanup\n   */\n  dispose() {\n    super.dispose();\n    this.removeTexture(this.cacheKey);\n    this.removeTexture(`${this.cacheKey}_filtered`);\n    this._cacheContext = null;\n    (\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'] as const\n    ).forEach((elementKey) => {\n      const el = this[elementKey];\n      el && getEnv().dispose(el);\n      // @ts-expect-error disposing\n      this[elementKey] = undefined;\n    });\n  }\n\n  /**\n   * Get the crossOrigin value (of the corresponding image element)\n   */\n  getCrossOrigin(): string | null {\n    return (\n      this._originalElement &&\n      ((this._originalElement as any).crossOrigin || null)\n    );\n  }\n\n  /**\n   * Returns original size of an image\n   */\n  getOriginalSize() {\n    const element = this.getElement() as any;\n    if (!element) {\n      return {\n        width: 0,\n        height: 0,\n      };\n    }\n    return {\n      width: element.naturalWidth || element.width,\n      height: element.naturalHeight || element.height,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _stroke(ctx: CanvasRenderingContext2D) {\n    if (!this.stroke || this.strokeWidth === 0) {\n      return;\n    }\n    const w = this.width / 2,\n      h = this.height / 2;\n    ctx.beginPath();\n    ctx.moveTo(-w, -h);\n    ctx.lineTo(w, -h);\n    ctx.lineTo(w, h);\n    ctx.lineTo(-w, h);\n    ctx.lineTo(-w, -h);\n    ctx.closePath();\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} Object representation of an instance\n   */\n  toObject<\n    T extends Omit<Props & TClassProperties<this>, keyof SProps>,\n    K extends keyof T = never,\n  >(propertiesToInclude: K[] = []): Pick<T, K> & SProps {\n    const filters: Record<string, any>[] = [];\n    this.filters.forEach((filterObj) => {\n      filterObj && filters.push(filterObj.toObject());\n    });\n    return {\n      ...super.toObject([...IMAGE_PROPS, ...propertiesToInclude]),\n      src: this.getSrc(),\n      crossOrigin: this.getCrossOrigin(),\n      filters,\n      ...(this.resizeFilter\n        ? { resizeFilter: this.resizeFilter.toObject() }\n        : {}),\n    };\n  }\n\n  /**\n   * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n   * @return {Boolean}\n   */\n  hasCrop() {\n    return (\n      !!this.cropX ||\n      !!this.cropY ||\n      this.width < this._element.width ||\n      this.height < this._element.height\n    );\n  }\n\n  /**\n   * Returns svg representation of an instance\n   * @return {string[]} an array of strings with the specific svg representation\n   * of the instance\n   */\n  _toSVG() {\n    const imageMarkup: string[] = [],\n      element = this._element,\n      x = -this.width / 2,\n      y = -this.height / 2;\n    let svgString: string[] = [],\n      strokeSvg: string[] = [],\n      clipPath = '',\n      imageRendering = '';\n    if (!element) {\n      return [];\n    }\n    if (this.hasCrop()) {\n      const clipPathId = uid();\n      svgString.push(\n        '<clipPath id=\"imageCrop_' + clipPathId + '\">\\n',\n        '\\t<rect x=\"' +\n          x +\n          '\" y=\"' +\n          y +\n          '\" width=\"' +\n          this.width +\n          '\" height=\"' +\n          this.height +\n          '\" />\\n',\n        '</clipPath>\\n',\n      );\n      clipPath = ' clip-path=\"url(#imageCrop_' + clipPathId + ')\" ';\n    }\n    if (!this.imageSmoothing) {\n      imageRendering = ' image-rendering=\"optimizeSpeed\"';\n    }\n    imageMarkup.push(\n      '\\t<image ',\n      'COMMON_PARTS',\n      `xlink:href=\"${this.getSvgSrc(true)}\" x=\"${x - this.cropX}\" y=\"${\n        y - this.cropY\n        // we're essentially moving origin of transformation from top/left corner to the center of the shape\n        // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left\n        // so that object's center aligns with container's left/top\n      }\" width=\"${\n        element.width || (element as HTMLImageElement).naturalWidth\n      }\" height=\"${\n        element.height || (element as HTMLImageElement).naturalHeight\n      }\"${imageRendering}${clipPath}></image>\\n`,\n    );\n\n    if (this.stroke || this.strokeDashArray) {\n      const origFill = this.fill;\n      this.fill = null;\n      strokeSvg = [\n        `\\t<rect x=\"${x}\" y=\"${y}\" width=\"${this.width}\" height=\"${\n          this.height\n        }\" style=\"${this.getSvgStyles()}\" />\\n`,\n      ];\n      this.fill = origFill;\n    }\n    if (this.paintFirst !== FILL) {\n      svgString = svgString.concat(strokeSvg, imageMarkup);\n    } else {\n      svgString = svgString.concat(imageMarkup, strokeSvg);\n    }\n    return svgString;\n  }\n\n  /**\n   * Returns source of an image\n   * @param {Boolean} filtered indicates if the src is needed for svg\n   * @return {String} Source of an image\n   */\n  getSrc(filtered?: boolean): string {\n    const element = filtered ? this._element : this._originalElement;\n    if (element) {\n      if ((element as HTMLCanvasElement).toDataURL) {\n        return (element as HTMLCanvasElement).toDataURL();\n      }\n\n      if (this.srcFromAttribute) {\n        return element.getAttribute('src') || '';\n      } else {\n        return (element as HTMLImageElement).src;\n      }\n    } else {\n      return this.src || '';\n    }\n  }\n\n  /**\n   * Alias for getSrc\n   * @param filtered\n   * @deprecated\n   */\n  getSvgSrc(filtered?: boolean) {\n    return this.getSrc(filtered);\n  }\n\n  /**\n   * Loads and sets source of an image\\\n   * **IMPORTANT**: It is recommended to abort loading tasks before calling this method to prevent race conditions and unnecessary networking\n   * @param {String} src Source string (URL)\n   * @param {LoadImageOptions} [options] Options object\n   */\n  setSrc(src: string, { crossOrigin, signal }: LoadImageOptions = {}) {\n    return loadImage(src, { crossOrigin, signal }).then((img) => {\n      typeof crossOrigin !== 'undefined' && this.set({ crossOrigin });\n      this.setElement(img);\n    });\n  }\n\n  /**\n   * Returns string representation of an instance\n   * @return {String} String representation of an instance\n   */\n  toString() {\n    return `#<Image: { src: \"${this.getSrc()}\" }>`;\n  }\n\n  applyResizeFilters() {\n    const filter = this.resizeFilter,\n      minimumScale = this.minimumScaleTrigger,\n      objectScale = this.getTotalObjectScaling(),\n      scaleX = objectScale.x,\n      scaleY = objectScale.y,\n      elementToFilter = this._filteredEl || this._originalElement;\n    if (this.group) {\n      this.set('dirty', true);\n    }\n    if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n      this._element = elementToFilter;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      this._lastScaleX = scaleX;\n      this._lastScaleY = scaleY;\n      return;\n    }\n    const canvasEl = createCanvasElementFor(elementToFilter),\n      { width, height } = elementToFilter;\n    this._element = canvasEl;\n    this._lastScaleX = filter.scaleX = scaleX;\n    this._lastScaleY = filter.scaleY = scaleY;\n    getFilterBackend().applyFilters(\n      [filter],\n      elementToFilter,\n      width,\n      height,\n      this._element,\n    );\n    this._filterScalingX = canvasEl.width / this._originalElement.width;\n    this._filterScalingY = canvasEl.height / this._originalElement.height;\n  }\n\n  /**\n   * Applies filters assigned to this image (from \"filters\" array) or from filter param\n   * @method applyFilters\n   * @param {Array} filters to be applied\n   * @param {Boolean} forResizing specify if the filter operation is a resize operation\n   */\n  applyFilters(\n    filters: BaseFilter<string, Record<string, any>>[] = this.filters || [],\n  ) {\n    filters = filters.filter((filter) => filter && !filter.isNeutralState());\n    this.set('dirty', true);\n\n    // needs to clear out or WEBGL will not resize correctly\n    this.removeTexture(`${this.cacheKey}_filtered`);\n\n    if (filters.length === 0) {\n      this._element = this._originalElement;\n      // this is unsafe and needs to be rethinkend\n      this._filteredEl = undefined;\n      this._filterScalingX = 1;\n      this._filterScalingY = 1;\n      return;\n    }\n\n    const imgElement = this._originalElement,\n      sourceWidth =\n        (imgElement as HTMLImageElement).naturalWidth || imgElement.width,\n      sourceHeight =\n        (imgElement as HTMLImageElement).naturalHeight || imgElement.height;\n\n    if (this._element === this._originalElement) {\n      // if the _element a reference to _originalElement\n      // we need to create a new element to host the filtered pixels\n      const canvasEl = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      this._element = canvasEl;\n      this._filteredEl = canvasEl;\n    } else if (this._filteredEl) {\n      // if the _element is it own element,\n      // and we also have a _filteredEl, then we clean up _filteredEl\n      // and we assign it to _element.\n      // in this way we invalidate the eventual old resize filtered element\n      this._element = this._filteredEl;\n      this._filteredEl\n        .getContext('2d')!\n        .clearRect(0, 0, sourceWidth, sourceHeight);\n      // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n      this._lastScaleX = 1;\n      this._lastScaleY = 1;\n    }\n    getFilterBackend().applyFilters(\n      filters,\n      this._originalElement,\n      sourceWidth,\n      sourceHeight,\n      this._element as HTMLCanvasElement,\n    );\n    if (\n      this._originalElement.width !== this._element.width ||\n      this._originalElement.height !== this._element.height\n    ) {\n      this._filterScalingX = this._element.width / this._originalElement.width;\n      this._filterScalingY =\n        this._element.height / this._originalElement.height;\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  _render(ctx: CanvasRenderingContext2D) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n      this.applyResizeFilters();\n    }\n    this._stroke(ctx);\n    this._renderPaintInOrder(ctx);\n  }\n\n  /**\n   * Paint the cached copy of the object on the target context.\n   * it will set the imageSmoothing for the draw operation\n   * @param {CanvasRenderingContext2D} ctx Context to render on\n   */\n  drawCacheOnCanvas(\n    this: TCachedFabricObject<FabricImage>,\n    ctx: CanvasRenderingContext2D,\n  ) {\n    ctx.imageSmoothingEnabled = this.imageSmoothing;\n    super.drawCacheOnCanvas(ctx);\n  }\n\n  /**\n   * Decide if the object should cache or not. Create its own cache level\n   * needsItsOwnCache should be used when the object drawing method requires\n   * a cache step. None of the fabric classes requires it.\n   * Generally you do not cache objects in groups because the group outside is cached.\n   * This is the special image version where we would like to avoid caching where possible.\n   * Essentially images do not benefit from caching. They may require caching, and in that\n   * case we do it. Also caching an image usually ends in a loss of details.\n   * A full performance audit should be done.\n   * @return {Boolean}\n   */\n  shouldCache() {\n    return this.needsItsOwnCache();\n  }\n\n  _renderFill(ctx: CanvasRenderingContext2D) {\n    const elementToDraw = this._element;\n    if (!elementToDraw) {\n      return;\n    }\n    const scaleX = this._filterScalingX,\n      scaleY = this._filterScalingY,\n      w = this.width,\n      h = this.height,\n      // crop values cannot be lesser than 0.\n      cropX = Math.max(this.cropX, 0),\n      cropY = Math.max(this.cropY, 0),\n      elWidth =\n        (elementToDraw as HTMLImageElement).naturalWidth || elementToDraw.width,\n      elHeight =\n        (elementToDraw as HTMLImageElement).naturalHeight ||\n        elementToDraw.height,\n      sX = cropX * scaleX,\n      sY = cropY * scaleY,\n      // the width height cannot exceed element width/height, starting from the crop offset.\n      sW = Math.min(w * scaleX, elWidth - sX),\n      sH = Math.min(h * scaleY, elHeight - sY),\n      x = -w / 2,\n      y = -h / 2,\n      maxDestW = Math.min(w, elWidth / scaleX - cropX),\n      maxDestH = Math.min(h, elHeight / scaleY - cropY);\n\n    elementToDraw &&\n      ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n  }\n\n  /**\n   * needed to check if image needs resize\n   * @private\n   */\n  _needsResize() {\n    const scale = this.getTotalObjectScaling();\n    return scale.x !== this._lastScaleX || scale.y !== this._lastScaleY;\n  }\n\n  /**\n   * @private\n   * @deprecated unused\n   */\n  _resetWidthHeight() {\n    this.set(this.getOriginalSize());\n  }\n\n  /**\n   * @private\n   * Set the width and the height of the image object, using the element or the\n   * options.\n   */\n  _setWidthHeight({ width, height }: Partial<TSize> = {}) {\n    const size = this.getOriginalSize();\n    this.width = width || size.width;\n    this.height = height || size.height;\n  }\n\n  /**\n   * Calculate offset for center and scale factor for the image in order to respect\n   * the preserveAspectRatio attribute\n   * @private\n   */\n  parsePreserveAspectRatioAttribute() {\n    const pAR = parsePreserveAspectRatioAttribute(\n        this.preserveAspectRatio || '',\n      ),\n      pWidth = this.width,\n      pHeight = this.height,\n      parsedAttributes = { width: pWidth, height: pHeight };\n    let rWidth = this._element.width,\n      rHeight = this._element.height,\n      scaleX = 1,\n      scaleY = 1,\n      offsetLeft = 0,\n      offsetTop = 0,\n      cropX = 0,\n      cropY = 0,\n      offset;\n\n    if (pAR && (pAR.alignX !== NONE || pAR.alignY !== NONE)) {\n      if (pAR.meetOrSlice === 'meet') {\n        scaleX = scaleY = findScaleToFit(this._element, parsedAttributes);\n        offset = (pWidth - rWidth * scaleX) / 2;\n        if (pAR.alignX === 'Min') {\n          offsetLeft = -offset;\n        }\n        if (pAR.alignX === 'Max') {\n          offsetLeft = offset;\n        }\n        offset = (pHeight - rHeight * scaleY) / 2;\n        if (pAR.alignY === 'Min') {\n          offsetTop = -offset;\n        }\n        if (pAR.alignY === 'Max') {\n          offsetTop = offset;\n        }\n      }\n      if (pAR.meetOrSlice === 'slice') {\n        scaleX = scaleY = findScaleToCover(this._element, parsedAttributes);\n        offset = rWidth - pWidth / scaleX;\n        if (pAR.alignX === 'Mid') {\n          cropX = offset / 2;\n        }\n        if (pAR.alignX === 'Max') {\n          cropX = offset;\n        }\n        offset = rHeight - pHeight / scaleY;\n        if (pAR.alignY === 'Mid') {\n          cropY = offset / 2;\n        }\n        if (pAR.alignY === 'Max') {\n          cropY = offset;\n        }\n        rWidth = pWidth / scaleX;\n        rHeight = pHeight / scaleY;\n      }\n    } else {\n      scaleX = pWidth / rWidth;\n      scaleY = pHeight / rHeight;\n    }\n    return {\n      width: rWidth,\n      height: rHeight,\n      scaleX,\n      scaleY,\n      offsetLeft,\n      offsetTop,\n      cropX,\n      cropY,\n    };\n  }\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  static CSS_CANVAS = 'canvas-img';\n\n  /**\n   * List of attribute names to account for when parsing SVG element (used by {@link FabricImage.fromElement})\n   * @static\n   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}\n   */\n  static ATTRIBUTE_NAMES = [\n    ...SHARED_ATTRIBUTES,\n    'x',\n    'y',\n    'width',\n    'height',\n    'preserveAspectRatio',\n    'xlink:href',\n    'crossOrigin',\n    'image-rendering',\n  ];\n\n  /**\n   * Creates an instance of FabricImage from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<FabricImage>}\n   */\n  static fromObject<T extends TOptions<SerializedImageProps>>(\n    { filters: f, resizeFilter: rf, src, crossOrigin, type, ...object }: T,\n    options?: Abortable,\n  ) {\n    return Promise.all([\n      loadImage(src!, { ...options, crossOrigin }),\n      f && enlivenObjects<BaseFilter<string>>(f, options),\n      // TODO: redundant - handled by enlivenObjectEnlivables\n      rf && enlivenObjects<BaseFilter<'Resize'>>([rf], options),\n      enlivenObjectEnlivables(object, options),\n    ]).then(([el, filters = [], [resizeFilter] = [], hydratedProps = {}]) => {\n      return new this(el, {\n        ...object,\n        // TODO: this creates a difference between image creation and restoring from JSON\n        src,\n        filters,\n        resizeFilter,\n        ...hydratedProps,\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {LoadImageOptions} [options] Options object\n   * @returns {Promise<FabricImage>}\n   */\n  static fromURL<T extends TOptions<ImageProps>>(\n    url: string,\n    { crossOrigin = null, signal }: LoadImageOptions = {},\n    imageOptions?: T,\n  ): Promise<FabricImage> {\n    return loadImage(url, { crossOrigin, signal }).then(\n      (img) => new this(img, imageOptions),\n    );\n  }\n\n  /**\n   * Returns {@link FabricImage} instance from an SVG element\n   * @static\n   * @param {HTMLElement} element Element to parse\n   * @param {Object} [options] Options object\n   * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @param {Function} callback Callback to execute when Image object is created\n   */\n  static async fromElement(\n    element: HTMLElement,\n    options: Abortable = {},\n    cssRules?: CSSRules,\n  ) {\n    const parsedAttributes = parseAttributes(\n      element,\n      this.ATTRIBUTE_NAMES,\n      cssRules,\n    );\n    return this.fromURL(\n      parsedAttributes['xlink:href'],\n      options,\n      parsedAttributes,\n    ).catch((err) => {\n      log('log', 'Unable to parse Image', err);\n      return null;\n    });\n  }\n}\n\nclassRegistry.setClass(FabricImage);\nclassRegistry.setSVGClass(FabricImage);\n", "import { svgNS } from './constants';\nimport {\n  parsePreserveAspectRatioAttribute,\n  parseUnit,\n} from '../util/misc/svgParsing';\nimport { svgViewBoxElementsRegEx, reViewBoxAttrValue } from './constants';\nimport { NONE } from '../constants';\n\nexport type ParsedViewboxTransform = Partial<{\n  width: number;\n  height: number;\n  minX: number;\n  minY: number;\n  viewBoxWidth: number;\n  viewBoxHeight: number;\n}>;\n\n/**\n * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements\n */\nexport function applyViewboxTransform(\n  element: Element,\n): ParsedViewboxTransform {\n  if (!svgViewBoxElementsRegEx.test(element.nodeName)) {\n    return {};\n  }\n  const viewBoxAttr: string | null = element.getAttribute('viewBox');\n  let scaleX = 1;\n  let scaleY = 1;\n  let minX = 0;\n  let minY = 0;\n  let matrix;\n  let el;\n  const widthAttr = element.getAttribute('width');\n  const heightAttr = element.getAttribute('height');\n  const x = element.getAttribute('x') || 0;\n  const y = element.getAttribute('y') || 0;\n  const goodViewbox = viewBoxAttr && reViewBoxAttrValue.test(viewBoxAttr);\n  const missingViewBox = !goodViewbox;\n  const missingDimAttr =\n    !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%';\n\n  let translateMatrix = '';\n  let widthDiff = 0;\n  let heightDiff = 0;\n\n  if (missingViewBox) {\n    if (\n      (x || y) &&\n      element.parentNode &&\n      element.parentNode.nodeName !== '#document'\n    ) {\n      translateMatrix =\n        ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n      matrix = (element.getAttribute('transform') || '') + translateMatrix;\n      element.setAttribute('transform', matrix);\n      element.removeAttribute('x');\n      element.removeAttribute('y');\n    }\n  }\n\n  if (missingViewBox && missingDimAttr) {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const parsedDim: ParsedViewboxTransform = {\n    width: 0,\n    height: 0,\n  };\n\n  if (missingViewBox) {\n    parsedDim.width = parseUnit(widthAttr!);\n    parsedDim.height = parseUnit(heightAttr!);\n    // set a transform for elements that have x y and are inner(only) SVGs\n    return parsedDim;\n  }\n\n  const pasedViewBox = viewBoxAttr.match(reViewBoxAttrValue)!;\n  minX = -parseFloat(pasedViewBox[1]);\n  minY = -parseFloat(pasedViewBox[2]);\n  const viewBoxWidth = parseFloat(pasedViewBox[3]);\n  const viewBoxHeight = parseFloat(pasedViewBox[4]);\n  parsedDim.minX = minX;\n  parsedDim.minY = minY;\n  parsedDim.viewBoxWidth = viewBoxWidth;\n  parsedDim.viewBoxHeight = viewBoxHeight;\n  if (!missingDimAttr) {\n    parsedDim.width = parseUnit(widthAttr);\n    parsedDim.height = parseUnit(heightAttr);\n    scaleX = parsedDim.width / viewBoxWidth;\n    scaleY = parsedDim.height / viewBoxHeight;\n  } else {\n    parsedDim.width = viewBoxWidth;\n    parsedDim.height = viewBoxHeight;\n  }\n\n  // default is to preserve aspect ratio\n  const preserveAspectRatio = parsePreserveAspectRatioAttribute(\n    element.getAttribute('preserveAspectRatio') || '',\n  );\n  if (preserveAspectRatio.alignX !== NONE) {\n    //translate all container for the effect of Mid, Min, Max\n    if (preserveAspectRatio.meetOrSlice === 'meet') {\n      scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;\n      // calculate additional translation to move the viewbox\n    }\n    if (preserveAspectRatio.meetOrSlice === 'slice') {\n      scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;\n      // calculate additional translation to move the viewbox\n    }\n    widthDiff = parsedDim.width - viewBoxWidth * scaleX;\n    heightDiff = parsedDim.height - viewBoxHeight * scaleX;\n    if (preserveAspectRatio.alignX === 'Mid') {\n      widthDiff /= 2;\n    }\n    if (preserveAspectRatio.alignY === 'Mid') {\n      heightDiff /= 2;\n    }\n    if (preserveAspectRatio.alignX === 'Min') {\n      widthDiff = 0;\n    }\n    if (preserveAspectRatio.alignY === 'Min') {\n      heightDiff = 0;\n    }\n  }\n\n  if (\n    scaleX === 1 &&\n    scaleY === 1 &&\n    minX === 0 &&\n    minY === 0 &&\n    x === 0 &&\n    y === 0\n  ) {\n    return parsedDim;\n  }\n  if ((x || y) && element.parentNode!.nodeName !== '#document') {\n    translateMatrix =\n      ' translate(' + parseUnit(x || '0') + ' ' + parseUnit(y || '0') + ') ';\n  }\n\n  matrix =\n    translateMatrix +\n    ' matrix(' +\n    scaleX +\n    ' 0' +\n    ' 0 ' +\n    scaleY +\n    ' ' +\n    (minX * scaleX + widthDiff) +\n    ' ' +\n    (minY * scaleY + heightDiff) +\n    ') ';\n  // seems unused.\n  // parsedDim.viewboxTransform = parseTransformAttribute(matrix);\n  if (element.nodeName === 'svg') {\n    el = element.ownerDocument.createElementNS(svgNS, 'g');\n    // element.firstChild != null\n    while (element.firstChild) {\n      el.appendChild(element.firstChild);\n    }\n    element.appendChild(el);\n  } else {\n    el = element;\n    el.removeAttribute('x');\n    el.removeAttribute('y');\n    matrix = el.getAttribute('transform') + matrix;\n  }\n  el.setAttribute('transform', matrix);\n  return parsedDim;\n}\n", "export const getTagName = (node: Element) => node.tagName.replace('svg:', '');\n", "import { svgInvalidAncestors } from './constants';\nimport { getSvgRegex } from './getSvgRegex';\nimport { getTagName } from './getTagName';\n\nconst svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);\n\nexport function hasInvalidAncestor(element: Element) {\n  let _element: Element | null = element;\n  while (_element && (_element = _element.parentElement)) {\n    if (\n      _element &&\n      _element.nodeName &&\n      svgInvalidAncestorsRegEx.test(getTagName(_element)) &&\n      !_element.getAttribute('instantiated_by_use')\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n", "export function getMultipleNodes(\n  doc: Document,\n  nodeNames: string[],\n): Element[] {\n  let nodeName,\n    nodeArray: Element[] = [],\n    nodeList,\n    i,\n    len;\n  for (i = 0, len = nodeNames.length; i < len; i++) {\n    nodeName = nodeNames[i];\n    nodeList = doc.getElementsByTagNameNS(\n      'http://www.w3.org/2000/svg',\n      nodeName,\n    );\n    nodeArray = nodeArray.concat(Array.from(nodeList));\n  }\n  return nodeArray;\n}\n", "const gradientsAttrs = [\n  'gradientTransform',\n  'x1',\n  'x2',\n  'y1',\n  'y2',\n  'gradientUnits',\n  'cx',\n  'cy',\n  'r',\n  'fx',\n  'fy',\n];\nconst xlinkAttr = 'xlink:href';\n\nexport function recursivelyParseGradientsXlink(\n  doc: Document,\n  gradient: Element,\n) {\n  const xLink = gradient.getAttribute(xlinkAttr)?.slice(1) || '',\n    referencedGradient = doc.getElementById(xLink);\n  if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {\n    recursivelyParseGradientsXlink(doc, referencedGradient as Element);\n  }\n  if (referencedGradient) {\n    gradientsAttrs.forEach((attr) => {\n      const value = referencedGradient.getAttribute(attr);\n      if (!gradient.hasAttribute(attr) && value) {\n        gradient.setAttribute(attr, value);\n      }\n    });\n    if (!gradient.children.length) {\n      const referenceClone = referencedGradient.cloneNode(true);\n      while (referenceClone.firstChild) {\n        gradient.appendChild(referenceClone.firstChild);\n      }\n    }\n  }\n  gradient.removeAttribute(xlinkAttr);\n}\n", "import { getMultipleNodes } from './getMultipleNodes';\nimport { recursivelyParseGradientsXlink } from './recursivelyParseGradientsXlink';\n\nconst tagArray = [\n  'linearGradient',\n  'radialGradient',\n  'svg:linearGradient',\n  'svg:radialGradient',\n];\n\n/**\n * Parses an SVG document, returning all of the gradient declarations found in it\n * @param {SVGDocument} doc SVG document to parse\n * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element\n */\nexport function getGradientDefs(\n  doc: Document,\n): Record<string, SVGGradientElement> {\n  const elList = getMultipleNodes(doc, tagArray);\n  const gradientDefs: Record<string, SVGGradientElement> = {};\n  let j = elList.length;\n  while (j--) {\n    const el = elList[j];\n    if (el.getAttribute('xlink:href')) {\n      recursivelyParseGradientsXlink(doc, el);\n    }\n    const id = el.getAttribute('id');\n    if (id) {\n      gradientDefs[id] = el as SVGGradientElement;\n    }\n  }\n  return gradientDefs;\n}\n", "import type { CSSRules } from './typedefs';\n\n/**\n * Returns CSS rules for a given SVG document\n * @param {HTMLElement} doc SVG document to parse\n * @return {Object} CSS rules of this document\n */\nexport function getCSSRules(doc: Document) {\n  const styles = doc.getElementsByTagName('style');\n  let i;\n  let len;\n  const allRules: CSSRules = {};\n\n  // very crude parsing of style contents\n  for (i = 0, len = styles.length; i < len; i++) {\n    const styleContents = (styles[i].textContent || '').replace(\n      // remove comments\n      /\\/\\*[\\s\\S]*?\\*\\//g,\n      '',\n    );\n\n    if (styleContents.trim() === '') {\n      continue;\n    }\n    // recovers all the rule in this form `body { style code... }`\n    // rules = styleContents.match(/[^{]*\\{[\\s\\S]*?\\}/g);\n    styleContents\n      .split('}')\n      // remove empty rules and remove everything if we didn't split in at least 2 pieces\n      .filter((rule, index, array) => array.length > 1 && rule.trim())\n      // at this point we have hopefully an array of rules `body { style code... `\n      .forEach((rule) => {\n        // if there is more than one opening bracket and the rule starts with '@', it is likely\n        // a nested at-rule like @media, @supports, @scope, etc. Ignore these as the code below\n        // can not handle it.\n        if (\n          (rule.match(/{/g) || []).length > 1 &&\n          rule.trim().startsWith('@')\n        ) {\n          return;\n        }\n\n        const match = rule.split('{'),\n          ruleObj: Record<string, string> = {},\n          declaration = match[1].trim(),\n          propertyValuePairs = declaration.split(';').filter(function (pair) {\n            return pair.trim();\n          });\n\n        for (i = 0, len = propertyValuePairs.length; i < len; i++) {\n          const pair = propertyValuePairs[i].split(':'),\n            property = pair[0].trim(),\n            value = pair[1].trim();\n          ruleObj[property] = value;\n        }\n        rule = match[0].trim();\n        rule.split(',').forEach((_rule) => {\n          _rule = _rule.replace(/^svg/i, '').trim();\n          if (_rule === '') {\n            return;\n          }\n          allRules[_rule] = {\n            ...(allRules[_rule] || {}),\n            ...ruleObj,\n          };\n        });\n      });\n  }\n  return allRules;\n}\n", "import { Gradient } from '../gradient/Gradient';\nimport { Group } from '../shapes/Group';\nimport { FabricImage } from '../shapes/Image';\nimport { classRegistry } from '../ClassRegistry';\nimport {\n  invertTransform,\n  multiplyTransformMatrices,\n  qrDecompose,\n} from '../util/misc/matrix';\nimport { removeTransformMatrixForSvgParsing } from '../util/transform_matrix_removal';\nimport type { FabricObject } from '../shapes/Object/FabricObject';\nimport { Point } from '../Point';\nimport { CENTER, FILL, STROKE } from '../constants';\nimport { getGradientDefs } from './getGradientDefs';\nimport { getCSSRules } from './getCSSRules';\nimport type { LoadImageOptions } from '../util';\nimport type { CSSRules, TSvgReviverCallback } from './typedefs';\nimport type { ParsedViewboxTransform } from './applyViewboxTransform';\nimport type { SVGOptions } from '../gradient';\nimport { getTagName } from './getTagName';\nimport { parseTransformAttribute } from './parseTransformAttribute';\n\nconst findTag = (el: Element) =>\n  classRegistry.getSVGClass(getTagName(el).toLowerCase());\n\ntype StorageType = {\n  fill: SVGGradientElement;\n  stroke: SVGGradientElement;\n  clipPath: Element[];\n};\n\ntype NotParsedFabricObject = FabricObject & {\n  fill: string;\n  stroke: string;\n  clipPath?: string;\n  clipRule?: CanvasFillRule;\n};\n\nexport class ElementsParser {\n  declare elements: Element[];\n  declare options: LoadImageOptions & ParsedViewboxTransform;\n  declare reviver?: TSvgReviverCallback;\n  declare regexUrl: RegExp;\n  declare doc: Document;\n  declare clipPaths: Record<string, Element[]>;\n  declare gradientDefs: Record<string, SVGGradientElement>;\n  declare cssRules: CSSRules;\n\n  constructor(\n    elements: Element[],\n    options: LoadImageOptions & ParsedViewboxTransform,\n    reviver: TSvgReviverCallback | undefined,\n    doc: Document,\n    clipPaths: Record<string, Element[]>,\n  ) {\n    this.elements = elements;\n    this.options = options;\n    this.reviver = reviver;\n    this.regexUrl = /^url\\(['\"]?#([^'\"]+)['\"]?\\)/g;\n    this.doc = doc;\n    this.clipPaths = clipPaths;\n    this.gradientDefs = getGradientDefs(doc);\n    this.cssRules = getCSSRules(doc);\n  }\n\n  parse(): Promise<Array<FabricObject | null>> {\n    return Promise.all(\n      this.elements.map((element) => this.createObject(element)),\n    );\n  }\n\n  async createObject(el: Element): Promise<FabricObject | null> {\n    const klass = findTag(el);\n    if (klass) {\n      const obj: NotParsedFabricObject = await klass.fromElement(\n        el,\n        this.options,\n        this.cssRules,\n      );\n      this.resolveGradient(obj, el, FILL);\n      this.resolveGradient(obj, el, STROKE);\n      if (obj instanceof FabricImage && obj._originalElement) {\n        removeTransformMatrixForSvgParsing(\n          obj,\n          obj.parsePreserveAspectRatioAttribute(),\n        );\n      } else {\n        removeTransformMatrixForSvgParsing(obj);\n      }\n      await this.resolveClipPath(obj, el);\n      this.reviver && this.reviver(el, obj);\n      return obj;\n    }\n    return null;\n  }\n\n  extractPropertyDefinition(\n    obj: NotParsedFabricObject,\n    property: 'fill' | 'stroke' | 'clipPath',\n    storage: Record<string, StorageType[typeof property]>,\n  ): StorageType[typeof property] | undefined {\n    const value = obj[property]!,\n      regex = this.regexUrl;\n    if (!regex.test(value)) {\n      return undefined;\n    }\n    // verify: can we remove the 'g' flag? and remove lastIndex changes?\n    regex.lastIndex = 0;\n    // we passed the regex test, so we know is not null;\n    const id = regex.exec(value)![1];\n    regex.lastIndex = 0;\n    // @todo fix this\n    return storage[id];\n  }\n\n  resolveGradient(\n    obj: NotParsedFabricObject,\n    el: Element,\n    property: 'fill' | 'stroke',\n  ) {\n    const gradientDef = this.extractPropertyDefinition(\n      obj,\n      property,\n      this.gradientDefs,\n    ) as SVGGradientElement;\n    if (gradientDef) {\n      const opacityAttr = el.getAttribute(property + '-opacity');\n      const gradient = Gradient.fromElement(gradientDef, obj, {\n        ...this.options,\n        opacity: opacityAttr,\n      } as SVGOptions);\n      obj.set(property, gradient);\n    }\n  }\n\n  // TODO: resolveClipPath could be run once per clippath with minor work per object.\n  // is a refactor that i m not sure is worth on this code\n  async resolveClipPath(\n    obj: NotParsedFabricObject,\n    usingElement: Element,\n    exactOwner?: Element,\n  ) {\n    const clipPathElements = this.extractPropertyDefinition(\n      obj,\n      'clipPath',\n      this.clipPaths,\n    ) as Element[];\n    if (clipPathElements) {\n      const objTransformInv = invertTransform(obj.calcTransformMatrix());\n      const clipPathTag = clipPathElements[0].parentElement!;\n      let clipPathOwner = usingElement;\n      while (\n        !exactOwner &&\n        clipPathOwner.parentElement &&\n        clipPathOwner.getAttribute('clip-path') !== obj.clipPath\n      ) {\n        clipPathOwner = clipPathOwner.parentElement;\n      }\n      // move the clipPath tag as sibling to the real element that is using it\n      clipPathOwner.parentElement!.appendChild(clipPathTag!);\n\n      // this multiplication order could be opposite.\n      // but i don't have an svg to test it\n      // at the first SVG that has a transform on both places and is misplaced\n      // try to invert this multiplication order\n      const finalTransform = parseTransformAttribute(\n        `${clipPathOwner.getAttribute('transform') || ''} ${\n          clipPathTag.getAttribute('originalTransform') || ''\n        }`,\n      );\n\n      clipPathTag.setAttribute(\n        'transform',\n        `matrix(${finalTransform.join(',')})`,\n      );\n\n      const container = await Promise.all(\n        clipPathElements.map((clipPathElement) => {\n          return findTag(clipPathElement)\n            .fromElement(clipPathElement, this.options, this.cssRules)\n            .then((enlivedClippath: NotParsedFabricObject) => {\n              removeTransformMatrixForSvgParsing(enlivedClippath);\n              enlivedClippath.fillRule = enlivedClippath.clipRule!;\n              delete enlivedClippath.clipRule;\n              return enlivedClippath;\n            });\n        }),\n      );\n      const clipPath =\n        container.length === 1 ? container[0] : new Group(container);\n      const gTransform = multiplyTransformMatrices(\n        objTransformInv,\n        clipPath.calcTransformMatrix(),\n      );\n      if (clipPath.clipPath) {\n        await this.resolveClipPath(\n          clipPath,\n          clipPathOwner,\n          // this is tricky.\n          // it tries to differentiate from when clipPaths are inherited by outside groups\n          // or when are really clipPaths referencing other clipPaths\n          clipPathTag.getAttribute('clip-path') ? clipPathOwner : undefined,\n        );\n      }\n      const { scaleX, scaleY, angle, skewX, translateX, translateY } =\n        qrDecompose(gTransform);\n      clipPath.set({\n        flipX: false,\n        flipY: false,\n      });\n      clipPath.set({\n        scaleX,\n        scaleY,\n        angle,\n        skewX,\n        skewY: 0,\n      });\n      clipPath.setPositionByOrigin(\n        new Point(translateX, translateY),\n        CENTER,\n        CENTER,\n      );\n      obj.clipPath = clipPath;\n    } else {\n      // if clip-path does not resolve to any element, delete the property.\n      delete obj.clipPath;\n      return;\n    }\n  }\n}\n", "import { applyViewboxTransform } from './applyViewboxTransform';\nimport { svgValidTagNamesRegEx } from './constants';\nimport { hasInvalidAncestor } from './hasInvalidAncestor';\nimport { parseUseDirectives } from './parseUseDirectives';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { ElementsParser } from './elements_parser';\nimport { log, SignalAbortedError } from '../util/internals/console';\nimport { getTagName } from './getTagName';\n\nconst isValidSvgTag = (el: Element) =>\n  svgValidTagNamesRegEx.test(getTagName(el));\n\nexport const createEmptyResponse = (): SVGParsingOutput => ({\n  objects: [],\n  elements: [],\n  options: {},\n  allElements: [],\n});\n\n/**\n * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback\n * @static\n * @function\n * @memberOf fabric\n * @param {HTMLElement} doc SVG document to parse\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n * @return {SVGParsingOutput}\n * {@link SVGParsingOutput} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n */\nexport async function parseSVGDocument(\n  doc: Document,\n  reviver?: TSvgReviverCallback,\n  { crossOrigin, signal }: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  if (signal && signal.aborted) {\n    log('log', new SignalAbortedError('parseSVGDocument'));\n    // this is an unhappy path, we dont care about speed\n    return createEmptyResponse();\n  }\n  const documentElement = doc.documentElement;\n  parseUseDirectives(doc);\n\n  const descendants = Array.from(documentElement.getElementsByTagName('*')),\n    options = {\n      ...applyViewboxTransform(documentElement),\n      crossOrigin,\n      signal,\n    };\n  const elements = descendants.filter((el) => {\n    applyViewboxTransform(el);\n    return isValidSvgTag(el) && !hasInvalidAncestor(el); // http://www.w3.org/TR/SVG/struct.html#DefsElement\n  });\n  if (!elements || (elements && !elements.length)) {\n    return {\n      ...createEmptyResponse(),\n      options,\n      allElements: descendants,\n    };\n  }\n  const localClipPaths: Record<string, Element[]> = {};\n  descendants\n    .filter((el) => getTagName(el) === 'clipPath')\n    .forEach((el) => {\n      el.setAttribute('originalTransform', el.getAttribute('transform') || '');\n      const id = el.getAttribute('id')!;\n      localClipPaths[id] = Array.from(el.getElementsByTagName('*')).filter(\n        (el) => isValidSvgTag(el),\n      );\n    });\n\n  // Precedence of rules:   style > class > attribute\n  const elementParser = new ElementsParser(\n    elements,\n    options,\n    reviver,\n    doc,\n    localClipPaths,\n  );\n\n  const instances = await elementParser.parse();\n\n  return {\n    objects: instances,\n    elements,\n    options,\n    allElements: descendants,\n  };\n}\n", "import { svgNS } from './constants';\nimport { getMultipleNodes } from './getMultipleNodes';\nimport { applyViewboxTransform } from './applyViewboxTransform';\nimport { parseStyleString } from './parseStyleString';\n\nexport function parseUseDirectives(doc: Document) {\n  const nodelist = getMultipleNodes(doc, ['use', 'svg:use']);\n  const skipAttributes = ['x', 'y', 'xlink:href', 'href', 'transform'];\n\n  for (const useElement of nodelist) {\n    const useAttributes: NamedNodeMap = useElement.attributes;\n\n    const useAttrMap: Record<string, string> = {};\n    for (const attr of useAttributes) {\n      attr.value && (useAttrMap[attr.name] = attr.value);\n    }\n\n    const xlink = (useAttrMap['xlink:href'] || useAttrMap.href || '').slice(1);\n\n    if (xlink === '') {\n      return;\n    }\n    const referencedElement = doc.getElementById(xlink);\n    if (referencedElement === null) {\n      // if we can't find the target of the xlink, consider this use tag bad, similar to no xlink\n      return;\n    }\n    let clonedOriginal = referencedElement.cloneNode(true) as Element;\n\n    const originalAttributes: NamedNodeMap = clonedOriginal.attributes;\n\n    const originalAttrMap: Record<string, string> = {};\n    for (const attr of originalAttributes) {\n      attr.value && (originalAttrMap[attr.name] = attr.value);\n    }\n\n    // Transform attribute needs to be merged in a particular way\n    const { x = 0, y = 0, transform = '' } = useAttrMap;\n    const currentTrans = `${transform} ${\n      originalAttrMap.transform || ''\n    } translate(${x}, ${y})`;\n\n    applyViewboxTransform(clonedOriginal);\n\n    if (/^svg$/i.test(clonedOriginal.nodeName)) {\n      // if is an SVG, create a group and apply all the attributes on top of it\n      const el3 = clonedOriginal.ownerDocument.createElementNS(svgNS, 'g');\n      Object.entries(originalAttrMap).forEach(([name, value]) =>\n        el3.setAttributeNS(svgNS, name, value),\n      );\n      el3.append(...clonedOriginal.childNodes);\n      clonedOriginal = el3;\n    }\n\n    for (const attr of useAttributes) {\n      if (!attr) {\n        continue;\n      }\n      const { name, value } = attr;\n      if (skipAttributes.includes(name)) {\n        continue;\n      }\n\n      if (name === 'style') {\n        // when use has a style, merge the two styles, with the ref being priority (not use)\n        // priority is by feature. an attribute for fill on the original element\n        // will overwrite the fill in style or attribute for tha use\n        const styleRecord: Record<string, any> = {};\n        parseStyleString(value!, styleRecord);\n        // cleanup styleRecord from attributes of original\n        Object.entries(originalAttrMap).forEach(([name, value]) => {\n          styleRecord[name] = value;\n        });\n        // now we can put in the style of the original that will overwrite the original attributes\n        parseStyleString(originalAttrMap.style || '', styleRecord);\n        const mergedStyles = Object.entries(styleRecord)\n          .map((entry) => entry.join(':'))\n          .join(';');\n        clonedOriginal.setAttribute(name, mergedStyles);\n      } else {\n        // set the attribute from use element only if the original does not have it already\n        !originalAttrMap[name] && clonedOriginal.setAttribute(name, value!);\n      }\n    }\n\n    clonedOriginal.setAttribute('transform', currentTrans);\n    clonedOriginal.setAttribute('instantiated_by_use', '1');\n    clonedOriginal.removeAttribute('id');\n    useElement.parentNode!.replaceChild(clonedOriginal, useElement);\n  }\n}\n", "import { getFabricWindow } from '../env';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\nimport { parseSVGDocument } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\n\n/**\n * Takes string corresponding to an SVG document, and parses it into a set of fabric objects\n * @memberOf fabric\n * @param {String} string representing the svg\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromString(\n  string: string,\n  reviver?: TSvgReviverCallback,\n  options?: LoadImageOptions,\n): Promise<SVGParsingOutput> {\n  const parser = new (getFabricWindow().DOMParser)(),\n    // should we use `image/svg+xml` here?\n    doc = parser.parseFromString(string.trim(), 'text/xml');\n  return parseSVGDocument(doc, reviver, options);\n}\n", "import { request } from '../util/internals/dom_request';\nimport { parseSVGDocument, createEmptyResponse } from './parseSVGDocument';\nimport type { SVGParsingOutput, TSvgReviverCallback } from './typedefs';\nimport type { LoadImageOptions } from '../util/misc/objectEnlive';\n\n/**\n * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.\n * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)\n * @memberOf fabric\n * @param {string} url where the SVG is\n * @param {TSvgParsedCallback} callback Invoked when the parsing is done, with null if parsing wasn't possible with the list of svg nodes.\n * {@link TSvgParsedCallback} also receives `allElements` array as the last argument. This is the full list of svg nodes available in the document.\n * You may want to use it if you are trying to regroup the objects as they were originally grouped in the SVG. ( This was the reason why it was added )\n * @param {TSvgReviverCallback} [reviver] Extra callback for further parsing of SVG elements, called after each fabric object has been created.\n * Takes as input the original svg element and the generated `FabricObject` as arguments. Used to inspect extra properties not parsed by fabric,\n * or extra custom manipulation\n * @param {Object} [options] Object containing options for parsing\n * @param {String} [options.crossOrigin] crossOrigin setting to use for external resources\n * @param {AbortSignal} [options.signal] handle aborting, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n */\nexport function loadSVGFromURL(\n  url: string,\n  reviver?: TSvgReviverCallback,\n  options: LoadImageOptions = {},\n): Promise<SVGParsingOutput> {\n  // need to handle error properly\n  return new Promise<Document>((resolve, reject) => {\n    const onComplete = (r: XMLHttpRequest) => {\n      const xml = r.responseXML;\n      if (xml) {\n        resolve(xml);\n      }\n      reject();\n    };\n\n    request(url.replace(/^\\n\\s*/, '').trim(), {\n      onComplete,\n      signal: options.signal,\n    });\n  })\n    .then((parsedDoc) => parseSVGDocument(parsedDoc, reviver, options))\n    .catch(() => {\n      // this is an unhappy path, we dont care about speed\n      return createEmptyResponse();\n    });\n}\n", "import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Polyline } from '../shapes/Polyline';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n  TransformActionHandler,\n} from '../EventTypeDefs';\nimport { wrapWithFireEvent } from './wrapWithFireEvent';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport { MODIFY_POLY } from '../constants';\n\nconst ACTION_NAME: TModificationEvents = MODIFY_POLY;\n\ntype TTransformAnchor = Transform & { pointIndex: number };\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nexport const createPolyPositionHandler = (pointIndex: number) => {\n  return function (dim: Point, finalMatrix: TMat2D, polyObject: Polyline) {\n    const { points, pathOffset } = polyObject;\n    return new Point(points[pointIndex])\n      .subtract(pathOffset)\n      .transform(\n        multiplyTransformMatrices(\n          polyObject.getViewportTransform(),\n          polyObject.calcTransformMatrix(),\n        ),\n      );\n  };\n};\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nexport const polyActionHandler = (\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) => {\n  const { target, pointIndex } = transform;\n  const poly = target as Polyline;\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    poly.calcOwnMatrix(),\n  );\n\n  poly.points[pointIndex] = mouseLocalPosition.add(poly.pathOffset);\n  poly.setDimensions();\n\n  return true;\n};\n\n/**\n * Keep the polygon in the same position when we change its `width`/`height`/`top`/`left`.\n */\nexport const factoryPolyActionHandler = (\n  pointIndex: number,\n  fn: TransformActionHandler<TTransformAnchor>,\n) => {\n  return function (\n    eventData: TPointerEvent,\n    transform: Transform,\n    x: number,\n    y: number,\n  ) {\n    const poly = transform.target as Polyline,\n      anchorPoint = new Point(\n        poly.points[(pointIndex > 0 ? pointIndex : poly.points.length) - 1],\n      ),\n      anchorPointInParentPlane = anchorPoint\n        .subtract(poly.pathOffset)\n        .transform(poly.calcOwnMatrix()),\n      actionPerformed = fn(eventData, { ...transform, pointIndex }, x, y);\n\n    const newAnchorPointInParentPlane = anchorPoint\n      .subtract(poly.pathOffset)\n      .transform(poly.calcOwnMatrix());\n\n    const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n    poly.left -= diff.x;\n    poly.top -= diff.y;\n\n    return actionPerformed;\n  };\n};\n\nexport const createPolyActionHandler = (pointIndex: number) =>\n  wrapWithFireEvent(\n    ACTION_NAME,\n    factoryPolyActionHandler(pointIndex, polyActionHandler),\n  );\n\nexport function createPolyControls(\n  poly: Polyline,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  numOfControls: number,\n  options?: Partial<Control>,\n): Record<string, Control>;\nexport function createPolyControls(\n  arg0: number | Polyline,\n  options: Partial<Control> = {},\n) {\n  const controls = {} as Record<string, Control>;\n  for (\n    let idx = 0;\n    idx < (typeof arg0 === 'number' ? arg0 : arg0.points.length);\n    idx++\n  ) {\n    controls[`p${idx}`] = new Control({\n      actionName: ACTION_NAME,\n      positionHandler: createPolyPositionHandler(idx),\n      actionHandler: createPolyActionHandler(idx),\n      ...options,\n    });\n  }\n  return controls;\n}\n", "import { Point } from '../Point';\nimport { Control } from './Control';\nimport type { TMat2D } from '../typedefs';\nimport type { Path } from '../shapes/Path';\nimport { multiplyTransformMatrices } from '../util/misc/matrix';\nimport type {\n  TModificationEvents,\n  TPointerEvent,\n  Transform,\n} from '../EventTypeDefs';\nimport { sendPointToPlane } from '../util/misc/planeChange';\nimport type { TSimpleParseCommandType } from '../util/path/typedefs';\nimport type { ControlRenderingStyleOverride } from './controlRendering';\nimport { fireEvent } from './fireEvent';\nimport { commonEventInfo } from './util';\n\nconst ACTION_NAME: TModificationEvents = 'modifyPath' as const;\n\ntype TTransformAnchor = Transform;\n\nexport type PathPointControlStyle = {\n  controlFill?: string;\n  controlStroke?: string;\n  connectionDashArray?: number[];\n};\n\nconst calcPathPointPosition = (\n  pathObject: Path,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n  const command = path[commandIndex];\n  return new Point(\n    (command[pointIndex] as number) - pathOffset.x,\n    (command[pointIndex + 1] as number) - pathOffset.y,\n  ).transform(\n    multiplyTransformMatrices(\n      pathObject.getViewportTransform(),\n      pathObject.calcTransformMatrix(),\n    ),\n  );\n};\n\nconst movePathPoint = (\n  pathObject: Path,\n  x: number,\n  y: number,\n  commandIndex: number,\n  pointIndex: number,\n) => {\n  const { path, pathOffset } = pathObject;\n\n  const anchorCommand =\n    path[(commandIndex > 0 ? commandIndex : path.length) - 1];\n  const anchorPoint = new Point(\n    anchorCommand[pointIndex] as number,\n    anchorCommand[pointIndex + 1] as number,\n  );\n\n  const anchorPointInParentPlane = anchorPoint\n    .subtract(pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const mouseLocalPosition = sendPointToPlane(\n    new Point(x, y),\n    undefined,\n    pathObject.calcOwnMatrix(),\n  );\n\n  path[commandIndex][pointIndex] = mouseLocalPosition.x + pathOffset.x;\n  path[commandIndex][pointIndex + 1] = mouseLocalPosition.y + pathOffset.y;\n  pathObject.setDimensions();\n\n  const newAnchorPointInParentPlane = anchorPoint\n    .subtract(pathObject.pathOffset)\n    .transform(pathObject.calcOwnMatrix());\n\n  const diff = newAnchorPointInParentPlane.subtract(anchorPointInParentPlane);\n  pathObject.left -= diff.x;\n  pathObject.top -= diff.y;\n  pathObject.set('dirty', true);\n  return true;\n};\n\n/**\n * This function locates the controls.\n * It'll be used both for drawing and for interaction.\n */\nfunction pathPositionHandler(\n  this: PathPointControl,\n  dim: Point,\n  finalMatrix: TMat2D,\n  pathObject: Path,\n) {\n  const { commandIndex, pointIndex } = this;\n  return calcPathPointPosition(pathObject, commandIndex, pointIndex);\n}\n\n/**\n * This function defines what the control does.\n * It'll be called on every mouse move after a control has been clicked and is being dragged.\n * The function receives as argument the mouse event, the current transform object\n * and the current position in canvas coordinate `transform.target` is a reference to the\n * current object being transformed.\n */\nfunction pathActionHandler(\n  this: PathPointControl,\n  eventData: TPointerEvent,\n  transform: TTransformAnchor,\n  x: number,\n  y: number,\n) {\n  const { target } = transform;\n  const { commandIndex, pointIndex } = this;\n  const actionPerformed = movePathPoint(\n    target as Path,\n    x,\n    y,\n    commandIndex,\n    pointIndex,\n  );\n  if (actionPerformed) {\n    fireEvent(this.actionName as TModificationEvents, {\n      ...commonEventInfo(eventData, transform, x, y),\n      commandIndex,\n      pointIndex,\n    });\n  }\n  return actionPerformed;\n}\n\nconst indexFromPrevCommand = (previousCommandType: TSimpleParseCommandType) =>\n  previousCommandType === 'C' ? 5 : previousCommandType === 'Q' ? 3 : 1;\n\nclass PathPointControl extends Control {\n  declare commandIndex: number;\n  declare pointIndex: number;\n  declare controlFill: string;\n  declare controlStroke: string;\n  constructor(options?: Partial<PathPointControl>) {\n    super(options);\n  }\n\n  render(\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const overrides: ControlRenderingStyleOverride = {\n      ...styleOverride,\n      cornerColor: this.controlFill,\n      cornerStrokeColor: this.controlStroke,\n      transparentCorners: !this.controlFill,\n    };\n    super.render(ctx, left, top, overrides, fabricObject);\n  }\n}\n\nclass PathControlPointControl extends PathPointControl {\n  declare connectionDashArray?: number[];\n  declare connectToCommandIndex: number;\n  declare connectToPointIndex: number;\n  constructor(options?: Partial<PathControlPointControl>) {\n    super(options);\n  }\n\n  render(\n    this: PathControlPointControl,\n    ctx: CanvasRenderingContext2D,\n    left: number,\n    top: number,\n    styleOverride: ControlRenderingStyleOverride | undefined,\n    fabricObject: Path,\n  ) {\n    const { path } = fabricObject;\n    const {\n      commandIndex,\n      pointIndex,\n      connectToCommandIndex,\n      connectToPointIndex,\n    } = this;\n    ctx.save();\n    ctx.strokeStyle = this.controlStroke;\n    if (this.connectionDashArray) {\n      ctx.setLineDash(this.connectionDashArray);\n    }\n    const [commandType] = path[commandIndex];\n    const point = calcPathPointPosition(\n      fabricObject,\n      connectToCommandIndex,\n      connectToPointIndex,\n    );\n\n    if (commandType === 'Q') {\n      // one control point connects to 2 points\n      const point2 = calcPathPointPosition(\n        fabricObject,\n        commandIndex,\n        pointIndex + 2,\n      );\n      ctx.moveTo(point2.x, point2.y);\n      ctx.lineTo(left, top);\n    } else {\n      ctx.moveTo(left, top);\n    }\n    ctx.lineTo(point.x, point.y);\n    ctx.stroke();\n    ctx.restore();\n\n    super.render(ctx, left, top, styleOverride, fabricObject);\n  }\n}\n\nconst createControl = (\n  commandIndexPos: number,\n  pointIndexPos: number,\n  isControlPoint: boolean,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  },\n  connectToCommandIndex?: number,\n  connectToPointIndex?: number,\n) =>\n  new (isControlPoint ? PathControlPointControl : PathPointControl)({\n    commandIndex: commandIndexPos,\n    pointIndex: pointIndexPos,\n    actionName: ACTION_NAME,\n    positionHandler: pathPositionHandler,\n    actionHandler: pathActionHandler,\n    connectToCommandIndex,\n    connectToPointIndex,\n    ...options,\n    ...(isControlPoint ? options.controlPointStyle : options.pointStyle),\n  } as Partial<PathControlPointControl>);\n\nexport function createPathControls(\n  path: Path,\n  options: Partial<Control> & {\n    controlPointStyle?: PathPointControlStyle;\n    pointStyle?: PathPointControlStyle;\n  } = {},\n): Record<string, Control> {\n  const controls = {} as Record<string, Control>;\n  let previousCommandType: TSimpleParseCommandType = 'M';\n  path.path.forEach((command, commandIndex) => {\n    const commandType = command[0];\n\n    if (commandType !== 'Z') {\n      controls[`c_${commandIndex}_${commandType}`] = createControl(\n        commandIndex,\n        command.length - 2,\n        false,\n        options,\n      );\n    }\n    switch (commandType) {\n      case 'C':\n        controls[`c_${commandIndex}_C_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex - 1,\n          indexFromPrevCommand(previousCommandType),\n        );\n        controls[`c_${commandIndex}_C_CP_2`] = createControl(\n          commandIndex,\n          3,\n          true,\n          options,\n          commandIndex,\n          5,\n        );\n        break;\n      case 'Q':\n        controls[`c_${commandIndex}_Q_CP_1`] = createControl(\n          commandIndex,\n          1,\n          true,\n          options,\n          commandIndex,\n          3,\n        );\n        break;\n    }\n    previousCommandType = commandType;\n  });\n  return controls;\n}\n", "import { getFabricWindow } from '../env';\nimport { createCanvasElement, createCanvasElementFor } from '../util/misc/dom';\nimport { WebGLFilterBackend } from './WebGLFilterBackend';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\n\nexport const isWebGLPipelineState = (\n  options: TWebGLPipelineState | T2DPipelineState,\n): options is TWebGLPipelineState => {\n  return (options as TWebGLPipelineState).webgl !== undefined;\n};\n\n/**\n * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n * drawImage should be faster, but is also bugged for a small combination of old hardware\n * and drivers.\n * putImageData is faster than drawImage for that specific operation.\n */\nexport const isPutImageFaster = (width: number, height: number): boolean => {\n  const targetCanvas = createCanvasElementFor({ width, height });\n  const sourceCanvas = createCanvasElement();\n  const gl = sourceCanvas.getContext('webgl')!;\n  // eslint-disable-next-line no-undef\n  const imageBuffer = new ArrayBuffer(width * height * 4);\n\n  const testContext = {\n    imageBuffer: imageBuffer,\n  } as unknown as Required<WebGLFilterBackend>;\n  const testPipelineState = {\n    destinationWidth: width,\n    destinationHeight: height,\n    targetCanvas: targetCanvas,\n  } as unknown as TWebGLPipelineState;\n  let startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2D.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const drawImageTime = getFabricWindow().performance.now() - startTime;\n\n  startTime = getFabricWindow().performance.now();\n  WebGLFilterBackend.prototype.copyGLTo2DPutImageData.call(\n    testContext,\n    gl,\n    testPipelineState,\n  );\n  const putImageDataTime = getFabricWindow().performance.now() - startTime;\n\n  return drawImageTime > putImageDataTime;\n};\n", "export const highPsourceCode = `precision highp float`;\n\nexport const identityFragmentShader = `\n    ${highPsourceCode};\n    varying vec2 vTexCoord;\n    uniform sampler2D uTexture;\n    void main() {\n      gl_FragColor = texture2D(uTexture, vTexCoord);\n    }`;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    void main() {\n      vTexCoord = aPosition;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }`;\n", "import { getEnv } from '../env';\nimport type {\n  T2DPipelineState,\n  TWebGLAttributeLocationMap,\n  TWebGLPipelineState,\n  TWebGLProgramCacheItem,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport {\n  highPsourceCode,\n  identityFragmentShader,\n  vertexSource,\n} from './shaders/baseFilter';\nimport type { Abortable } from '../typedefs';\nimport { FabricError } from '../util/internals/console';\nimport { createCanvasElementFor } from '../util/misc/dom';\n\nconst regex = new RegExp(highPsourceCode, 'g');\n\nexport class BaseFilter<\n  Name extends string,\n  OwnProps extends Record<string, any> = object,\n> {\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  get type(): Name {\n    return (this.constructor as typeof BaseFilter).type as Name;\n  }\n\n  /**\n   * The class type. Used to identify which class this is.\n   * This is used for serialization purposes and internally it can be used\n   * to identify classes. As a developer you could use `instance of Class`\n   * but to avoid importing all the code and blocking tree shaking we try\n   * to avoid doing that.\n   */\n  static type = 'BaseFilter';\n\n  /**\n   * Contains the uniform locations for the fragment shader.\n   * uStepW and uStepH are handled by the BaseFilter, each filter class\n   * needs to specify all the one that are needed\n   */\n  static uniformLocations: string[] = [];\n\n  declare static defaults: Record<string, unknown>;\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  constructor({\n    type,\n    ...options\n  }: { type?: never } & Partial<OwnProps> & Record<string, any> = {}) {\n    Object.assign(\n      this,\n      (this.constructor as typeof BaseFilter).defaults,\n      options,\n    );\n  }\n\n  protected getFragmentSource(): string {\n    return identityFragmentShader;\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram(\n    gl: WebGLRenderingContext,\n    fragmentSource: string = this.getFragmentSource(),\n    vertexSource: string = this.getVertexSource(),\n  ) {\n    const {\n      WebGLProbe: { GLPrecision = 'highp' },\n    } = getEnv();\n    if (GLPrecision !== 'highp') {\n      fragmentSource = fragmentSource.replace(\n        regex,\n        highPsourceCode.replace('highp', GLPrecision),\n      );\n    }\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    const program = gl.createProgram();\n\n    if (!vertexShader || !fragmentShader || !program) {\n      throw new FabricError(\n        'Vertex, fragment shader or program creation error',\n      );\n    }\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Vertex shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          vertexShader,\n        )}`,\n      );\n    }\n\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new FabricError(\n        `Fragment shader compile error for ${this.type}: ${gl.getShaderInfoLog(\n          fragmentShader,\n        )}`,\n      );\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new FabricError(\n        `Shader link error for \"${this.type}\" ${gl.getProgramInfoLog(program)}`,\n      );\n    }\n\n    const uniformLocations = this.getUniformLocations(gl, program) || {};\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n\n    return {\n      program,\n      attributeLocations: this.getAttributeLocations(gl, program),\n      uniformLocations,\n    };\n  }\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLAttributeLocationMap {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  }\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n  ): TWebGLUniformLocationMap {\n    const locations = (this.constructor as unknown as typeof BaseFilter<string>)\n      .uniformLocations;\n\n    const uniformLocations: Record<string, WebGLUniformLocation | null> = {};\n    for (let i = 0; i < locations.length; i++) {\n      uniformLocations[locations[i]] = gl.getUniformLocation(\n        program,\n        locations[i],\n      );\n    }\n    return uniformLocations;\n  }\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData(\n    gl: WebGLRenderingContext,\n    attributeLocations: Record<string, number>,\n    aPositionData: Float32Array,\n  ) {\n    const attributeLocation = attributeLocations.aPosition;\n    const buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  }\n\n  _setupFrameBuffer(options: TWebGLPipelineState) {\n    const gl = options.context;\n    if (options.passes > 1) {\n      const width = options.destinationWidth;\n      const height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(\n          gl,\n          width,\n          height,\n        );\n      }\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        options.targetTexture,\n        0,\n      );\n    } else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  }\n\n  _swapTextures(options: TWebGLPipelineState) {\n    options.passes--;\n    options.pass++;\n    const temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  }\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isNeutralState(options?: any): boolean {\n    return false;\n  }\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(_options: T2DPipelineState): void {\n    // override by subclass\n  }\n\n  /**\n   * Returns a string that represent the current selected shader code for the filter.\n   * Used to force recompilation when parameters change or to retrieve the shader from cache\n   * @type string\n   **/\n  getCacheKey(): string {\n    return this.type;\n  }\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   * @return {WebGLProgram} the compiled program shader\n   */\n  retrieveShader(options: TWebGLPipelineState): TWebGLProgramCacheItem {\n    const key = this.getCacheKey();\n    if (!options.programCache[key]) {\n      options.programCache[key] = this.createProgram(options.context);\n    }\n    return options.programCache[key];\n  }\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context;\n    const shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    } else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  }\n\n  bindAdditionalTexture(\n    gl: WebGLRenderingContext,\n    texture: WebGLTexture,\n    textureUnit: number,\n  ) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  unbindAdditionalTexture(gl: WebGLRenderingContext, textureUnit: number) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  }\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} _gl The canvas context used to compile the shader program.\n   * @param {Object} _uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData(\n    _gl: WebGLRenderingContext,\n    _uniformLocations: TWebGLUniformLocationMap,\n  ): void {\n    // override by subclass\n  }\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer(options: T2DPipelineState) {\n    if (!options.helpLayer) {\n      const { sourceWidth, sourceHeight } = options;\n      const helpLayer = createCanvasElementFor({\n        width: sourceWidth,\n        height: sourceHeight,\n      });\n      options.helpLayer = helpLayer;\n    }\n  }\n\n  /**\n   * Returns object representation of an instance\n   * It will automatically export the default values of a filter,\n   * stored in the static defaults property.\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): { type: Name } & OwnProps {\n    const defaultKeys = Object.keys(\n      (this.constructor as typeof BaseFilter).defaults || {},\n    ) as (keyof OwnProps)[];\n\n    return {\n      type: this.type,\n      ...defaultKeys.reduce<OwnProps>((acc, key) => {\n        acc[key] = this[\n          key as keyof this\n        ] as unknown as (typeof acc)[typeof key];\n        return acc;\n      }, {} as OwnProps),\n    };\n  }\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON() {\n    // delegate, not alias\n    return this.toObject();\n  }\n\n  static async fromObject(\n    { type, ...filterOptions }: Record<string, any>,\n    _options: Abortable,\n  ): Promise<BaseFilter<string, object>> {\n    return new this(filterOptions);\n  }\n}\n", "export const blendColorFragmentSource = {\n  multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n  screen:\n    'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n  add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n  difference: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n  subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n  lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n  darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n  exclusion:\n    'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n  overlay: `\n    if (uColor.r < 0.5) {\n      gl_FragColor.r *= 2.0 * uColor.r;\n    } else {\n      gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n    }\n    if (uColor.g < 0.5) {\n      gl_FragColor.g *= 2.0 * uColor.g;\n    } else {\n      gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n    }\n    if (uColor.b < 0.5) {\n      gl_FragColor.b *= 2.0 * uColor.b;\n    } else {\n      gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n    }\n    `,\n  tint: `\n    gl_FragColor.rgb *= (1.0 - uColor.a);\n    gl_FragColor.rgb += uColor.rgb;\n    `,\n} as const;\n", "import { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { blendColorFragmentSource } from './shaders/blendColor';\n\nexport type TBlendMode =\n  | 'multiply'\n  | 'add'\n  | 'difference'\n  | 'screen'\n  | 'subtract'\n  | 'darken'\n  | 'lighten'\n  | 'overlay'\n  | 'exclusion'\n  | 'tint';\n\ntype BlendColorOwnProps = {\n  color: string;\n  mode: TBlendMode;\n  alpha: number;\n};\n\nexport const blendColorDefaultValues: BlendColorOwnProps = {\n  color: '#F95C63',\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Color Blend filter class\n * @example\n * const filter = new BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendColor extends BaseFilter<'BlendColor', BlendColorOwnProps> {\n  /**\n   * Color to make the blend operation with. default to a reddish color since black or white\n   * gives always strong result.\n   * @type String\n   * @default\n   **/\n  declare color: BlendColorOwnProps['color'];\n\n  /**\n   * Blend mode for the filter: one of multiply, add, difference, screen, subtract,\n   * darken, lighten, overlay, exclusion, tint.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendColorOwnProps['mode'];\n  /**\n   * alpha value. represent the strength of the blend color operation.\n   * @type Number\n   * @default\n   **/\n  declare alpha: BlendColorOwnProps['alpha'];\n\n  static defaults = blendColorDefaultValues;\n\n  static type = 'BlendColor';\n\n  static uniformLocations = ['uColor'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  protected getFragmentSource(): string {\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec4 uColor;\n      varying vec2 vTexCoord;\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        gl_FragColor = color;\n        if (color.a > 0.0) {\n          ${blendColorFragmentSource[this.mode]}\n        }\n      }\n      `;\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const source = new Color(this.color).getSource();\n    const tr = source[0] * this.alpha;\n    const tg = source[1] * this.alpha;\n    const tb = source[2] * this.alpha;\n    const alpha1 = 1 - this.alpha;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          break;\n        case 'screen':\n          data[i] = 255 - ((255 - r) * (255 - tr)) / 255;\n          data[i + 1] = 255 - ((255 - g) * (255 - tg)) / 255;\n          data[i + 2] = 255 - ((255 - b) * (255 - tb)) / 255;\n          break;\n        case 'add':\n          data[i] = r + tr;\n          data[i + 1] = g + tg;\n          data[i + 2] = b + tb;\n          break;\n        case 'difference':\n          data[i] = Math.abs(r - tr);\n          data[i + 1] = Math.abs(g - tg);\n          data[i + 2] = Math.abs(b - tb);\n          break;\n        case 'subtract':\n          data[i] = r - tr;\n          data[i + 1] = g - tg;\n          data[i + 2] = b - tb;\n          break;\n        case 'darken':\n          data[i] = Math.min(r, tr);\n          data[i + 1] = Math.min(g, tg);\n          data[i + 2] = Math.min(b, tb);\n          break;\n        case 'lighten':\n          data[i] = Math.max(r, tr);\n          data[i + 1] = Math.max(g, tg);\n          data[i + 2] = Math.max(b, tb);\n          break;\n        case 'overlay':\n          data[i] =\n            tr < 128\n              ? (2 * r * tr) / 255\n              : 255 - (2 * (255 - r) * (255 - tr)) / 255;\n          data[i + 1] =\n            tg < 128\n              ? (2 * g * tg) / 255\n              : 255 - (2 * (255 - g) * (255 - tg)) / 255;\n          data[i + 2] =\n            tb < 128\n              ? (2 * b * tb) / 255\n              : 255 - (2 * (255 - b) * (255 - tb)) / 255;\n          break;\n        case 'exclusion':\n          data[i] = tr + r - (2 * tr * r) / 255;\n          data[i + 1] = tg + g - (2 * tg * g) / 255;\n          data[i + 2] = tb + b - (2 * tb * b) / 255;\n          break;\n        case 'tint':\n          data[i] = tr + r * alpha1;\n          data[i + 1] = tg + g * alpha1;\n          data[i + 2] = tb + b * alpha1;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource();\n    source[0] = (this.alpha * source[0]) / 255;\n    source[1] = (this.alpha * source[1]) / 255;\n    source[2] = (this.alpha * source[2]) / 255;\n    source[3] = this.alpha;\n    gl.uniform4fv(uniformLocations.uColor, source);\n  }\n}\n\nclassRegistry.setClass(BlendColor);\n", "import type { TBlendImageMode } from '../BlendImage';\n\nexport const fragmentSource: Record<TBlendImageMode, string> = {\n  multiply: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.rgba *= color2.rgba;\n      gl_FragColor = color;\n    }\n    `,\n  mask: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform sampler2D uImage;\n    uniform vec4 uColor;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      vec4 color2 = texture2D(uImage, vTexCoord2);\n      color.a = color2.a;\n      gl_FragColor = color;\n    }\n    `,\n} as const;\n\nexport const vertexSource = `\n    attribute vec2 aPosition;\n    varying vec2 vTexCoord;\n    varying vec2 vTexCoord2;\n    uniform mat3 uTransformMatrix;\n    void main() {\n      vTexCoord = aPosition;\n      vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n      gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ` as const;\n", "import { FabricImage } from '../shapes/Image';\nimport { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport type { WebGLFilterBackend } from './WebGLFilterBackend';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource, vertexSource } from './shaders/blendImage';\n\nexport type TBlendImageMode = 'multiply' | 'mask';\n\ntype BlendImageOwnProps = {\n  mode: TBlendImageMode;\n  alpha: number;\n};\n\nexport const blendImageDefaultValues: BlendImageOwnProps = {\n  mode: 'multiply',\n  alpha: 1,\n};\n\n/**\n * Image Blend filter class\n * @example\n * const filter = new filters.BlendColor({\n *  color: '#000',\n *  mode: 'multiply'\n * });\n *\n * const filter = new BlendImage({\n *  image: fabricImageObject,\n *  mode: 'multiply'\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class BlendImage extends BaseFilter<'BlendImage', BlendImageOwnProps> {\n  /**\n   * Image to make the blend operation with.\n   **/\n  declare image: FabricImage;\n\n  /**\n   * Blend mode for the filter: either 'multiply' or 'mask'. 'multiply' will\n   * multiply the values of each channel (R, G, B, and A) of the filter image by\n   * their corresponding values in the base image. 'mask' will only look at the\n   * alpha channel of the filter image, and apply those values to the base\n   * image's alpha channel.\n   * @type String\n   * @default\n   **/\n  declare mode: BlendImageOwnProps['mode'];\n\n  /**\n   * alpha value. represent the strength of the blend image operation.\n   * not implemented.\n   **/\n  declare alpha: BlendImageOwnProps['alpha'];\n\n  static type = 'BlendImage';\n\n  static defaults = blendImageDefaultValues;\n\n  static uniformLocations = ['uTransformMatrix', 'uImage'];\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource(): string {\n    return fragmentSource[this.mode];\n  }\n\n  getVertexSource(): string {\n    return vertexSource;\n  }\n\n  applyToWebGL(options: TWebGLPipelineState) {\n    const gl = options.context,\n      texture = this.createTexture(options.filterBackend, this.image);\n    this.bindAdditionalTexture(gl, texture!, gl.TEXTURE1);\n    super.applyToWebGL(options);\n    this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n  }\n\n  createTexture(backend: WebGLFilterBackend, image: FabricImage) {\n    return backend.getCachedTexture(image.cacheKey, image.getElement());\n  }\n\n  /**\n   * Calculate a transformMatrix to adapt the image to blend over\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  calculateMatrix() {\n    const image = this.image,\n      { width, height } = image.getElement();\n    return [\n      1 / image.scaleX,\n      0,\n      0,\n      0,\n      1 / image.scaleY,\n      0,\n      -image.left / width,\n      -image.top / height,\n      1,\n    ];\n  }\n\n  /**\n   * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({\n    imageData: { data, width, height },\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const image = this.image;\n    if (!resources.blendImage) {\n      resources.blendImage = createCanvasElement();\n    }\n    const canvas1 = resources.blendImage;\n    const context = canvas1.getContext('2d')!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas1.width = width;\n      canvas1.height = height;\n    } else {\n      context.clearRect(0, 0, width, height);\n    }\n    context.setTransform(\n      image.scaleX,\n      0,\n      0,\n      image.scaleY,\n      image.left,\n      image.top,\n    );\n    context.drawImage(image.getElement(), 0, 0, width, height);\n    const blendData = context.getImageData(0, 0, width, height).data;\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      const a = data[i + 3];\n\n      const tr = blendData[i];\n      const tg = blendData[i + 1];\n      const tb = blendData[i + 2];\n      const ta = blendData[i + 3];\n\n      switch (this.mode) {\n        case 'multiply':\n          data[i] = (r * tr) / 255;\n          data[i + 1] = (g * tg) / 255;\n          data[i + 2] = (b * tb) / 255;\n          data[i + 3] = (a * ta) / 255;\n          break;\n        case 'mask':\n          data[i + 3] = ta;\n          break;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const matrix = this.calculateMatrix();\n    gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n    gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * TODO: Handle the possibility of missing image better.\n   * As of now a BlendImage filter without image can't be used with fromObject\n   * @return {Object} Object representation of an instance\n   */\n  toObject(): {\n    type: 'BlendImage';\n    image: ReturnType<FabricImage['toObject']>;\n  } & BlendImageOwnProps {\n    return {\n      ...super.toObject(),\n      image: this.image && this.image.toObject(),\n    };\n  }\n\n  /**\n   * Create filter instance from an object representation\n   * @static\n   * @param {object} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting image loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<BlendImage>}\n   */\n  static async fromObject(\n    { type, image, ...filterOptions }: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<BaseFilter<'BlendImage', BlendImageOwnProps>> {\n    return FabricImage.fromObject(image, options).then(\n      (enlivedImage) =>\n        new this({ ...filterOptions, image: enlivedImage }) as BlendImage,\n    );\n  }\n}\n\nclassRegistry.setClass(BlendImage);\n", "import { createCanvasElement } from '../util/misc/dom';\nimport { BaseFilter } from './BaseFilter';\nimport type {\n  TWebGLPipelineState,\n  T2DPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/blur';\n\ntype BlurOwnProps = {\n  blur: number;\n};\n\nexport const blurDefaultValues: BlurOwnProps = {\n  blur: 0,\n};\n\n/**\n * Blur filter class\n * @example\n * const filter = new Blur({\n *   blur: 0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Blur extends BaseFilter<'Blur', BlurOwnProps> {\n  /**\n   * blur value, in percentage of image dimensions.\n   * specific to keep the image blur constant at different resolutions\n   * range between 0 and 1.\n   * @type Number\n   * @default\n   */\n  declare blur: BlurOwnProps['blur'];\n\n  declare horizontal: boolean;\n  declare aspectRatio: number;\n\n  static type = 'Blur';\n\n  static defaults = blurDefaultValues;\n\n  static uniformLocations = ['uDelta'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      // this aspectRatio is used to give the same blur to vertical and horizontal\n      this.aspectRatio = options.sourceWidth / options.sourceHeight;\n      options.passes++;\n      this._setupFrameBuffer(options);\n      this.horizontal = true;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n      this._setupFrameBuffer(options);\n      this.horizontal = false;\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    } else {\n      this.applyTo2d(options);\n    }\n  }\n\n  applyTo2d(options: T2DPipelineState) {\n    options.imageData = this.simpleBlur(options);\n  }\n\n  simpleBlur({\n    ctx,\n    imageData,\n    filterBackend: { resources },\n  }: T2DPipelineState) {\n    const { width, height } = imageData;\n    if (!resources.blurLayer1) {\n      resources.blurLayer1 = createCanvasElement();\n      resources.blurLayer2 = createCanvasElement();\n    }\n    const canvas1 = resources.blurLayer1!;\n    const canvas2 = resources.blurLayer2!;\n    if (canvas1.width !== width || canvas1.height !== height) {\n      canvas2.width = canvas1.width = width;\n      canvas2.height = canvas1.height = height;\n    }\n    const ctx1 = canvas1.getContext('2d')!,\n      ctx2 = canvas2.getContext('2d')!,\n      nSamples = 15,\n      blur = this.blur * 0.06 * 0.5;\n    let random, percent, j, i;\n\n    // load first canvas\n    ctx1.putImageData(imageData, 0, 0);\n    ctx2.clearRect(0, 0, width, height);\n\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * width + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, j, random);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    for (i = -nSamples; i <= nSamples; i++) {\n      random = (Math.random() - 0.5) / 4;\n      percent = i / nSamples;\n      j = blur * percent * height + random;\n      ctx2.globalAlpha = 1 - Math.abs(percent);\n      ctx2.drawImage(canvas1, random, j);\n      ctx1.drawImage(canvas2, 0, 0);\n      ctx2.globalAlpha = 1;\n      ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n    }\n    ctx.drawImage(canvas1, 0, 0);\n    const newImageData = ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n    ctx1.globalAlpha = 1;\n    ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n    return newImageData;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const delta = this.chooseRightDelta();\n    gl.uniform2fv(uniformLocations.uDelta, delta);\n  }\n\n  isNeutralState() {\n    return this.blur === 0;\n  }\n\n  /**\n   * choose right value of image percentage to blur with\n   * @returns {Array} a numeric array with delta values\n   */\n  chooseRightDelta() {\n    let blurScale = 1;\n    const delta = [0, 0];\n    if (this.horizontal) {\n      if (this.aspectRatio > 1) {\n        // image is wide, i want to shrink radius horizontal\n        blurScale = 1 / this.aspectRatio;\n      }\n    } else {\n      if (this.aspectRatio < 1) {\n        // image is tall, i want to shrink radius vertical\n        blurScale = this.aspectRatio;\n      }\n    }\n    const blur = blurScale * this.blur * 0.12;\n    if (this.horizontal) {\n      delta[0] = blur;\n    } else {\n      delta[1] = blur;\n    }\n    return delta;\n  }\n}\n\nclassRegistry.setClass(Blur);\n", "export const fragmentSource = `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform vec2 uDelta;\n    varying vec2 vTexCoord;\n    const float nSamples = 15.0;\n    vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n    float random(vec3 scale) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n    }\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      float offset = random(v3offset);\n      for (float t = -nSamples; t <= nSamples; t++) {\n        float percent = (t + offset - 0.5) / nSamples;\n        float weight = 1.0 - abs(percent);\n        color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n        total += weight;\n      }\n      gl_FragColor = color / total;\n    }\n  ` as const;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/brightness';\n\ntype BrightnessOwnProps = {\n  brightness: number;\n};\n\nexport const brightnessDefaultValues: BrightnessOwnProps = {\n  brightness: 0,\n};\n\n/**\n * Brightness filter class\n * @example\n * const filter = new Brightness({\n *   brightness: 0.05\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Brightness extends BaseFilter<'Brightness', BrightnessOwnProps> {\n  /**\n   * Brightness value, from -1 to 1.\n   * translated to -255 to 255 for 2d\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Number} brightness\n   * @default\n   */\n  declare brightness: BrightnessOwnProps['brightness'];\n\n  static type = 'Brightness';\n\n  static defaults = brightnessDefaultValues;\n\n  static uniformLocations = ['uBrightness'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const brightness = Math.round(this.brightness * 255);\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = data[i] + brightness;\n      data[i + 1] = data[i + 1] + brightness;\n      data[i + 2] = data[i + 2] + brightness;\n    }\n  }\n\n  isNeutralState() {\n    return this.brightness === 0;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n  }\n}\n\nclassRegistry.setClass(Brightness);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBrightness;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += uBrightness;\n    gl_FragColor = color;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TMatColorMatrix,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/colorMatrix';\n\ntype ColorMatrixOwnProps = {\n  matrix: TMatColorMatrix;\n  colorsOnly: boolean;\n};\n\nexport const colorMatrixDefaultValues: ColorMatrixOwnProps = {\n  matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],\n  colorsOnly: true,\n};\n\n/**\n   * Color Matrix filter class\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl demo}\n   * @example <caption>Kodachrome filter</caption>\n   * const filter = new ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\nexport class ColorMatrix<\n  Name extends string = 'ColorMatrix',\n  OwnProps extends object = ColorMatrixOwnProps,\n> extends BaseFilter<Name, OwnProps> {\n  /**\n   * Colormatrix for pixels.\n   * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n   * outside the -1, 1 range.\n   * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n   * @param {Array} matrix array of 20 numbers.\n   * @default\n   */\n  declare matrix: ColorMatrixOwnProps['matrix'];\n\n  /**\n   * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n   * to save some calculation\n   * @type Boolean\n   * @default true\n   */\n  declare colorsOnly: ColorMatrixOwnProps['colorsOnly'];\n\n  static type = 'ColorMatrix';\n\n  static defaults = colorMatrixDefaultValues;\n\n  static uniformLocations = ['uColorMatrix', 'uConstants'];\n\n  getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      m = this.matrix,\n      colorsOnly = this.colorsOnly;\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n      if (colorsOnly) {\n        data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n        data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n        data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n      } else {\n        const a = data[i + 3];\n        data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n        data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n        data[i + 2] =\n          r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n        data[i + 3] =\n          r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const m = this.matrix,\n      matrix = [\n        m[0],\n        m[1],\n        m[2],\n        m[3],\n        m[5],\n        m[6],\n        m[7],\n        m[8],\n        m[10],\n        m[11],\n        m[12],\n        m[13],\n        m[15],\n        m[16],\n        m[17],\n        m[18],\n      ],\n      constants = [m[4], m[9], m[14], m[19]];\n    gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n    gl.uniform4fv(uniformLocations.uConstants, constants);\n  }\n\n  toObject() {\n    return {\n      ...super.toObject(),\n      matrix: [...this.matrix] as TMatColorMatrix,\n    };\n  }\n}\n\nclassRegistry.setClass(ColorMatrix);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  varying vec2 vTexCoord;\n  uniform mat4 uColorMatrix;\n  uniform vec4 uConstants;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color *= uColorMatrix;\n    color += uConstants;\n    gl_FragColor = color;\n  }`;\n", "import { ColorMatrix } from './ColorMatrix';\nimport { classRegistry } from '../ClassRegistry';\nimport type { TMatColorMatrix } from './typedefs';\n\ntype FixedFiltersOwnProps = {\n  colorsOnly: boolean;\n};\n\nexport function createColorMatrixFilter(key: string, matrix: TMatColorMatrix) {\n  const newClass = class extends ColorMatrix<typeof key, FixedFiltersOwnProps> {\n    static type = key;\n\n    static defaults = {\n      colorsOnly: false,\n      matrix,\n    };\n\n    //@ts-expect-error TS wants matrix to be exported.\n    toObject(): { type: string } & FixedFiltersOwnProps {\n      return { type: this.type, colorsOnly: this.colorsOnly };\n    }\n  };\n  classRegistry.setClass(newClass, key);\n  return newClass as typeof ColorMatrix<typeof key, FixedFiltersOwnProps>;\n}\n\nexport const Brownie = createColorMatrixFilter(\n  'Brownie',\n  [\n    0.5997, 0.34553, -0.27082, 0, 0.186, -0.0377, 0.86095, 0.15059, 0, -0.1449,\n    0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Vintage = createColorMatrixFilter(\n  'Vintage',\n  [\n    0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0,\n    0.02926, 0.0466, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Kodachrome = createColorMatrixFilter(\n  'Kodachrome',\n  [\n    1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0,\n    0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Technicolor = createColorMatrixFilter(\n  'Technicolor',\n  [\n    1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0,\n    -0.27589, -0.2311, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Polaroid = createColorMatrixFilter(\n  'Polaroid',\n  [\n    1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016,\n    1.483, 0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const Sepia = createColorMatrixFilter(\n  'Sepia',\n  [\n    0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131,\n    0, 0, 0, 0, 0, 1, 0,\n  ],\n);\n\nexport const BlackWhite = createColorMatrixFilter(\n  'BlackWhite',\n  [\n    1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0,\n    1, 0,\n  ],\n);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLPipelineState } from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\n\ntype ComposedOwnProps = {\n  subFilters: BaseFilter<string, object>[];\n};\n\n/**\n * A container class that knows how to apply a sequence of filters to an input image.\n */\nexport class Composed extends BaseFilter<'Composed', ComposedOwnProps> {\n  /**\n   * A non sparse array of filters to apply\n   */\n  declare subFilters: ComposedOwnProps['subFilters'];\n\n  static type = 'Composed';\n\n  constructor(\n    options: { subFilters?: BaseFilter<string, object>[] } & Record<\n      string,\n      any\n    > = {},\n  ) {\n    super(options);\n    this.subFilters = options.subFilters || [];\n  }\n\n  /**\n   * Apply this container's filters to the input image provided.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be applied.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      options.passes += this.subFilters.length - 1;\n    }\n    this.subFilters.forEach((filter) => {\n      filter.applyTo(options);\n    });\n  }\n\n  /**\n   * Serialize this filter into JSON.\n   * @returns {Object} A JSON representation of this filter.\n   */\n  //@ts-expect-error TS doesn't like this toObject\n  toObject(): {\n    type: 'Composed';\n    subFilters: ReturnType<BaseFilter<string, object>['toObject']>[];\n  } {\n    return {\n      type: this.type,\n      subFilters: this.subFilters.map((filter) => filter.toObject()),\n    };\n  }\n\n  isNeutralState() {\n    return !this.subFilters.some((filter) => !filter.isNeutralState());\n  }\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   * @static\n   * @param {oject} object Object to create an instance from\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] handle aborting `BlendImage` filter loading, see https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal\n   * @returns {Promise<Composed>}\n   */\n  static fromObject(\n    object: Record<string, any>,\n    options: { signal: AbortSignal },\n  ): Promise<Composed> {\n    return Promise.all(\n      ((object.subFilters || []) as BaseFilter<string, object>[]).map(\n        (filter) =>\n          classRegistry\n            .getClass<typeof BaseFilter>(filter.type)\n            .fromObject(filter, options),\n      ),\n    ).then(\n      (enlivedFilters) => new this({ subFilters: enlivedFilters }) as Composed,\n    );\n  }\n}\n\nclassRegistry.setClass(Composed);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/constrast';\n\ntype ContrastOwnProps = {\n  contrast: number;\n};\n\nexport const contrastDefaultValues: ContrastOwnProps = {\n  contrast: 0,\n};\n\n/**\n * Contrast filter class\n * @example\n * const filter = new Contrast({\n *   contrast: 0.25\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Contrast extends BaseFilter<'Contrast', ContrastOwnProps> {\n  /**\n   * contrast value, range from -1 to 1.\n   * @param {Number} contrast\n   * @default 0\n   */\n  declare contrast: ContrastOwnProps['contrast'];\n\n  static type = 'Contrast';\n\n  static defaults = contrastDefaultValues;\n\n  static uniformLocations = ['uContrast'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  isNeutralState() {\n    return this.contrast === 0;\n  }\n\n  /**\n   * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const contrast = Math.floor(this.contrast * 255),\n      contrastF = (259 * (contrast + 255)) / (255 * (259 - contrast));\n\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = contrastF * (data[i] - 128) + 128;\n      data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n      data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uContrast, this.contrast);\n  }\n}\n\nclassRegistry.setClass(Contrast);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uContrast;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n    color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n    gl_FragColor = color;\n  }`;\n", "export const fragmentSource = {\n  Convolute_3_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_3_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[9];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 3.0; h+=1.0) {\n        for (float w = 0.0; w < 3.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_5_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_5_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[25];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 5.0; h+=1.0) {\n        for (float w = 0.0; w < 5.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_7_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_7_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[49];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 7.0; h+=1.0) {\n        for (float w = 0.0; w < 7.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n  Convolute_9_1: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 0);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      gl_FragColor = color;\n    }\n    `,\n  Convolute_9_0: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform float uMatrix[81];\n    uniform float uStepW;\n    uniform float uStepH;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = vec4(0, 0, 0, 1);\n      for (float h = 0.0; h < 9.0; h+=1.0) {\n        for (float w = 0.0; w < 9.0; w+=1.0) {\n          vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n          color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n        }\n      }\n      float alpha = texture2D(uTexture, vTexCoord).a;\n      gl_FragColor = color;\n      gl_FragColor.a = alpha;\n    }\n    `,\n};\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/convolute';\n\nexport type ConvoluteOwnProps = {\n  opaque: boolean;\n  matrix: number[];\n};\n\nexport const convoluteDefaultValues: ConvoluteOwnProps = {\n  opaque: false,\n  matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n};\n\n/**\n * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n * @example <caption>Sharpen filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 0, -1,  0,\n *            -1,  5, -1,\n *             0, -1,  0 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Blur filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9,\n *             1/9, 1/9, 1/9 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter</caption>\n * const filter = new Convolute({\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n * @example <caption>Emboss filter with opaqueness</caption>\n * const filter = new Convolute({\n *   opaque: true,\n *   matrix: [ 1,   1,  1,\n *             1, 0.7, -1,\n *            -1,  -1, -1 ]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Convolute extends BaseFilter<'Convolute', ConvoluteOwnProps> {\n  /*\n   * Opaque value (true/false)\n   */\n  declare opaque: ConvoluteOwnProps['opaque'];\n\n  /*\n   * matrix for the filter, max 9x9\n   */\n  declare matrix: ConvoluteOwnProps['matrix'];\n\n  static type = 'Convolute';\n\n  static defaults = convoluteDefaultValues;\n\n  static uniformLocations = ['uMatrix', 'uOpaque', 'uHalfSize', 'uSize'];\n\n  getCacheKey() {\n    return `${this.type}_${Math.sqrt(this.matrix.length)}_${\n      this.opaque ? 1 : 0\n    }` as keyof typeof fragmentSource;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.getCacheKey()];\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d(options: T2DPipelineState) {\n    const imageData = options.imageData,\n      data = imageData.data,\n      weights = this.matrix,\n      side = Math.round(Math.sqrt(weights.length)),\n      halfSide = Math.floor(side / 2),\n      sw = imageData.width,\n      sh = imageData.height,\n      output = options.ctx.createImageData(sw, sh),\n      dst = output.data,\n      // go through the destination image pixels\n      alphaFac = this.opaque ? 1 : 0;\n    let r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n\n    for (y = 0; y < sh; y++) {\n      for (x = 0; x < sw; x++) {\n        dstOff = (y * sw + x) * 4;\n        // calculate the weighed sum of the source image pixels that\n        // fall under the convolution matrix\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n\n        for (cy = 0; cy < side; cy++) {\n          for (cx = 0; cx < side; cx++) {\n            scy = y + cy - halfSide;\n            scx = x + cx - halfSide;\n\n            // eslint-disable-next-line max-depth\n            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n              continue;\n            }\n\n            srcOff = (scy * sw + scx) * 4;\n            wt = weights[cy * side + cx];\n\n            r += data[srcOff] * wt;\n            g += data[srcOff + 1] * wt;\n            b += data[srcOff + 2] * wt;\n            // eslint-disable-next-line max-depth\n            if (!alphaFac) {\n              a += data[srcOff + 3] * wt;\n            }\n          }\n        }\n        dst[dstOff] = r;\n        dst[dstOff + 1] = g;\n        dst[dstOff + 2] = b;\n        if (!alphaFac) {\n          dst[dstOff + 3] = a;\n        } else {\n          dst[dstOff + 3] = data[dstOff + 3];\n        }\n      }\n    }\n    options.imageData = output;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n  }\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject() {\n    return {\n      ...super.toObject(),\n      opaque: this.opaque,\n      matrix: [...this.matrix],\n    };\n  }\n}\n\nclassRegistry.setClass(Convolute);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform vec3 uGamma;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    vec3 correction = (1.0 / uGamma);\n    color.r = pow(color.r, correction.r);\n    color.g = pow(color.g, correction.g);\n    color.b = pow(color.b, correction.b);\n    gl_FragColor = color;\n    gl_FragColor.rgb *= color.a;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/gamma';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nconst GAMMA = 'Gamma' as const;\n\nexport type GammaInput = [number, number, number];\n\nexport type GammaOwnProps = {\n  gamma: GammaInput;\n};\n\nexport const gammaDefaultValues: GammaOwnProps = {\n  gamma: [1, 1, 1],\n};\n\n/**\n * Gamma filter class\n * @example\n * const filter = new Gamma({\n *   gamma: [1, 0.5, 2.1]\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Gamma extends BaseFilter<typeof GAMMA, GammaOwnProps> {\n  /**\n   * Gamma array value, from 0.01 to 2.2.\n   * @param {Array} gamma\n   * @default\n   */\n  declare gamma: GammaOwnProps['gamma'];\n  declare rgbValues?: {\n    r: Uint8Array;\n    g: Uint8Array;\n    b: Uint8Array;\n  };\n\n  static type = GAMMA;\n\n  static defaults = gammaDefaultValues;\n\n  static uniformLocations = ['uGamma'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  constructor(options: { gamma?: GammaInput } = {}) {\n    super(options);\n    this.gamma =\n      options.gamma ||\n      ((\n        this.constructor as typeof Gamma\n      ).defaults.gamma.concat() as GammaInput);\n  }\n\n  /**\n   * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const gamma = this.gamma,\n      rInv = 1 / gamma[0],\n      gInv = 1 / gamma[1],\n      bInv = 1 / gamma[2];\n\n    if (!this.rgbValues) {\n      this.rgbValues = {\n        r: new Uint8Array(256),\n        g: new Uint8Array(256),\n        b: new Uint8Array(256),\n      };\n    }\n\n    // This is an optimization - pre-compute a look-up table for each color channel\n    // instead of performing these pow calls for each pixel in the image.\n    const rgb = this.rgbValues;\n    for (let i = 0; i < 256; i++) {\n      rgb.r[i] = Math.pow(i / 255, rInv) * 255;\n      rgb.g[i] = Math.pow(i / 255, gInv) * 255;\n      rgb.b[i] = Math.pow(i / 255, bInv) * 255;\n    }\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = rgb.r[data[i]];\n      data[i + 1] = rgb.g[data[i + 1]];\n      data[i + 2] = rgb.b[data[i + 2]];\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n  }\n\n  isNeutralState() {\n    const { gamma } = this;\n    return gamma[0] === 1 && gamma[1] === 1 && gamma[2] === 1;\n  }\n\n  toObject(): { type: typeof GAMMA; gamma: GammaInput } {\n    return {\n      type: GAMMA,\n      gamma: this.gamma.concat() as GammaInput,\n    };\n  }\n}\n\nclassRegistry.setClass(Gamma);\n", "import type { TGrayscaleMode } from '../Grayscale';\n\nexport const fragmentSource: Record<TGrayscaleMode, string> = {\n  average: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 color = texture2D(uTexture, vTexCoord);\n      float average = (color.r + color.b + color.g) / 3.0;\n      gl_FragColor = vec4(average, average, average, color.a);\n    }\n    `,\n  lightness: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n  luminosity: `\n    precision highp float;\n    uniform sampler2D uTexture;\n    uniform int uMode;\n    varying vec2 vTexCoord;\n    void main() {\n      vec4 col = texture2D(uTexture, vTexCoord);\n      float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n      gl_FragColor = vec4(average, average, average, col.a);\n    }\n    `,\n};\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/grayscale';\n\nexport type TGrayscaleMode = 'average' | 'lightness' | 'luminosity';\n\ntype GrayscaleOwnProps = {\n  mode: TGrayscaleMode;\n};\n\nexport const grayscaleDefaultValues: GrayscaleOwnProps = {\n  mode: 'average',\n};\n\n/**\n * Grayscale image filter class\n * @example\n * const filter = new Grayscale();\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Grayscale extends BaseFilter<'Grayscale', GrayscaleOwnProps> {\n  declare mode: TGrayscaleMode;\n\n  static type = 'Grayscale';\n\n  static defaults = grayscaleDefaultValues;\n\n  static uniformLocations = ['uMode'];\n\n  /**\n   * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0, value: number; i < data.length; i += 4) {\n      switch (this.mode) {\n        case 'average':\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n          break;\n        case 'lightness':\n          value =\n            (Math.min(data[i], data[i + 1], data[i + 2]) +\n              Math.max(data[i], data[i + 1], data[i + 2])) /\n            2;\n          break;\n        case 'luminosity':\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n          break;\n      }\n\n      data[i] = value;\n      data[i + 1] = value;\n      data[i + 2] = value;\n    }\n  }\n\n  getCacheKey() {\n    return `${this.type}_${this.mode}`;\n  }\n\n  getFragmentSource() {\n    return fragmentSource[this.mode];\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const mode = 1;\n    gl.uniform1i(uniformLocations.uMode, mode);\n  }\n\n  /**\n   * Grayscale filter isNeutralState implementation\n   * The filter is never neutral\n   * on the image\n   **/\n  isNeutralState() {\n    return false;\n  }\n}\n\nclassRegistry.setClass(Grayscale);\n", "import { cos } from '../util/misc/cos';\nimport { sin } from '../util/misc/sin';\nimport { ColorMatrix } from './ColorMatrix';\nimport type { TWebGLPipelineState, T2DPipelineState } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\n\nexport type HueRotationOwnProps = {\n  rotation: number;\n};\n\nexport const hueRotationDefaultValues: HueRotationOwnProps = {\n  rotation: 0,\n};\n\n/**\n * HueRotation filter class\n * @example\n * const filter = new HueRotation({\n *   rotation: -0.5\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class HueRotation extends ColorMatrix<\n  'HueRotation',\n  HueRotationOwnProps\n> {\n  /**\n   * HueRotation value, from -1 to 1.\n   */\n  declare rotation: HueRotationOwnProps['rotation'];\n\n  static type = 'HueRotation';\n\n  static defaults = hueRotationDefaultValues;\n\n  calculateMatrix() {\n    const rad = this.rotation * Math.PI,\n      cosine = cos(rad),\n      sine = sin(rad),\n      aThird = 1 / 3,\n      aThirdSqtSin = Math.sqrt(aThird) * sine,\n      OneMinusCos = 1 - cosine;\n    this.matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];\n    this.matrix[0] = cosine + OneMinusCos / 3;\n    this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[6] = cosine + aThird * OneMinusCos;\n    this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n    this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n    this.matrix[12] = cosine + aThird * OneMinusCos;\n  }\n\n  isNeutralState() {\n    return this.rotation === 0;\n  }\n\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    this.calculateMatrix();\n    super.applyTo(options);\n  }\n\n  //@ts-expect-error TS and classes with different methods\n  toObject(): { type: 'HueRotation'; rotation: number } {\n    return {\n      type: this.type,\n      rotation: this.rotation,\n    };\n  }\n}\n\nclassRegistry.setClass(HueRotation);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/invert';\n\nexport type InvertOwnProps = {\n  alpha: boolean;\n  invert: boolean;\n};\n\nexport const invertDefaultValues: InvertOwnProps = {\n  alpha: false,\n  invert: true,\n};\n\n/**\n * @example\n * const filter = new Invert();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Invert extends BaseFilter<'Invert', InvertOwnProps> {\n  /**\n   * Invert also alpha.\n   * @param {Boolean} alpha\n   * @default\n   **/\n  declare alpha: InvertOwnProps['alpha'];\n\n  /**\n   * Filter invert. if false, does nothing\n   * @param {Boolean} invert\n   * @default\n   */\n  declare invert: InvertOwnProps['invert'];\n\n  static type = 'Invert';\n\n  static defaults = invertDefaultValues;\n\n  static uniformLocations = ['uInvert', 'uAlpha'];\n\n  /**\n   * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8Array to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];\n      data[i + 1] = 255 - data[i + 1];\n      data[i + 2] = 255 - data[i + 2];\n\n      if (this.alpha) {\n        data[i + 3] = 255 - data[i + 3];\n      }\n    }\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Invert filter isNeutralState implementation\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * @param {Object} options\n   **/\n  isNeutralState() {\n    return !this.invert;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1i(uniformLocations.uInvert, Number(this.invert));\n    gl.uniform1i(uniformLocations.uAlpha, Number(this.alpha));\n  }\n}\n\nclassRegistry.setClass(Invert);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform int uInvert;\n  uniform int uAlpha;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    if (uInvert == 1) {\n      if (uAlpha == 1) {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,1.0 -color.a);\n      } else {\n        gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n      }\n    } else {\n      gl_FragColor = color;\n    }\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/noise';\n\nexport type NoiseOwnProps = {\n  noise: number;\n};\n\nexport const noiseDefaultValues: NoiseOwnProps = {\n  noise: 0,\n};\n\n/**\n * Noise filter class\n * @example\n * const filter = new Noise({\n *   noise: 700\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class Noise extends BaseFilter<'Noise', NoiseOwnProps> {\n  /**\n   * Noise value, from\n   * @param {Number} noise\n   * @default\n   */\n  declare noise: NoiseOwnProps['noise'];\n\n  static type = 'Noise';\n\n  static defaults = noiseDefaultValues;\n\n  static uniformLocations = ['uNoise', 'uSeed'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const noise = this.noise;\n    for (let i = 0; i < data.length; i += 4) {\n      const rand = (0.5 - Math.random()) * noise;\n      data[i] += rand;\n      data[i + 1] += rand;\n      data[i + 2] += rand;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n    gl.uniform1f(uniformLocations.uSeed, Math.random());\n  }\n\n  isNeutralState() {\n    return this.noise === 0;\n  }\n}\n\nclassRegistry.setClass(Noise);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uStepH;\n  uniform float uNoise;\n  uniform float uSeed;\n  varying vec2 vTexCoord;\n  float rand(vec2 co, float seed, float vScale) {\n    return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n  }\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n    gl_FragColor = color;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/pixelate';\n\nexport type PixelateOwnProps = {\n  blocksize: number;\n};\n\nexport const pixelateDefaultValues: PixelateOwnProps = {\n  blocksize: 4,\n};\n\n/**\n * Pixelate filter class\n * @example\n * const filter = new Pixelate({\n *   blocksize: 8\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Pixelate extends BaseFilter<'Pixelate', PixelateOwnProps> {\n  declare blocksize: PixelateOwnProps['blocksize'];\n\n  static type = 'Pixelate';\n\n  static defaults = pixelateDefaultValues;\n\n  static uniformLocations = ['uBlocksize'];\n\n  /**\n   * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data, width, height } }: T2DPipelineState) {\n    for (let i = 0; i < height; i += this.blocksize) {\n      for (let j = 0; j < width; j += this.blocksize) {\n        const index = i * 4 * width + j * 4;\n        const r = data[index];\n        const g = data[index + 1];\n        const b = data[index + 2];\n        const a = data[index + 3];\n\n        for (let _i = i; _i < Math.min(i + this.blocksize, height); _i++) {\n          for (let _j = j; _j < Math.min(j + this.blocksize, width); _j++) {\n            const index = _i * 4 * width + _j * 4;\n            data[index] = r;\n            data[index + 1] = g;\n            data[index + 2] = b;\n            data[index + 3] = a;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicate when the filter is not gonna apply changes to the image\n   **/\n  isNeutralState() {\n    return this.blocksize === 1;\n  }\n\n  protected getFragmentSource(): string {\n    return fragmentSource;\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n  }\n}\n\nclassRegistry.setClass(Pixelate);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uBlocksize;\n  uniform float uStepW;\n  uniform float uStepH;\n  varying vec2 vTexCoord;\n  void main() {\n    float blockW = uBlocksize * uStepW;\n    float blockH = uBlocksize * uStepH;\n    int posX = int(vTexCoord.x / blockW);\n    int posY = int(vTexCoord.y / blockH);\n    float fposX = float(posX);\n    float fposY = float(posY);\n    vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n    vec4 color = texture2D(uTexture, squareCoords);\n    gl_FragColor = color;\n  }\n`;\n", "import { classRegistry } from '../ClassRegistry';\nimport { Color } from '../color/Color';\nimport { BaseFilter } from './BaseFilter';\nimport { fragmentShader } from './shaders/removeColor';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\n\nexport type RemoveColorOwnProps = {\n  color: string;\n  distance: number;\n  useAlpha: boolean;\n};\n\nexport const removeColorDefaultValues: RemoveColorOwnProps = {\n  color: '#FFFFFF',\n  distance: 0.02,\n  useAlpha: false,\n};\n\n/**\n * Remove white filter class\n * @example\n * const filter = new RemoveColor({\n *   threshold: 0.2,\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n * canvas.renderAll();\n */\nexport class RemoveColor extends BaseFilter<\n  'RemoveColor',\n  RemoveColorOwnProps\n> {\n  /**\n   * Color to remove, in any format understood by {@link Color}.\n   * @param {String} type\n   * @default\n   */\n  declare color: RemoveColorOwnProps['color'];\n\n  /**\n   * distance to actual color, as value up or down from each r,g,b\n   * between 0 and 1\n   **/\n  declare distance: RemoveColorOwnProps['distance'];\n\n  /**\n   * For color to remove inside distance, use alpha channel for a smoother deletion\n   * NOT IMPLEMENTED YET\n   **/\n  declare useAlpha: RemoveColorOwnProps['useAlpha'];\n\n  static type = 'RemoveColor';\n\n  static defaults = removeColorDefaultValues;\n\n  static uniformLocations = ['uLow', 'uHigh'];\n\n  getFragmentSource() {\n    return fragmentShader;\n  }\n\n  /**\n   * Applies filter to canvas element\n   * @param {Object} canvasEl Canvas element to apply filter to\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const distance = this.distance * 255,\n      source = new Color(this.color).getSource(),\n      lowC = [source[0] - distance, source[1] - distance, source[2] - distance],\n      highC = [\n        source[0] + distance,\n        source[1] + distance,\n        source[2] + distance,\n      ];\n\n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      if (\n        r > lowC[0] &&\n        g > lowC[1] &&\n        b > lowC[2] &&\n        r < highC[0] &&\n        g < highC[1] &&\n        b < highC[2]\n      ) {\n        data[i + 3] = 0;\n      }\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    const source = new Color(this.color).getSource(),\n      distance = this.distance,\n      lowC = [\n        0 + source[0] / 255 - distance,\n        0 + source[1] / 255 - distance,\n        0 + source[2] / 255 - distance,\n        1,\n      ],\n      highC = [\n        source[0] / 255 + distance,\n        source[1] / 255 + distance,\n        source[2] / 255 + distance,\n        1,\n      ];\n    gl.uniform4fv(uniformLocations.uLow, lowC);\n    gl.uniform4fv(uniformLocations.uHigh, highC);\n  }\n}\n\nclassRegistry.setClass(RemoveColor);\n", "export const fragmentShader = `\nprecision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vTexCoord);\n  if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n    gl_FragColor.a = 0.0;\n  }\n}\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type {\n  T2DPipelineState,\n  TWebGLPipelineState,\n  TWebGLUniformLocationMap,\n} from './typedefs';\nimport { isWebGLPipelineState } from './utils';\nimport { classRegistry } from '../ClassRegistry';\nimport { createCanvasElement } from '../util/misc/dom';\nimport type { XY } from '../Point';\n\nexport type TResizeType = 'bilinear' | 'hermite' | 'sliceHack' | 'lanczos';\n\nexport type ResizeOwnProps = {\n  resizeType: TResizeType;\n  scaleX: number;\n  scaleY: number;\n  lanczosLobes: number;\n};\n\nexport const resizeDefaultValues: ResizeOwnProps = {\n  resizeType: 'hermite',\n  scaleX: 1,\n  scaleY: 1,\n  lanczosLobes: 3,\n};\n\ntype ResizeDuring2DResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n};\n\ntype ResizeDuringWEBGLResize = Resize & {\n  rcpScaleX: number;\n  rcpScaleY: number;\n  horizontal: boolean;\n  width: number;\n  height: number;\n  taps: number[];\n  tempScale: number;\n  dH: number;\n  dW: number;\n};\n\n/**\n * Resize image filter class\n * @example\n * const filter = new Resize();\n * object.filters.push(filter);\n * object.applyFilters(canvas.renderAll.bind(canvas));\n */\nexport class Resize extends BaseFilter<'Resize', ResizeOwnProps> {\n  /**\n   * Resize type\n   * for webgl resizeType is just lanczos, for canvas2d can be:\n   * bilinear, hermite, sliceHack, lanczos.\n   * @default\n   */\n  declare resizeType: ResizeOwnProps['resizeType'];\n\n  /**\n   * Scale factor for resizing, x axis\n   * @param {Number} scaleX\n   * @default\n   */\n  declare scaleX: ResizeOwnProps['scaleX'];\n\n  /**\n   * Scale factor for resizing, y axis\n   * @param {Number} scaleY\n   * @default\n   */\n  declare scaleY: ResizeOwnProps['scaleY'];\n\n  /**\n   * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n   * @param {Number} lanczosLobes\n   * @default\n   */\n  declare lanczosLobes: ResizeOwnProps['lanczosLobes'];\n\n  static type = 'Resize';\n\n  static defaults = resizeDefaultValues;\n\n  static uniformLocations = ['uDelta', 'uTaps'];\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    this: ResizeDuringWEBGLResize,\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform2fv(\n      uniformLocations.uDelta,\n      this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height],\n    );\n    gl.uniform1fv(uniformLocations.uTaps, this.taps);\n  }\n\n  getFilterWindow(this: ResizeDuringWEBGLResize) {\n    const scale = this.tempScale;\n    return Math.ceil(this.lanczosLobes / scale);\n  }\n\n  getCacheKey(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return `${this.type}_${filterWindow}`;\n  }\n\n  getFragmentSource(this: ResizeDuringWEBGLResize): string {\n    const filterWindow = this.getFilterWindow();\n    return this.generateShader(filterWindow);\n  }\n\n  getTaps(this: ResizeDuringWEBGLResize) {\n    const lobeFunction = this.lanczosCreate(this.lanczosLobes),\n      scale = this.tempScale,\n      filterWindow = this.getFilterWindow(),\n      taps = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      taps[i - 1] = lobeFunction(i * scale);\n    }\n    return taps;\n  }\n\n  /**\n   * Generate vertex and shader sources from the necessary steps numbers\n   * @param {Number} filterWindow\n   */\n  generateShader(filterWindow: number) {\n    const offsets = new Array(filterWindow);\n    for (let i = 1; i <= filterWindow; i++) {\n      offsets[i - 1] = `${i}.0 * uDelta`;\n    }\n    return `\n      precision highp float;\n      uniform sampler2D uTexture;\n      uniform vec2 uDelta;\n      varying vec2 vTexCoord;\n      uniform float uTaps[${filterWindow}];\n      void main() {\n        vec4 color = texture2D(uTexture, vTexCoord);\n        float sum = 1.0;\n        ${offsets\n          .map(\n            (offset, i) => `\n              color += texture2D(uTexture, vTexCoord + ${offset}) * uTaps[${i}] + texture2D(uTexture, vTexCoord - ${offset}) * uTaps[${i}];\n              sum += 2.0 * uTaps[${i}];\n            `,\n          )\n          .join('\\n')}\n        gl_FragColor = color / sum;\n      }\n    `;\n  }\n\n  applyToForWebgl(this: ResizeDuringWEBGLResize, options: TWebGLPipelineState) {\n    options.passes++;\n    this.width = options.sourceWidth;\n    this.horizontal = true;\n    this.dW = Math.round(this.width * this.scaleX);\n    this.dH = options.sourceHeight;\n    this.tempScale = this.dW / this.width;\n    this.taps = this.getTaps();\n    options.destinationWidth = this.dW;\n    super.applyTo(options);\n    options.sourceWidth = options.destinationWidth;\n\n    this.height = options.sourceHeight;\n    this.horizontal = false;\n    this.dH = Math.round(this.height * this.scaleY);\n    this.tempScale = this.dH / this.height;\n    this.taps = this.getTaps();\n    options.destinationHeight = this.dH;\n    super.applyTo(options);\n    options.sourceHeight = options.destinationHeight;\n  }\n\n  /**\n   * Apply the resize filter to the image\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo(options: TWebGLPipelineState | T2DPipelineState) {\n    if (isWebGLPipelineState(options)) {\n      (this as unknown as ResizeDuringWEBGLResize).applyToForWebgl(options);\n    } else {\n      (this as unknown as ResizeDuring2DResize).applyTo2d(options);\n    }\n  }\n\n  isNeutralState() {\n    return this.scaleX === 1 && this.scaleY === 1;\n  }\n\n  lanczosCreate(lobes: number) {\n    return (x: number) => {\n      if (x >= lobes || x <= -lobes) {\n        return 0.0;\n      }\n      if (x < 1.1920929e-7 && x > -1.1920929e-7) {\n        return 1.0;\n      }\n      x *= Math.PI;\n      const xx = x / lobes;\n      return ((Math.sin(x) / x) * Math.sin(xx)) / xx;\n    };\n  }\n\n  applyTo2d(this: ResizeDuring2DResize, options: T2DPipelineState) {\n    const imageData = options.imageData,\n      scaleX = this.scaleX,\n      scaleY = this.scaleY;\n\n    this.rcpScaleX = 1 / scaleX;\n    this.rcpScaleY = 1 / scaleY;\n\n    const oW = imageData.width;\n    const oH = imageData.height;\n    const dW = Math.round(oW * scaleX);\n    const dH = Math.round(oH * scaleY);\n    let newData: ImageData;\n\n    if (this.resizeType === 'sliceHack') {\n      newData = this.sliceByTwo(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'hermite') {\n      newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'bilinear') {\n      newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n    } else if (this.resizeType === 'lanczos') {\n      newData = this.lanczosResize(options, oW, oH, dW, dH);\n    } else {\n      // this should never trigger, is here just for safety net.\n      newData = new ImageData(dW, dH);\n    }\n    options.imageData = newData;\n  }\n\n  /**\n   * Filter sliceByTwo\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  sliceByTwo(\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const imageData = options.imageData;\n    const mult = 0.5;\n    let doneW = false;\n    let doneH = false;\n    let stepW = oW * mult;\n    let stepH = oH * mult;\n    const resources = options.filterBackend.resources;\n    let sX = 0;\n    let sY = 0;\n    const dX = oW;\n    let dY = 0;\n    if (!resources.sliceByTwo) {\n      resources.sliceByTwo = createCanvasElement();\n    }\n    const tmpCanvas = resources.sliceByTwo;\n    if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n      tmpCanvas.width = oW * 1.5;\n      tmpCanvas.height = oH;\n    }\n    const ctx = tmpCanvas.getContext('2d')!;\n    ctx.clearRect(0, 0, oW * 1.5, oH);\n    ctx.putImageData(imageData, 0, 0);\n\n    dW = Math.floor(dW);\n    dH = Math.floor(dH);\n\n    while (!doneW || !doneH) {\n      oW = stepW;\n      oH = stepH;\n      if (dW < Math.floor(stepW * mult)) {\n        stepW = Math.floor(stepW * mult);\n      } else {\n        stepW = dW;\n        doneW = true;\n      }\n      if (dH < Math.floor(stepH * mult)) {\n        stepH = Math.floor(stepH * mult);\n      } else {\n        stepH = dH;\n        doneH = true;\n      }\n      ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n      sX = dX;\n      sY = dY;\n      dY += stepH;\n    }\n    return ctx.getImageData(sX, sY, dW, dH);\n  }\n\n  /**\n   * Filter lanczosResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  lanczosResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ): ImageData {\n    function process(u: number): ImageData {\n      let v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n      center.x = (u + 0.5) * ratioX;\n      icenter.x = Math.floor(center.x);\n      for (v = 0; v < dH; v++) {\n        center.y = (v + 0.5) * ratioY;\n        icenter.y = Math.floor(center.y);\n        a = 0;\n        red = 0;\n        green = 0;\n        blue = 0;\n        alpha = 0;\n        for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n          if (i < 0 || i >= oW) {\n            continue;\n          }\n          fX = Math.floor(1000 * Math.abs(i - center.x));\n          if (!cacheLanc[fX]) {\n            cacheLanc[fX] = {};\n          }\n          for (let j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n            if (j < 0 || j >= oH) {\n              continue;\n            }\n            fY = Math.floor(1000 * Math.abs(j - center.y));\n            if (!cacheLanc[fX][fY]) {\n              cacheLanc[fX][fY] = lanczos(\n                Math.sqrt(\n                  Math.pow(fX * rcpRatioX, 2) + Math.pow(fY * rcpRatioY, 2),\n                ) / 1000,\n              );\n            }\n            weight = cacheLanc[fX][fY];\n            if (weight > 0) {\n              idx = (j * oW + i) * 4;\n              a += weight;\n              red += weight * srcData[idx];\n              green += weight * srcData[idx + 1];\n              blue += weight * srcData[idx + 2];\n              alpha += weight * srcData[idx + 3];\n            }\n          }\n        }\n        idx = (v * dW + u) * 4;\n        destData[idx] = red / a;\n        destData[idx + 1] = green / a;\n        destData[idx + 2] = blue / a;\n        destData[idx + 3] = alpha / a;\n      }\n\n      if (++u < dW) {\n        return process(u);\n      } else {\n        return destImg;\n      }\n    }\n\n    const srcData = options.imageData.data,\n      destImg = options.ctx.createImageData(dW, dH),\n      destData = destImg.data,\n      lanczos = this.lanczosCreate(this.lanczosLobes),\n      ratioX = this.rcpScaleX,\n      ratioY = this.rcpScaleY,\n      rcpRatioX = 2 / this.rcpScaleX,\n      rcpRatioY = 2 / this.rcpScaleY,\n      range2X = Math.ceil((ratioX * this.lanczosLobes) / 2),\n      range2Y = Math.ceil((ratioY * this.lanczosLobes) / 2),\n      cacheLanc: Record<number, Record<number, number>> = {},\n      center: XY = { x: 0, y: 0 },\n      icenter: XY = { x: 0, y: 0 };\n\n    return process(0);\n  }\n\n  /**\n   * bilinearFiltering\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  bilinearFiltering(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    let a;\n    let b;\n    let c;\n    let d;\n    let x;\n    let y;\n    let i;\n    let j;\n    let xDiff;\n    let yDiff;\n    let chnl;\n    let color;\n    let offset = 0;\n    let origPix;\n    const ratioX = this.rcpScaleX;\n    const ratioY = this.rcpScaleY;\n    const w4 = 4 * (oW - 1);\n    const img = options.imageData;\n    const pixels = img.data;\n    const destImage = options.ctx.createImageData(dW, dH);\n    const destPixels = destImage.data;\n    for (i = 0; i < dH; i++) {\n      for (j = 0; j < dW; j++) {\n        x = Math.floor(ratioX * j);\n        y = Math.floor(ratioY * i);\n        xDiff = ratioX * j - x;\n        yDiff = ratioY * i - y;\n        origPix = 4 * (y * oW + x);\n\n        for (chnl = 0; chnl < 4; chnl++) {\n          a = pixels[origPix + chnl];\n          b = pixels[origPix + 4 + chnl];\n          c = pixels[origPix + w4 + chnl];\n          d = pixels[origPix + w4 + 4 + chnl];\n          color =\n            a * (1 - xDiff) * (1 - yDiff) +\n            b * xDiff * (1 - yDiff) +\n            c * yDiff * (1 - xDiff) +\n            d * xDiff * yDiff;\n          destPixels[offset++] = color;\n        }\n      }\n    }\n    return destImage;\n  }\n\n  /**\n   * hermiteFastResize\n   * @param {Object} canvasEl Canvas element to apply filter to\n   * @param {Number} oW Original Width\n   * @param {Number} oH Original Height\n   * @param {Number} dW Destination Width\n   * @param {Number} dH Destination Height\n   * @returns {ImageData}\n   */\n  hermiteFastResize(\n    this: ResizeDuring2DResize,\n    options: T2DPipelineState,\n    oW: number,\n    oH: number,\n    dW: number,\n    dH: number,\n  ) {\n    const ratioW = this.rcpScaleX,\n      ratioH = this.rcpScaleY,\n      ratioWHalf = Math.ceil(ratioW / 2),\n      ratioHHalf = Math.ceil(ratioH / 2),\n      img = options.imageData,\n      data = img.data,\n      img2 = options.ctx.createImageData(dW, dH),\n      data2 = img2.data;\n    for (let j = 0; j < dH; j++) {\n      for (let i = 0; i < dW; i++) {\n        const x2 = (i + j * dW) * 4;\n        let weight = 0;\n        let weights = 0;\n        let weightsAlpha = 0;\n        let gxR = 0;\n        let gxG = 0;\n        let gxB = 0;\n        let gxA = 0;\n        const centerY = (j + 0.5) * ratioH;\n        for (let yy = Math.floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n          const dy = Math.abs(centerY - (yy + 0.5)) / ratioHHalf,\n            centerX = (i + 0.5) * ratioW,\n            w0 = dy * dy;\n          for (let xx = Math.floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n            let dx = Math.abs(centerX - (xx + 0.5)) / ratioWHalf;\n            const w = Math.sqrt(w0 + dx * dx);\n            /* eslint-disable max-depth */\n            if (w > 1 && w < -1) {\n              continue;\n            }\n            //hermite filter\n            weight = 2 * w * w * w - 3 * w * w + 1;\n            if (weight > 0) {\n              dx = 4 * (xx + yy * oW);\n              //alpha\n              gxA += weight * data[dx + 3];\n              weightsAlpha += weight;\n              //colors\n              if (data[dx + 3] < 255) {\n                weight = (weight * data[dx + 3]) / 250;\n              }\n              gxR += weight * data[dx];\n              gxG += weight * data[dx + 1];\n              gxB += weight * data[dx + 2];\n              weights += weight;\n            }\n            /* eslint-enable max-depth */\n          }\n        }\n        data2[x2] = gxR / weights;\n        data2[x2 + 1] = gxG / weights;\n        data2[x2 + 2] = gxB / weights;\n        data2[x2 + 3] = gxA / weightsAlpha;\n      }\n    }\n    return img2;\n  }\n}\n\nclassRegistry.setClass(Resize);\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/saturation';\n\nexport type SaturationOwnProps = {\n  saturation: number;\n};\n\nexport const saturationDefaultValues: SaturationOwnProps = {\n  saturation: 0,\n};\n\n/**\n * Saturate filter class\n * @example\n * const filter = new Saturation({\n *   saturation: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Saturation extends BaseFilter<'Saturation', SaturationOwnProps> {\n  /**\n   * Saturation value, from -1 to 1.\n   * Increases/decreases the color saturation.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} saturation\n   * @default\n   */\n  declare saturation: SaturationOwnProps['saturation'];\n\n  static type = 'Saturation';\n\n  static defaults = saturationDefaultValues;\n\n  static uniformLocations = ['uSaturation'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.saturation;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n  }\n\n  isNeutralState() {\n    return this.saturation === 0;\n  }\n}\n\nclassRegistry.setClass(Saturation);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uSaturation;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float rgMax = max(color.r, color.g);\n    float rgbMax = max(rgMax, color.b);\n    color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n    color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n    color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n    gl_FragColor = color;\n  }\n`;\n", "import { BaseFilter } from './BaseFilter';\nimport type { T2DPipelineState, TWebGLUniformLocationMap } from './typedefs';\nimport { classRegistry } from '../ClassRegistry';\nimport { fragmentSource } from './shaders/vibrance';\n\nexport type VibranceOwnProps = {\n  vibrance: number;\n};\n\nexport const vibranceDefaultValues: VibranceOwnProps = {\n  vibrance: 0,\n};\n\n/**\n * Vibrance filter class\n * @example\n * const filter = new Vibrance({\n *   vibrance: 1\n * });\n * object.filters.push(filter);\n * object.applyFilters();\n */\nexport class Vibrance extends BaseFilter<'Vibrance', VibranceOwnProps> {\n  /**\n   * Vibrance value, from -1 to 1.\n   * Increases/decreases the saturation of more muted colors with less effect on saturated colors.\n   * A value of 0 has no effect.\n   *\n   * @param {Number} vibrance\n   * @default\n   */\n  declare vibrance: VibranceOwnProps['vibrance'];\n\n  static type = 'Vibrance';\n\n  static defaults = vibranceDefaultValues;\n\n  static uniformLocations = ['uVibrance'];\n\n  getFragmentSource() {\n    return fragmentSource;\n  }\n\n  /**\n   * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.\n   *\n   * @param {Object} options\n   * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n   */\n  applyTo2d({ imageData: { data } }: T2DPipelineState) {\n    const adjust = -this.vibrance;\n    for (let i = 0; i < data.length; i += 4) {\n      const max = Math.max(data[i], data[i + 1], data[i + 2]);\n      const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n      const amt = ((Math.abs(max - avg) * 2) / 255) * adjust;\n      data[i] += max !== data[i] ? (max - data[i]) * amt : 0;\n      data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * amt : 0;\n      data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * amt : 0;\n    }\n  }\n\n  /**\n   * Send data from this filter to its shader program's uniforms.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n   * @param {TWebGLUniformLocationMap} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n   */\n  sendUniformData(\n    gl: WebGLRenderingContext,\n    uniformLocations: TWebGLUniformLocationMap,\n  ) {\n    gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);\n  }\n\n  isNeutralState() {\n    return this.vibrance === 0;\n  }\n}\n\nclassRegistry.setClass(Vibrance);\n", "export const fragmentSource = `\n  precision highp float;\n  uniform sampler2D uTexture;\n  uniform float uVibrance;\n  varying vec2 vTexCoord;\n  void main() {\n    vec4 color = texture2D(uTexture, vTexCoord);\n    float max = max(color.r, max(color.g, color.b));\n    float avg = (color.r + color.g + color.b) / 3.0;\n    float amt = (abs(max - avg) * 2.0) * uVibrance;\n    color.r += max != color.r ? (max - color.r) * amt : 0.00;\n    color.g += max != color.g ? (max - color.g) * amt : 0.00;\n    color.b += max != color.b ? (max - color.b) * amt : 0.00;\n    gl_FragColor = color;\n  }\n`;\n"],
  "mappings": "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",
  "names": ["BaseConfiguration", "constructor", "_defineProperty", "this", "window", "devicePixelRatio", "config", "super", "configure", "arguments", "length", "Object", "assign", "addFonts", "paths", "fontPaths", "_objectSpread", "removeFonts", "forEach", "fontFamily", "clearFonts", "restoreDefaults", "keys", "defaults", "reduce", "acc", "key", "log", "severity", "_len", "optionalParams", "Array", "_key", "console", "FabricError", "Error", "message", "options", "concat", "SignalAbortedError", "context", "GLProbe", "WebGLProbe", "testPrecision", "gl", "precision", "fragmentSource", "fragmentShader", "createShader", "FRAGMENT_SHADER", "shaderSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "queryWebGL", "canvas", "getContext", "maxTextureSize", "getParameter", "MAX_TEXTURE_SIZE", "GLPrecision", "find", "getExtension", "loseContext", "isSupported", "textureSize", "copyPasteData", "env", "setEnv", "value", "getEnv", "document", "isTouchSupported", "navigator", "maxTouchPoints", "dispose", "getFabricDocument", "getFabricWindow", "getDevicePixelRatio", "_config$devicePixelRa", "Math", "max", "cache", "getFontCache", "_ref", "fontStyle", "fontWeight", "toLowerCase", "charWidthsCache", "fontCache", "cacheKey", "clearFontCache", "limitDimsByArea", "ar", "perfLimitSizeTotal", "roughWidth", "sqrt", "floor", "VERSION", "noop", "halfPI", "PI", "twoMathPi", "PiBy180", "iMatrix", "freeze", "DEFAULT_SVG_FONT_SIZE", "kRect", "CENTER", "LEFT", "TOP", "BOTTOM", "RIGHT", "NONE", "reNewline", "MOVING", "SCALING", "ROTATING", "ROTATE", "SKEWING", "RESIZING", "MODIFY_POLY", "MODIFY_PATH", "CHANGED", "SCALE", "SCALE_X", "SCALE_Y", "SKEW_X", "SKEW_Y", "FILL", "STROKE", "MODIFIED", "JSON", "SVG", "classRegistry", "Map", "has", "classType", "getClass", "get", "setClass", "classConstructor", "set", "type", "getSVGClass", "SVGTagName", "setSVGClass", "runningAnimations", "remove", "index", "indexOf", "splice", "cancelAll", "animations", "animation", "abort", "cancelByCanvas", "filter", "_animation$target", "target", "cancelByTarget", "Observable", "on", "arg0", "handler", "__eventListeners", "entries", "eventName", "off", "push", "once", "disposers", "_ref2", "d", "disposer", "args", "call", "_removeEventListener", "eventListener", "_ref3", "fire", "_this$__eventListener", "listenersForEvent", "i", "removeFromArray", "array", "idx", "cos", "angle", "abs", "sin", "angleSlice", "sign", "Point", "y", "x", "add", "that", "addEquals", "scalarAdd", "scalar", "scalarAddEquals", "subtract", "subtractEquals", "scalarSubtract", "scalarSubtractEquals", "multiply", "scalarMultiply", "scalarMultiplyEquals", "divide", "scalarDivide", "scalarDivideEquals", "eq", "lt", "lte", "gt", "gte", "lerp", "t", "min", "distanceFrom", "dx", "dy", "midPointFrom", "toString", "setXY", "setX", "setY", "setFromPoint", "swap", "clone", "rotate", "radians", "origin", "ZERO", "sinus", "cosinus", "p", "transform", "ignoreOffset", "isCollection", "fabricObject", "isArray", "_objects", "createCollectionMixin", "Base", "Collection", "_onObjectAdded", "object", "_onObjectRemoved", "_onStackOrderChanged", "objects", "size", "insertAt", "_len2", "_key2", "removed", "_len3", "_key3", "forEachObject", "callback", "getObjects", "_len4", "types", "_key4", "o", "isType", "item", "isEmpty", "contains", "deep", "includes", "some", "obj", "complexity", "memo", "current", "sendObjectToBack", "unshift", "bringObjectToFront", "sendObjectBackwards", "intersecting", "newIdx", "findNewLowerIndex", "bringObjectForward", "findNewUpperIndex", "moveObjectTo", "isOverlapping", "collectObjects", "left", "top", "width", "height", "includeIntersecting", "undefined", "tl", "br", "selectable", "visible", "intersectsWithRect", "isContainedWithinRect", "containsPoint", "CommonMethods", "_setOptions", "prop", "_setObject", "_set", "toggle", "property", "requestAnimFrame", "requestAnimationFrame", "cancelAnimFrame", "handle", "cancelAnimationFrame", "id", "uid", "createCanvasElement", "element", "createElement", "createImage", "createCanvasElementFor", "newCanvas", "toDataURL", "canvasEl", "format", "quality", "degreesToRadians", "degrees", "radiansToDegrees", "isIdentityMatrix", "mat", "every", "transformPoint", "invertTransform", "a", "r", "multiplyTransformMatrices", "b", "is2x2", "multiplyTransformMatrixArray", "matrices", "reduceRight", "product", "curr", "calcPlaneRotation", "atan2", "qrDecompose", "denom", "pow", "scaleX", "scaleY", "skewX", "skewY", "translateX", "translateY", "createTranslateMatrix", "createRotateMatrix", "angleRadiant", "cosValue", "sinValue", "createScaleMatrix", "angleToSkew", "tan", "createSkewXMatrix", "skewValue", "createSkewYMatrix", "calcDimensionsMatrix", "flipX", "flipY", "matrix", "composeMatrix", "scaleMatrix", "loadImage", "url", "signal", "crossOrigin", "Promise", "resolve", "reject", "aborted", "img", "err", "src", "addEventListener", "done", "onload", "onerror", "removeEventListener", "enlivenObjects", "reviver", "instances", "all", "map", "fromObject", "then", "fabricInstance", "catch", "error", "instance", "finally", "enlivenObjectEnlivables", "serializedObject", "promises", "values", "enlived", "pick", "source", "pickBy", "predicate", "ColorNameMap", "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgrey", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgrey", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen", "hue2rgb", "q", "rgb2Hsl", "g", "maxValue", "minValue", "h", "s", "l", "round", "fromAlphaToFloat", "parseFloat", "endsWith", "hexify", "toUpperCase", "padStart", "greyAverage", "avg", "Color", "color", "setSource", "_source", "_tryParsingColor", "sourceFromHex", "sourceFromRgb", "sourceFromHsl", "isUnrecognised", "getSource", "toRgb", "toRgba", "join", "toHsl", "toHsla", "toHex", "toHexa", "slice", "getAlpha", "setAlpha", "alpha", "toGrayscale", "toBlackWhite", "threshold", "average", "bOrW", "overlayWith", "otherColor", "otherSource", "R", "G", "B", "fromRgba", "match", "parsedValue", "fromHsla", "parseAngletoDegrees", "expandedValue", "split", "hex", "hexCouple", "parseInt", "lowercase", "numeric", "toFixed", "number", "fractionDigits", "Number", "parseUnit", "fontSize", "unit", "exec", "dpi", "DPI", "parsePreserveAspectRatioAttribute", "attribute", "firstPart", "secondPart", "trim", "alignX", "alignY", "align", "meetOrSlice", "matrixToSVG", "NUM_FRACTION_DIGITS", "colorPropToSVG", "colorValue", "opacityValue", "inlineStyle", "toLive", "opacity", "isFiller", "filler", "isSerializableFiller", "toObject", "isPattern", "offsetX", "isTextObject", "_renderText", "isActiveSelection", "getScrollLeftTop", "doc", "getDocumentFromElement", "elementLoop", "docElement", "documentElement", "body", "scrollLeft", "scrollTop", "parentNode", "host", "nodeType", "style", "position", "el", "ownerDocument", "getWindowFromElement", "_el$ownerDocument", "defaultView", "setCanvasDimensions", "ctx", "retinaScaling", "setAttribute", "scale", "setCSSDimensions", "makeElementUnselectable", "onselectstart", "userSelect", "StaticCanvasDOMManager", "createLowerCanvas", "lower", "getElementById", "hasAttribute", "_originalCanvasStyle", "cssText", "classList", "cleanupDOM", "removeAttribute", "setDimensions", "calcOffset", "_getWindowFromElement", "offset", "elemStyle", "getComputedStyle", "borderLeftWidth", "borderTopWidth", "paddingLeft", "paddingTop", "box", "docElem", "getBoundingClientRect", "scrollLeftTop", "clientLeft", "clientTop", "staticCanvasDefaults", "backgroundVpt", "backgroundColor", "overlayVpt", "overlayColor", "includeDefaultValues", "svgViewportTransformation", "renderOnAddRemove", "skipOffscreen", "enableRetinaScaling", "imageSmoothingEnabled", "controlsAboveOverlay", "allowTouchScrolling", "viewportTransform", "StaticCanvas", "lowerCanvasEl", "_this$elements$lower", "elements", "contextContainer", "_this$elements$lower2", "getDefaults", "ownDefaults", "initElements", "_setDimensionsImpl", "skipControlsDrawing", "calcViewportBoundaries", "requestRenderAll", "setCoords", "getRetinaScaling", "_offset", "getWidth", "getHeight", "setWidth", "setHeight", "dimensions", "cssOnly", "backstoreOnly", "hasLostContext", "getZoom", "setViewportTransform", "vpt", "zoomToPoint", "point", "before", "newPoint", "after", "setZoom", "absolutePan", "relativePan", "getElement", "clearContext", "clearRect", "clear", "backgroundImage", "overlayImage", "renderAll", "cancelRequestedRender", "destroyed", "renderCanvas", "renderAndReset", "nextRenderHandle", "disposed", "iVpt", "vptCoords", "tr", "bl", "drawControls", "_ctx", "v", "path", "clipPath", "patternQuality", "_renderBackground", "save", "_renderObjects", "restore", "shouldCache", "_transformDone", "renderCache", "forClipping", "drawClipPathOnCanvas", "_renderOverlay", "__cleanupTask", "globalCompositeOperation", "zoomX", "zoomY", "drawImage", "_cacheCanvas", "cacheTranslationX", "cacheTranslationY", "len", "render", "_renderBackgroundOrOverlay", "fill", "needsVpt", "isAFiller", "beginPath", "moveTo", "lineTo", "closePath", "fillStyle", "offsetY", "m", "gradientTransform", "patternTransform", "getCenter", "getCenterPoint", "centerObjectH", "_centerObject", "centerObjectV", "centerObject", "viewportCenterObject", "getVpCenter", "viewportCenterObjectH", "viewportCenterObjectV", "center", "toDatalessJSON", "propertiesToInclude", "toDatalessObject", "_toObjectMethod", "toJSON", "methodName", "clipPathData", "excludeFromExport", "_toObject", "version", "__serializeBgOverlay", "originalValue", "data", "bgImage", "bgColor", "background", "overlay", "toSVG", "markup", "_setSVGPreamble", "_setSVGHeader", "clipPathId", "_setSVGBgOverlayColor", "_setSVGBgOverlayImage", "_setSVGObjects", "suppressPreamble", "encoding", "optViewBox", "viewBox", "createSVGFontFacesMarkup", "createSVGRefElementsMarkup", "createSVGClipPathMarkup", "toClipPathSVG", "shouldTransform", "additionalTransform", "fontList", "styles", "styleRow", "fontListMarkup", "_setSVGObject", "bgOrOverlay", "repeat", "finalWidth", "finalHeight", "loadFromJSON", "json", "serialized", "parse", "enlivedMap", "properties", "cloneWithoutData", "multiplier", "finalMultiplier", "toCanvasElement", "scaledWidth", "scaledHeight", "zoom", "originalWidth", "originalHeight", "originalSkipControlsDrawing", "newZoom", "vp", "newVp", "originalRetina", "objectsToRender", "task", "destroy", "kill", "touchEvents", "getPointer", "event", "scroll", "_evt", "touchProp", "changedTouches", "clientX", "clientY", "isTouchEvent", "pointerType", "stopEvent", "e", "preventDefault", "stopPropagation", "makeBoundingBoxFromPoints", "points", "addTransformToObject", "applyTransformToObject", "calcOwnMatrix", "_qrDecompose", "otherOptions", "_objectWithoutProperties", "_excluded", "setPositionByOrigin", "resetObjectTransform", "saveObjectTransform", "sizeAfterTransform", "dimX", "dimY", "bbox", "calcPlaneChangeMatrix", "from", "sendPointToPlane", "to", "sendVectorToPlane", "sendObjectToPlane", "fireEvent", "_target$canvas", "originOffset", "bottom", "right", "resolveOrigin", "originValue", "NOT_ALLOWED_CURSOR", "isTransformCentered", "originX", "originY", "invertOrigin", "isLocked", "lockingKey", "commonEventInfo", "eventData", "pointer", "findCornerQuadrant", "control", "cornerAngle", "getTotalAngle", "getLocalPoint", "corner", "controls", "padding", "localPoint", "getRelativeCenterPoint", "translateToGivenOrigin", "dragHandler", "newLeft", "newTop", "moveX", "moveY", "FabricObjectSVGExportMixin", "getSvgStyles", "skipShadow", "fillRule", "strokeWidth", "strokeDashArray", "strokeDashOffset", "strokeLineCap", "strokeLineJoin", "strokeMiterLimit", "visibility", "getSvgFilter", "stroke", "shadow", "getSvgCommons", "getSvgTransform", "full", "calcTransformMatrix", "svgTransform", "_toSVG", "_reviver", "_createBaseSVGMarkup", "_createBaseClipPathSVGMarkup", "objectMarkup", "commonPieces", "noStyle", "withShadow", "styleInfo", "shadowInfo", "vectorEffect", "strokeUniform", "absoluteClipPath", "absolutePositioned", "clipPathMarkup", "addPaintOrder", "paintFirst", "getSvgRegex", "arr", "RegExp", "reNum", "String", "raw", "_templateObject", "_taggedTemplateLiteral", "svgNS", "reFontDeclaration", "attributesMap", "cx", "cy", "display", "fSize", "cPath", "svgValidTagNamesRegEx", "svgViewBoxElementsRegEx", "svgValidParentsRegEx", "reViewBoxAttrValue", "unitVectorX", "zero", "rotateVector", "vector", "createVector", "magnitude", "calcAngleBetweenVectors", "crossProduct", "dotProduct", "calcVectorRotation", "getUnitVector", "getOrthonormalVector", "counterClockwise", "isBetweenVectors", "AxB", "AxT", "BxT", "shadowOffsetRegex", "reOffsetsAndBlur", "Shadow", "parseShadow", "shadowStr", "blur", "replace", "fBoxX", "fBoxY", "affectStroke", "nonScaling", "capValue", "stateProperties", "cacheProperties", "fabricObjectDefaultValues", "minScaleLimit", "objectCaching", "inverted", "centeredRotation", "centeredScaling", "dirty", "normalize", "c", "asin", "elastic", "defaultEasing", "easeOutBounce", "easeInBounce", "easeInCirc", "easeInCubic", "easeInElastic", "normA", "normS", "normP", "easeInExpo", "easeInOutBounce", "easeInOutCirc", "easeInOutCubic", "easeInOutElastic", "normC", "easeInOutExpo", "easeInOutQuad", "easeInOutQuart", "easeInOutQuint", "easeInOutSine", "easeInQuad", "easeInQuart", "easeInQuint", "easeInSine", "easeOutCirc", "easeOutCubic", "easeOutElastic", "easeOutExpo", "easeOutQuad", "easeOutQuart", "easeOutQuint", "easeOutSine", "defaultAbort", "AnimationBase", "startValue", "byValue", "duration", "delay", "easing", "onStart", "onChange", "onComplete", "tick", "bind", "_onStart", "_onChange", "_onComplete", "_abort", "endValue", "calculate", "state", "_state", "isDone", "start", "firstTick", "timestamp", "startTime", "Date", "register", "setTimeout", "durationMs", "boundDurationMs", "durationProgress", "valueProgress", "unregister", "ValueAnimation", "timeElapsed", "ArrayAnimation", "defaultColorEasing", "wrapColorCallback", "rgba", "ColorAnimation", "startColor", "endColor", "animate", "animateColor", "Intersection", "status", "append", "T", "A", "infinite", "AB", "other", "hits", "inter", "intersectSegmentSegment", "a1", "a2", "b1", "b2", "aInfinite", "bInfinite", "a2xa1x", "a2ya1y", "b2xb1x", "b2yb1y", "a1xb1x", "a1yb1y", "uaT", "ubT", "uB", "ua", "ub", "segmentsCoincide", "isPointContained", "s1", "s2", "l1", "l2", "intersectLineLine", "result", "intersectLinePolygon", "points1", "points2", "coincidences", "intersectSegmentPolygon", "r1", "r2", "topRight", "bottomLeft", "intersectPolygonPolygon", "ObjectGeometry", "getX", "getXY", "getY", "getRelativeX", "setRelativeX", "getRelativeY", "setRelativeY", "relativePosition", "getRelativeXY", "group", "setRelativeXY", "isStrokeAccountedForInDimensions", "getCoords", "aCoords", "calcACoords", "coords", "intersectPolygonRectangle", "intersectsWithObject", "intersection", "isContainedWithinObject", "getBoundingRect", "isPointInPolygon", "isOnScreen", "isPartiallyOnScreen", "getScaledWidth", "_getTransformedDimensions", "getScaledHeight", "scaleToWidth", "boundingRectFactor", "scaleToHeight", "getCanvasRetinaScaling", "_this$canvas", "getViewportTransform", "_this$canvas2", "rotateMatrix", "tMatrix", "finalMatrix", "dim", "w", "transformMatrixKey", "skipGroup", "prefix", "matrixCache", "ownMatrixCache", "_getNonTransformedDimensions", "_calculateCurrentDimensions", "dimOptions", "preScalingStrokeValue", "postScalingStrokeValue", "finalDimensions", "fromOriginX", "fromOriginY", "toOriginX", "toOriginY", "translateToCenterPoint", "translateToOriginPoint", "relCenter", "getPointByOrigin", "pos", "_getLeftTopCoords", "FabricObject", "name", "setOptions", "_createCacheCanvas", "_cacheContext", "_updateCacheCanvas", "_limitCacheSize", "dims", "maxCacheSideLimit", "minCacheSideLimit", "limX", "limY", "capped", "_getCacheCanvasDimensions", "objectScale", "getTotalObjectScaling", "neededX", "neededY", "minCacheSize", "dimensionsChanged", "zoomChanged", "drawingWidth", "drawingHeight", "shouldRedraw", "additionalWidth", "additionalHeight", "shouldResizeCanvas", "canvasWidth", "canvasHeight", "sizeGrowing", "getHeightOfLine", "ceil", "setTransform", "translate", "needFullTransform", "contextTop", "getObjectScaling", "retina", "getObjectOpacity", "_constrainScale", "isChanged", "parent", "isNotVisible", "_setupCompositeOperation", "drawSelectionBackground", "_setOpacity", "_setShadow", "drawCacheOnCanvas", "_removeCacheCanvas", "drawObject", "isCacheDirty", "parentClipPaths", "hasStroke", "hasFill", "needsItsOwnCache", "ownCaching", "isOnACache", "willDrawShadow", "drawClipPathOnCache", "canvasWithClipPath", "originalFill", "originalStroke", "_setClippingProperties", "_render", "_drawClipPath", "createClipPathLayer", "prevClipPath", "skipCanvas", "fillRect", "_removeShadow", "globalAlpha", "_setStrokeStyles", "decl", "lineWidth", "lineCap", "lineDashOffset", "lineJoin", "miterLimit", "gradientUnits", "_applyPatternForTransformedGradient", "strokeStyle", "_applyPatternGradientTransform", "_setFillStyles", "_setLineDash", "dashArray", "setLineDash", "sx", "sy", "multX", "multY", "scaling", "shadowColor", "shadowBlur", "browserShadowBlurConstant", "shadowOffsetX", "shadowOffsetY", "_renderPaintInOrder", "_renderStroke", "_renderFill", "_pCtx$createPattern", "pCanvas", "pCtx", "createPattern", "_findCenterFromElement", "objectForm", "cloneAsImage", "origParams", "originalGroup", "originalShadow", "canvasProvider", "withoutTransform", "withoutShadow", "boundingRect", "shadowOffset", "originalCanvas", "setOnGroup", "animatable", "_animate", "propIsColor", "colorProperties", "animationOptions", "isDescendantOf", "getAncestors", "ancestors", "findCommonAncestors", "fork", "otherFork", "common", "otherAncestors", "ancestor", "j", "hasCommonAncestors", "commonAncestors", "isInFrontOf", "ancestorData", "firstCommonAncestor", "headOfFork", "pop", "headOfOtherFork", "thisIndex", "otherIndex", "propertiesToSerialize", "customProperties", "toFixedBound", "val", "_removeDefaultValues", "baseValues", "getPrototypeOf", "baseValue", "serializedObjectOptions", "_ref4", "extraParam", "_excluded2", "enlivedObjectOptions", "_fromObject", "wrapWithFireEvent", "actionHandler", "extraEventInfo", "actionPerformed", "wrapWithFixedAnchor", "centerPoint", "constraint", "changeWidth", "changeObjectWidth", "strokePadding", "oldWidth", "newWidth", "renderCircleControl", "styleOverride", "xSize", "sizeX", "cornerSize", "ySize", "sizeY", "transparentCorners", "cornerStrokeColor", "myLeft", "myTop", "cornerColor", "arc", "renderSquareControl", "xSizeBy2", "ySizeBy2", "strokeRect", "Control", "shouldActivate", "controlKey", "_fabricObject$canvas", "getActiveObject", "isControlVisible", "getActionHandler", "getMouseDownHandler", "mouseDownHandler", "getMouseUpHandler", "mouseUpHandler", "cursorStyleHandler", "cursorStyle", "getActionName", "actionName", "getVisibility", "_fabricObject$_contro", "_fabricObject$_contro2", "_controlsVisibility", "setVisibility", "positionHandler", "currentControl", "calcCornerCoords", "objectCornerSize", "centerX", "centerY", "isTouch", "touchSizeX", "touchSizeY", "cornerStyle", "rotationStyleHandler", "lockRotation", "rotationWithSnapping", "rotateObjectWithSnapping", "ex", "ey", "theta", "pivotPoint", "lastAngle", "curAngle", "snapAngle", "snapThreshold", "rightAngleLocked", "leftAngleLocked", "hasRotated", "scaleIsProportional", "uniformIsToggled", "uniScaleKey", "uniformScaling", "scalingIsForbidden", "by", "scaleProportionally", "lockX", "lockY", "scaleMap", "scaleCursorStyleHandler", "n", "scaleObject", "signX", "signY", "gestureScale", "distance", "original", "oldScaleX", "oldScaleY", "scalingEqually", "scaleObjectFromCorner", "scalingX", "scaleObjectX", "scalingY", "scaleObjectY", "AXIS_KEYS", "counterAxis", "skew", "lockSkewing", "flip", "skewMap", "skewCursorStyleHandler", "skewHandler", "axis", "originKey", "lockSkewingKey", "skewKey", "flipKey", "counterOriginKey", "counterFlipKey", "counterOriginFactor", "skewingSide", "finalHandler", "skewingBefore", "skewingStart", "shearingStart", "shearing", "skewing", "atan", "changed", "dimBefore", "dimAfter", "compensationFactor", "skewHandlerX", "skewHandlerY", "isAltAction", "altActionKey", "scaleOrSkewActionName", "isAlternative", "scaleSkewCursorStyleHandler", "scalingXOrSkewingY", "scalingYOrSkewingX", "createObjectDefaultControls", "ml", "mr", "mb", "mt", "mtr", "withConnection", "createResizeControls", "createTextboxDefaultControls", "InteractiveFabricObject", "createControls", "targetCanvas", "noScaleCache", "_currentTransform", "action", "startsWith", "getActiveControl", "__corner", "coord", "oCoords", "findControl", "forTouch", "hasControls", "cornerEntries", "touchCorner", "calcOCoords", "rMatrix", "positionMatrix", "startMatrix", "transformOptions", "forEachControl", "_calcCornerCoords", "touchCornerSize", "fn", "selectionBackgroundColor", "_activeObject", "wh", "strokeBorders", "_drawBorders", "borderColor", "borderDashArray", "drawControlsConnectingLines", "_renderControls", "hasBorders", "styleOptions", "shouldDrawBorders", "shouldDrawControls", "borderScaleFactor", "isMoving", "borderOpacityWhenMoving", "drawBorders", "forActiveSelection", "shouldStroke", "cornerDashArray", "setControlVisible", "setControlsVisibility", "clearContextTop", "restoreManually", "onDeselect", "_options", "onSelect", "shouldStartDragging", "_e", "onDragStart", "canDrop", "renderDragSourceEffect", "renderDropTargetEffect", "applyMixins", "derivedCtor", "constructors", "baseCtor", "getOwnPropertyNames", "prototype", "defineProperty", "getOwnPropertyDescriptor", "create", "lockMovementX", "lockMovementY", "lockScalingX", "lockScalingY", "lockSkewingX", "lockSkewingY", "lockScalingFlip", "evented", "perPixelTargetFind", "activeOn", "hoverCursor", "moveCursor", "isTransparent", "tolerance", "getImageData", "StrokeProjectionsBase", "strokeProjectionMagnitude", "strokeUniformScalar", "createSideVector", "projectOrthogonally", "applySkew", "calcOrthogonalProjection", "isSkewed", "scaleUnitVector", "unitVector", "zeroVector", "StrokeLineJoinProjections", "vector1", "vector2", "C", "AC", "bisector", "orthogonalProjection", "correctSide", "getOrthogonalRotationFactor", "projectBevel", "projections", "projectMiter", "hypotUnitScalar", "miterVector", "projectRoundNoSkew", "startCircle", "endCircle", "projectRoundWithSkew", "circleRadius", "newY", "furthestY", "newX", "furthestX", "projectRound", "isStraightLine", "newOrigin", "proj0", "proj1", "comparisonVector", "isProj0Start", "projectPoints", "project", "originPoint", "projectedPoint", "StrokeLineCapProjections", "projectButt", "projection", "projectSquare", "strokePointingOut", "projectedA", "projectStrokeOnPoints", "openPath", "reduced", "findIndexRight", "cloneStyles", "newObj", "keyInner", "escapeXml", "string", "graphemeSplit", "textstring", "graphemes", "chr", "getWholeChar", "str", "code", "charCodeAt", "isNaN", "charAt", "next", "prev", "firstLetterOnly", "hasStyleChanged", "prevStyle", "thisStyle", "forTextSpans", "textBackgroundColor", "deltaY", "overline", "underline", "linethrough", "stylesToArray", "text", "textLines", "stylesArray", "charIndex", "chars", "end", "stylesFromArray", "stylesObject", "styleIndex", "SHARED_ATTRIBUTES", "selectorMatches", "selector", "nodeName", "classNames", "getAttribute", "azAz", "matcher", "splitClassNames", "elementMatchesRule", "selectors", "parentMatching", "firstMatching", "parentElement", "normalizeAttr", "attr", "_attributesMap", "regex", "cleanupSvgAttribute", "attributeValue", "_templateObject2", "_templateObject3", "_templateObject4", "_templateObject5", "_templateObject6", "transforms", "transformList", "_templateObject7", "reTransformList", "reTransform", "reTransformAll", "parseTransformAttribute", "test", "matchAll", "transformMatch", "matchedParams", "operation", "rawArgs", "arg1", "arg2", "arg3", "arg4", "arg5", "arg", "normalizeValue", "parentAttributes", "parsed", "ouputValue", "transformMatrix", "fillIndex", "strokeIndex", "parseFontDeclaration", "oStyle", "lineHeight", "parseStyleString", "chunk", "parseStyleAttribute", "colorAttributesMap", "parseAttributes", "attributes", "cssRules", "parentFontSize", "ownAttributes", "rule", "normalizedStyle", "normalizedAttr", "normalizedValue", "font", "mergedAttrs", "colorAttr", "RECT_PROPS", "Rect", "_initRxRy", "rx", "ry", "isRounded", "bezierCurveTo", "_parseAttributes", "ATTRIBUTE_NAMES", "restOfparsedAttributes", "Boolean", "LAYOUT_TYPE_INITIALIZATION", "LAYOUT_TYPE_ADDED", "LAYOUT_TYPE_REMOVED", "LAYOUT_TYPE_IMPERATIVE", "getObjectBounds", "destinationGroup", "currentGroup", "objectCenter", "accountForStroke", "strokeUniformVector", "scalingStrokeWidth", "sizeVector", "LayoutStrategy", "calcLayoutResult", "shouldPerformLayout", "calcBoundingBox", "prevStrategy", "strategy", "shouldLayoutClipPath", "getInitialSize", "overrides", "bboxSize", "bboxCenter", "actualSize", "relativeCorrection", "FitContentLayout", "LAYOUT_MANAGER", "LayoutManager", "_subscriptions", "performLayout", "strictContext", "bubbles", "_prevLayoutStrategy", "onBeforeLayout", "layoutResult", "getLayoutResult", "commitLayout", "onAfterLayout", "attachHandlers", "trigger", "subscribe", "unsubscribe", "_context", "delete", "unsubscribeTargets", "targets", "subscribeTargets", "tricklingContext", "layoutManager", "prevCenter", "nextCenter", "correction", "_context$x", "_context$y", "layoutObjects", "layoutObject", "_", "bubblingContext", "NoopLayoutManager", "Group", "groupInit", "_options$layoutManage", "__objectSelectionTracker", "__objectSelectionMonitor", "__objectSelectionDisposer", "enterGroup", "canEnterGroup", "_filterObjectsBeforeEnteringGroup", "allowedObjects", "_onAfterObjectsChange", "removeParentTransform", "exitGroup", "_shouldSetNestedCoords", "subTargetCheck", "removeAll", "_activeObjects", "selected", "activeObjects", "_watchObject", "watch", "_enterGroup", "activeObject", "_exitGroup", "ownCache", "preserveObjectStacking", "triggerLayout", "__serializeObjects", "method", "_includeDefaultValues", "originalDefaults", "_createSVGBgRect", "fillStroke", "commons", "svgString", "bg", "abortable", "hydratedOptions", "layoutClass", "strategyClass", "interactive", "findScaleToFit", "destination", "findScaleToCover", "commaWsp", "reArcCommandPoints", "repeatedCommands", "M", "segmentToBezier", "theta1", "theta2", "cosTh", "sinTh", "cx1", "cy1", "mT", "fromX", "fromY", "costh1", "sinth1", "costh2", "sinth2", "toX", "toY", "calcVectorAngle", "ux", "uy", "vx", "vy", "ta", "tb", "getBoundsOfCurve", "begx", "begy", "cp1x", "cp1y", "cp2x", "cp2y", "endx", "endy", "argsString", "cachesBoundsOfCurve", "boundsOfCurveCache", "tvalues", "bounds", "b2ac", "sqrtb2ac", "t1", "t2", "jlen", "iterator", "getPointOnCubicBezierIterator", "fromArcToBeziers", "fx", "fy", "rot", "large", "sweep", "tx", "ty", "segsNorm", "arcToSegments", "rotateX", "root", "sinTheta", "px", "py", "rx2", "ry2", "py2", "px2", "pl", "_rx", "_ry", "mTheta", "dtheta", "segments", "mDelta", "th3", "makePathSimpler", "x1", "y1", "destinationPath", "previous", "controlX", "controlY", "parsedCommand", "converted", "calcLineLength", "x2", "y2", "pct", "c1", "c2", "c3", "c4", "QB1", "QB2", "QB3", "getTangentCubicIterator", "p1x", "p1y", "p2x", "p2y", "p3x", "p3y", "p4x", "p4y", "qb1", "qb2", "qb3", "tangentX", "tangentY", "getPointOnQuadraticBezierIterator", "getTangentQuadraticIterator", "invT", "pathIterator", "tempP", "tmpLen", "perc", "findPercentageForDistance", "segInfo", "nextLen", "nextStep", "lastPerc", "angleFinder", "getPathSegmentsInfo", "tempInfo", "totalLength", "info", "basicInfo", "command", "destX", "destY", "getPointOnPath", "infos", "segPercent", "segment", "rePathCmdAll", "regExpArcCommandPoints", "reMyNum", "commandLengths", "parsePath", "pathString", "_pathString$match", "chain", "matchStr", "commandLetter", "commandLength", "paramArr", "lastIndex", "out", "newCommand", "transformedCommand", "getSmoothPathFromPoints", "p1", "p2", "multSignX", "multSignY", "manyPoints", "midPoint", "joinPath", "pathData", "setStyle", "elementStyle", "setProperty", "getRandomInt", "random", "request", "xhr", "removeListener", "ontimeout", "onreadystatechange", "readyState", "open", "send", "removeTransformMatrixForSvgParsing", "preserveAspectRatioOptions", "cropX", "cropY", "offsetLeft", "offsetTop", "_newCanvas$getContext", "getRegularPolygonPath", "numVertexes", "radius", "interiorAngle", "rotationAdjustment", "rad", "commonAttributes", "groupSVGElements", "mergeClipPaths", "_b$group", "removeTransformFromObject", "finalTransform", "rotatePoint", "transformPath", "pathOffset", "pathSegment", "newSegment", "CanvasDOMManager", "containerClass", "upperCanvasEl", "createUpperCanvas", "upper", "applyCanvasStyle", "container", "createContainerElement", "replaceChild", "className", "removeChild", "SelectableCanvas", "_this$elements$upper", "_this$elements$upper2", "wrapperEl", "_objectsToRender", "deselected", "_discardActiveObject", "_hoveredTarget", "_hoveredTargets", "_chooseObjectsToRender", "contextTopDirty", "_groupSelector", "isDrawingMode", "renderTopLayer", "_isCurrentlyDrawing", "freeDrawingBrush", "selection", "_drawSelection", "renderTop", "setTargetFindTolerance", "targetFindTolerance", "pixelFindCanvasEl", "pixelFindContext", "isTargetTransparent", "selectionBgc", "enhancedTolerance", "_isSelectionKeyPressed", "sKey", "selectionKey", "_shouldClearSelection", "getActiveObjects", "_shouldCenterTransform", "modifierKeyPressed", "centerTransform", "_getOriginFromCorner", "controlName", "_setupCurrentTransform", "alreadySelected", "_control$getActionHan", "getScenePoint", "getActionFromCorner", "altKey", "centeredKey", "lastX", "lastY", "shiftKey", "setCursor", "cursor", "deltaX", "extent", "strokeOffset", "selectionLineWidth", "minX", "minY", "maxX", "maxY", "selectionColor", "selectionBorderColor", "selectionDashArray", "findTarget", "skipTargetFind", "getViewportPoint", "aObjects", "searchPossibleTargets", "subTargets", "altSelectionKey", "_pointIsInObjectSelectionArea", "viewportZoom", "angleRadians", "cosP", "sinP", "cosPSinP", "cosPMinusSinP", "_checkTarget", "isEditing", "_searchPossibleTargets", "subTarget", "_pointer", "_absolutePointer", "fromViewport", "boundsWidth", "boundsHeight", "cssScale", "_resetTransformEventData", "_setBrushStyles", "willReadFrequently", "getTopContext", "getSelectionContext", "getSelectionElement", "active", "_fireSelectionEvents", "oldObjects", "somethingChanged", "invalidate", "added", "setActiveObject", "currentActives", "_setActiveObject", "prevActiveObject", "endCurrentTransform", "discardActiveObject", "discarded", "_finalizeCurrentTransform", "_scaling", "originalProperties", "_realizeGroupTransformOnObject", "originalValues", "selectionFullyContained", "defaultCursor", "freeDrawingCursor", "notAllowedCursor", "stopContextMenu", "fireRightClick", "fireMiddleClick", "enablePointerEvents", "TextEditingManager", "cb", "hiddenTextarea", "focus", "__disposer", "exitTextEditing", "exitEditing", "onMouseMove", "_this$target", "updateSelectionOnMouseMove", "addEventOptions", "passive", "getEventPoints", "viewportPoint", "scenePoint", "absolutePointer", "addListener", "syntheticEventConfig", "mouse", "in", "targetIn", "targetOut", "canvasIn", "canvasOut", "drag", "Canvas", "eventHandler", "addOrRemove", "_getEventPrefix", "functor", "_eventjsFunctor", "canvasElement", "eventTypePrefix", "_onResize", "_onMouseDown", "_onMouseMove", "_onMouseOut", "_onMouseEnter", "_onMouseWheel", "_onContextMenu", "_onDoubleClick", "_onDragStart", "_onDragEnd", "_onDragOver", "_onDragEnter", "_onDragLeave", "_onDrop", "_onTouchStart", "removeListeners", "_onMouseUp", "_onTouchEnd", "clearTimeout", "_willAddMouseDown", "__onMouseWheel", "shared", "nestedTarget", "_isClick", "_dragSource", "_onDragProgress", "_renderDragEffects", "dropTarget", "_dropTarget", "didDrop", "dataTransfer", "dropEffect", "dragSource", "_draggedoverTarget", "findDragTargets", "eventType", "_fireEnterLeaveEvents", "_basicEventHandler", "_cacheTransformEventData", "_handleEvent", "getPointerId", "evt", "identifier", "pointerId", "_isMainEvent", "isPrimary", "touches", "mainTouchId", "shouldPreventScrolling", "currentActiveObject", "__onMouseDown", "_target", "__onMouseUp", "__onMouseMove", "_shouldRender", "_this$_activeObject", "isClick", "button", "_onMouseUpInDrawingMode", "shouldRender", "targetWasActive", "handleSelection", "found", "originalControl", "originalMouseUpHandler", "_setCursorFromEvent", "currentTarget", "currentSubTargets", "_onMouseDownInDrawingMode", "onMouseDown", "_onMouseMoveInDrawingMode", "onMouseUp", "grouped", "handleMultiSelection", "groupSelector", "_transformObject", "_fireOverOutEvents", "textEditingManager", "fireSyntheticInOutEvents", "oldTarget", "fireCanvas", "draggedoverTarget", "targetChanged", "outOpt", "nextTarget", "inOpt", "previousTarget", "localPointer", "_performTransformAction", "activeSelection", "reverse", "isAS", "prevActiveObjects", "multiSelectAdd", "newActiveSelection", "point1", "point2", "collectedObjects", "klass", "linearDefaultCoords", "radialDefaultCoords", "ifNaN", "valueIfNaN", "RE_PERCENT", "isPercent", "parsePercent", "NaN", "RE_KEY_VALUE_PAIRS", "RE_KEY_VALUE", "parseColorStop", "keyValuePairs", "parseColorStops", "opacityAttr", "colorStops", "colorStopEls", "getElementsByTagName", "parseType", "parseGradientUnits", "getValue", "parseCoords", "valuesToConvert", "finalValue", "propValue", "Gradient", "addColorStop", "colorStop", "preTransform", "sort", "_renderPathCommands", "needsSwap", "minRadius", "percentageShift", "gradient", "createLinearGradient", "createRadialGradient", "svgOptions", "viewBoxWidth", "viewBoxHeight", "Pattern", "isImageSource", "isCanvasSource", "sourceToString", "complete", "naturalWidth", "naturalHeight", "patternSource", "patternOffsetX", "patternOffsetY", "patternWidth", "patternHeight", "BaseBrush", "_saveAndTransform", "needsFullRender", "_resetShadow", "_isOutSideCanvas", "Path", "_setPath", "adjustPosition", "setBoundingBox", "_calcBoundsFromPath", "quadraticCurveTo", "pathCmd", "sourcePath", "_getOffsetTransform", "digits", "_calcDimensions", "subpathStartX", "subpathStartY", "parsedAttributes", "PencilBrush", "_points", "_hasStraightLine", "drawStraightLine", "straightLineKey", "_prepareForDrawing", "_addPoint", "limitedToCanvasSize", "oldEnd", "drawSegment", "_finalizeAndAddPath", "_reset", "convertPointsToSVGPath", "createPath", "decimatePoints", "cDistance", "lastPoint", "adjustedDistance", "newPoints", "decimate", "CIRCLE_PROPS", "Circle", "setRadius", "startAngle", "endAngle", "getRadiusX", "getRadiusY", "startX", "startY", "endX", "endY", "largeFlag", "sweepFlag", "CircleBrush", "drawDot", "addPoint", "dot", "originalRenderOnAddRemove", "circles", "circle", "pointerPoint", "SprayBrush", "sprayChunks", "sprayChunk", "addSprayChunk", "renderChunck", "rects", "chunck", "rect", "optimizeOverlapping", "uniqueRects", "uniqueRectsArray", "sprayChunck", "density", "dotWidthVariance", "dotWidth", "randomOpacity", "PatternBrush", "getPatternSrc", "patternCanvas", "patternCtx", "getPattern", "pattern", "topLeft", "coordProps", "Line", "_setWidthHeight", "calcLinePoints", "origStrokeStyle", "_this$stroke", "_x1", "_x2", "_y1", "_y2", "xMult", "yMult", "Triangle", "widthBy2", "heightBy2", "ELLIPSE_PROPS", "Ellipse", "getRx", "getRy", "parsePointsAttribute", "pointsSplit", "parsedPoints", "polylineDefaultValues", "exactBoundingBox", "Polyline", "initialized", "isOpen", "_projectStrokeOnPoints", "strokeDiff", "bboxNoStroke", "layoutProperties", "_options$width", "_options$height", "_options$width2", "_options$height2", "output", "diffX", "diffY", "Polygon", "fontProperties", "textDecorationProperties", "textLayoutProperties", "additionalProps", "styleProperties", "textDefaultValues", "_reNewline", "_reSpacesAndTabs", "_reSpaceAndTab", "_reWords", "textAlign", "superscript", "baseline", "subscript", "pathStartOffset", "pathSide", "pathAlign", "_fontSizeFraction", "offsets", "_fontSizeMult", "charSpacing", "direction", "CACHE_FONT_SIZE", "MIN_TEXT_WIDTH", "JUSTIFY", "JUSTIFY_LEFT", "JUSTIFY_RIGHT", "JUSTIFY_CENTER", "StyledText", "isEmptyStyles", "lineIndex", "line", "p3", "styleHas", "cleanStyle", "letterCount", "stylePropertyValue", "stylesCount", "allStyleObjectPropertiesMatch", "graphemeCount", "styleObject", "_textLines", "removeStyle", "lineNum", "charNum", "_extendStyles", "get2DCursorLocation", "_getLineStyle", "_setLineStyle", "newStyle", "_getStyleDeclaration", "_setStyleDeclaration", "getSelectionStyles", "startIndex", "endIndex", "getStyleAtPosition", "getCompleteStyleDeclaration", "setSelectionStyles", "_forceClearCache", "_lineStyle$charIndex", "lineStyle", "_styleProperties", "_deleteStyleDeclaration", "_deleteLineStyle", "multipleSpacesRegex", "dblQuoteRegex", "createSVGInlineRect", "svgColor", "measuringContext", "FabricText", "setPathInfo", "initDimensions", "segmentsInfo", "_splitText", "newLines", "_splitTextIntoLines", "lines", "graphemeLines", "_unwrappedTextLines", "_unwrappedLines", "_text", "graphemeText", "_clearCache", "calcTextWidth", "cursorWidth", "calcTextHeight", "enlargeSpaces", "diffSpace", "currentLineWidth", "numberOfSpaces", "accumulatedSpace", "charBound", "spaces", "isEndOfWrapping", "getLineWidth", "__charBounds", "kernedWidth", "missingNewlineOffset", "_lineIndex", "selectionStart", "skipWrapping", "_setTextStyles", "_renderTextLinesBackground", "_renderTextDecoration", "_renderTextStroke", "_renderTextFill", "charStyle", "forMeasuring", "textBaseline", "_getFontDeclaration", "maxWidth", "_renderTextLine", "_renderChars", "leftOffset", "_getLeftOffset", "lineTopOffset", "_getTopOffset", "heightOfLine", "lineLeftOffset", "_getLineLeftOffset", "drawStart", "currentColor", "boxWidth", "boxStart", "lastColor", "getValueOfPropertyAt", "charBox", "renderLeft", "_measureChar", "_char", "previousChar", "prevCharStyle", "fontDeclaration", "couple", "stylesAreEqual", "fontMultiplier", "coupleWidth", "previousWidth", "getMeasuringContext", "measureText", "getHeightOfChar", "measureLine", "lineInfo", "_measureLine", "_getWidthOfCharSpacing", "prevGrapheme", "graphemeInfo", "llength", "lineBounds", "grapheme", "_getGraphemeBox", "positionInPath", "totalPathLength", "_setGraphemeOnPath", "numOfSpaces", "centerPosition", "skipLeft", "previousBox", "__lineHeights", "maxHeight", "_renderTextCommon", "lineHeights", "isJustify", "shortCut", "isLtr", "currentDirection", "actualStyle", "nextStyle", "timeToRender", "drawingLeft", "charsToRender", "_renderChar", "_applyPatternGradientTransformText", "handleFiller", "fullDecl", "shouldFill", "fillOffsets", "fillText", "strokeOffsets", "strokeText", "setSuperscript", "_setScript", "setSubscript", "schema", "loc", "lineDiff", "__lineWidths", "_charStyle$property", "topOffset", "currentDecoration", "currentFill", "lastDecoration", "lastFill", "currentSize", "currentDy", "parsedFontFamily", "genericFonts", "newLine", "newText", "needsDims", "isAddingPath", "_options$parsedAttrib", "textAnchor", "textDecoration", "restOfOptions", "textContent", "textHeightScaleFactor", "scaledDiff", "textHeight", "offX", "_getSVGLeftTopOffsets", "textAndBg", "_getSVGTextAndBg", "textTop", "textLeft", "_wrapSVGTextAndBg", "lineTop", "textBgRects", "textSpans", "getSvgTextDecoration", "textTopOffset", "textLeftOffset", "lineOffset", "_setSVGTextLineBg", "_setSVGTextLineText", "_createTextCharSpan", "char", "styleDecl", "styleProps", "getSvgSpanStyles", "fillStyles", "dySpan", "_getSVGLineTopOffset", "lastHeight", "useWhiteSpace", "decoration", "DraggableTextDelegate", "dragEnterHandler", "dragOverHandler", "dragLeaveHandler", "dragEndHandler", "dropHandler", "_dispose", "isPointerOverSelection", "newSelection", "getSelectionStartFromPointer", "selectionEnd", "__mouseDownInPlace", "isActive", "__dragStartFired", "setCursorByClick", "initDelayedCursor", "__isDraggingOver", "getDragStartSelection", "__dragStartSelection", "setDragImage", "_e$dataTransfer", "flipFactor", "boundaries", "_getCursorBoundaries", "diff", "bgc", "dragImage", "border", "__dragImageDisposer", "appendChild", "setData", "stringify", "effectAllowed", "abortCursorAnimation", "editable", "defaultPrevented", "dragStartSelection", "targetCanDrop", "ev", "_e$dataTransfer2", "insert", "getData", "trailing", "selectionStartOffset", "removeChars", "trimEnd", "insertChars", "enterEditing", "_updateTextarea", "_e$dataTransfer3", "reNonWord", "ITextBehavior", "initBehavior", "_tick", "_onTickComplete", "_animateCursor", "toValue", "_currentCursorOpacity", "renderCursorOrSelection", "_currentTickState", "cursorDuration", "_this$_currentTickCom", "_currentTickCompleteState", "restart", "cursorDelay", "shouldClear", "cursorAnimation", "restartCursorIfNeeded", "selectAll", "_fireSelectionChanged", "getSelectedText", "findWordBoundaryLeft", "startFrom", "_reSpace", "findWordBoundaryRight", "findLineBoundaryLeft", "findLineBoundaryRight", "searchWordBoundary", "selectWord", "newSelectionStart", "newSelectionEnd", "selectLine", "enterEditingImpl", "initHiddenTextarea", "_saveEditingProps", "_setEditingProps", "_textBeforeEdit", "activeElement", "currentStart", "currentEnd", "__selectionStartOnMouseDown", "editingBorderColor", "fromStringToGraphemeSelection", "smallerTextStart", "graphemeStart", "smallerTextEnd", "fromGraphemeToStringSelection", "cursorOffsetCache", "inCompositionMode", "updateTextareaPosition", "updateFromTextArea", "textarea", "_calcTextareaPosition", "desiredPosition", "compositionStart", "cursorLocation", "charHeight", "upperCanvas", "upperCanvasWidth", "upperCanvasHeight", "clientWidth", "clientHeight", "_savedProps", "_restoreEditingProps", "_exitEditing", "exitEditingImpl", "isTextChanged", "_removeExtraneousStyles", "removeStyleFromTo", "lineStart", "charStart", "lineEnd", "charEnd", "styleObj", "shiftLineStyles", "numericChar", "clonedStyles", "numericLine", "insertNewlineStyleObject", "qty", "copiedStyle", "newLineStyles", "originalLineLength", "isEndOfLine", "someStyleIsCarryingOver", "currentCharStyle", "numIndex", "styleCarriedOver", "insertCharStyleObject", "quantity", "currentLineStyles", "currentLineStylesCloned", "numericIndex", "insertNewStyleBlock", "insertedText", "cursorLoc", "addedLines", "linesLength", "setSelectionStartEndWithShift", "_selectionDirection", "ITextKeyBehavior", "autocapitalize", "autocorrect", "autocomplete", "spellcheck", "wrap", "hiddenTextareaContainer", "keydown", "keyup", "input", "copy", "cut", "paste", "compositionstart", "compositionupdate", "compositionend", "onKeyDown", "keyMap", "keysMapRtl", "keysMap", "keyCode", "ctrlKeysMapDown", "ctrlKey", "metaKey", "stopImmediatePropagation", "onKeyUp", "_copyDone", "ctrlKeysMapUp", "onInput", "fromPaste", "updateAndFire", "nextText", "charCount", "nextCharCount", "removedText", "removeFrom", "removeTo", "charDiff", "textareaSelection", "backDelete", "copiedText", "disableStyleCopyPaste", "copiedTextStyle", "onCompositionStart", "onCompositionEnd", "onCompositionUpdate", "compositionEnd", "_getWidthBeforeCursor", "bound", "widthBeforeCursor", "getDownCursorOffset", "isRight", "selectionProp", "_getSelectionForOffset", "indexOnOtherLine", "_getIndexOnLine", "getUpCursorOffset", "textBeforeCursor", "charWidth", "foundMatch", "widthOfCharsOnLine", "indexOnLine", "leftEdge", "rightEdge", "offsetFromLeftEdge", "moveCursorDown", "_moveCursorUpOrDown", "moveCursorUp", "moveCursorWithShift", "moveCursorWithoutShift", "moveCursorLeft", "_moveCursorLeftOrRight", "_move", "newValue", "_moveLeft", "_moveRight", "moveCursorLeftWithoutShift", "change", "moveCursorLeftWithShift", "moveCursorRight", "moveCursorRightWithShift", "moveCursorRightWithoutShift", "notALeftClick", "ITextClickBehavior", "_mouseDownHandler", "_mouseDownHandlerBefore", "doubleClickHandler", "tripleClickHandler", "__lastClickTime", "__lastLastClickTime", "__lastPointer", "draggableTextDelegate", "__newClickTime", "newPointer", "isTripleClick", "__lastSelected", "didDrag", "mouseOffset", "charLength", "widthAfter", "MOVE_CURSOR_UP", "MOVE_CURSOR_DOWN", "MOVE_CURSOR_LEFT", "MOVE_CURSOR_RIGHT", "EXIT_EDITING", "iTextDefaultValues", "cursorColor", "caching", "IText", "setSelectionStart", "_updateAndFire", "setSelectionEnd", "renderSelection", "renderCursor", "skipCaching", "_getCursorBoundariesOffsets", "__getCursorBoundariesOffsets", "renderCursorAt", "_renderCursor", "getCursorRenderingData", "_renderSelection", "dragSelection", "startLine", "endLine", "startChar", "endChar", "realLineHeight", "boxEnd", "drawHeight", "extraTop", "drawWidth", "compositionColor", "getCurrentCharFontSize", "cp", "_getCurrentCharIndex", "getCurrentCharColor", "cursorPosition", "Textbox", "dynamicMinWidth", "_styleMap", "_generateStyleMap", "textInfo", "realLineCount", "realLineCharCount", "splitByGrapheme", "isWrapping", "nextOffset", "nextLineIndex", "shouldLimit", "mapNextLine", "p2Number", "_wrapText", "desiredWidth", "getGraphemeDataForRender", "wrapped", "wordsData", "_wrapLine", "infix", "largestWordWidth", "wordsOrGraphemes", "wordSplit", "word", "graphemeArray", "_measureWord", "charOffset", "_wordJoiners", "reservedSpace", "additionalSpace", "infixWidth", "lineJustStarted", "wordWidth", "getMinWidth", "minWidth", "linesToKeep", "propNumber", "ClipPathLayout", "clipPathCenter", "FixedLayout", "ActiveSelectionLayoutManager", "parents", "Set", "selectedObjects", "ActiveSelection", "multiSelectionStacking", "findIndex", "groups", "childrenOverride", "Canvas2dFilterBackend", "applyFilters", "filters", "sourceElement", "sourceWidth", "sourceHeight", "pipelineState", "imageData", "originalEl", "originalImageData", "filterBackend", "applyTo", "imageDataPostFilter", "putImageData", "WebGLFilterBackend", "tileSize", "Float32Array", "setupGLContext", "captureGPUInfo", "createWebGLCanvas", "premultipliedAlpha", "depth", "stencil", "antialias", "clearColor", "cachedTexture", "getCachedTexture", "destinationWidth", "destinationHeight", "sourceTexture", "createTexture", "targetTexture", "originalTexture", "passes", "webgl", "aPosition", "programCache", "pass", "tempFbo", "createFramebuffer", "bindFramebuffer", "FRAMEBUFFER", "dWidth", "dHeight", "copyGLTo2D", "bindTexture", "TEXTURE_2D", "deleteTexture", "deleteFramebuffer", "clearWebGLCaches", "textureCache", "textureImageSource", "NEAREST", "RGBA", "UNSIGNED_BYTE", "CLAMP_TO_EDGE", "TEXTURE_MAG_FILTER", "TEXTURE_MIN_FILTER", "TEXTURE_WRAP_S", "TEXTURE_WRAP_T", "texture", "texParameteri", "texImage2D", "uniqueId", "evictCachesForKey", "glCanvas", "sourceY", "copyGLTo2DPutImageData", "numBytes", "u8", "Uint8Array", "imageBuffer", "u8Clamped", "Uint8ClampedArray", "readPixels", "imgData", "ImageData", "gpuInfo", "renderer", "vendor", "ext", "UNMASKED_RENDERER_WEBGL", "UNMASKED_VENDOR_WEBGL", "initFilterBackend", "enableGLFiltering", "getFilterBackend", "setFilterBackend", "backend", "IMAGE_PROPS", "FabricImage", "setElement", "_element", "removeTexture", "_originalElement", "CSS_CANVAS", "resizeFilter", "applyResizeFilters", "elementKey", "getCrossOrigin", "getOriginalSize", "_stroke", "filterObj", "getSrc", "hasCrop", "imageMarkup", "strokeSvg", "imageRendering", "imageSmoothing", "getSvgSrc", "origFill", "filtered", "srcFromAttribute", "setSrc", "minimumScale", "minimumScaleTrigger", "elementToFilter", "_filteredEl", "_filterScalingX", "_filterScalingY", "_lastScaleX", "_lastScaleY", "isNeutralState", "imgElement", "_needsResize", "elementToDraw", "elWidth", "elHeight", "sX", "sY", "sW", "sH", "maxDestW", "maxDestH", "_resetWidthHeight", "pAR", "preserveAspectRatio", "pWidth", "pHeight", "rWidth", "rHeight", "f", "rf", "hydratedProps", "imageOptions", "fromURL", "applyViewboxTransform", "viewBoxAttr", "widthAttr", "heightAttr", "missingViewBox", "missingDimAttr", "translateMatrix", "widthDiff", "heightDiff", "parsedDim", "pasedViewBox", "createElementNS", "firstChild", "getTagName", "node", "tagName", "svgInvalidAncestorsRegEx", "getMultipleNodes", "nodeNames", "nodeList", "nodeArray", "getElementsByTagNameNS", "gradientsAttrs", "xlinkAttr", "recursivelyParseGradientsXlink", "_gradient$getAttribut", "xLink", "referencedGradient", "children", "referenceClone", "cloneNode", "tagArray", "getCSSRules", "allRules", "styleContents", "ruleObj", "propertyValuePairs", "pair", "_rule", "findTag", "ElementsParser", "clipPaths", "regexUrl", "gradientDefs", "elList", "createObject", "fromElement", "resolveGradient", "resolveClipPath", "extractPropertyDefinition", "storage", "gradientDef", "usingElement", "exactOwner", "clipPathElements", "objTransformInv", "clipPathTag", "clipPathOwner", "clipPathElement", "enlivedClippath", "clipRule", "gTransform", "isValidSvgTag", "createEmptyResponse", "allElements", "async", "parseSVGDocument", "nodelist", "skipAttributes", "useElement", "useAttributes", "useAttrMap", "xlink", "href", "referencedElement", "clonedOriginal", "originalAttributes", "originalAttrMap", "currentTrans", "el3", "setAttributeNS", "childNodes", "styleRecord", "mergedStyles", "entry", "descendants", "localClipPaths", "elementParser", "loadSVGFromString", "parseFromString", "loadSVGFromURL", "xml", "responseXML", "parsedDoc", "ACTION_NAME", "createPolyPositionHandler", "pointIndex", "polyObject", "polyActionHandler", "poly", "mouseLocalPosition", "factoryPolyActionHandler", "anchorPoint", "anchorPointInParentPlane", "createPolyActionHandler", "calcPathPointPosition", "pathObject", "commandIndex", "pathPositionHandler", "pathActionHandler", "movePathPoint", "anchorCommand", "PathPointControl", "controlFill", "controlStroke", "PathControlPointControl", "connectToCommandIndex", "connectToPointIndex", "connectionDashArray", "commandType", "createControl", "commandIndexPos", "pointIndexPos", "isControlPoint", "controlPointStyle", "pointStyle", "previousCommandType", "isWebGLPipelineState", "isPutImageFaster", "testContext", "ArrayBuffer", "testPipelineState", "performance", "now", "drawImageTime", "highPsourceCode", "identityFragmentShader", "BaseFilter", "getFragmentSource", "getVertexSource", "createProgram", "vertexSource", "vertexShader", "VERTEX_SHADER", "program", "getShaderInfoLog", "attachShader", "linkProgram", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "uniformLocations", "getUniformLocations", "uStepW", "getUniformLocation", "uStepH", "attributeLocations", "getAttributeLocations", "getAttribLocation", "locations", "sendAttributeData", "aPositionData", "attributeLocation", "buffer", "createBuffer", "bindBuffer", "ARRAY_BUFFER", "enableVertexAttribArray", "vertexAttribPointer", "FLOAT", "bufferData", "STATIC_DRAW", "_setupFrameBuffer", "framebufferTexture2D", "COLOR_ATTACHMENT0", "finish", "_swapTextures", "temp", "applyToWebGL", "applyTo2d", "getCacheKey", "retrieveShader", "shader", "useProgram", "uniform1f", "sendUniformData", "viewport", "drawArrays", "TRIANGLE_STRIP", "bindAdditionalTexture", "textureUnit", "activeTexture", "TEXTURE0", "unbindAdditionalTexture", "_gl", "_uniformLocations", "createHelpLayer", "helpLayer", "defaultKeys", "blendColorFragmentSource", "screen", "difference", "lighten", "darken", "exclusion", "tint", "BlendColor", "mode", "tg", "alpha1", "uniform4fv", "uColor", "mask", "BlendImage", "image", "TEXTURE1", "calculateMatrix", "resources", "blendImage", "canvas1", "blendData", "uniform1i", "uImage", "uniformMatrix3fv", "uTransformMatrix", "filterOptions", "enlivedImage", "Blur", "aspectRatio", "horizontal", "simpleBlur", "blurLayer1", "blurLayer2", "canvas2", "ctx1", "ctx2", "nSamples", "percent", "newImageData", "delta", "chooseRightDelta", "uniform2fv", "uDelta", "blurScale", "Brightness", "brightness", "uBrightness", "ColorMatrix", "colorsOnly", "constants", "uniformMatrix4fv", "uColorMatrix", "uConstants", "createColorMatrixFilter", "_Class", "newClass", "Brownie", "Vintage", "Kodachrome", "Technicolor", "Polaroid", "Sepia", "BlackWhite", "Composed", "subFilters", "enlivedFilters", "Contrast", "contrast", "contrastF", "uContrast", "Convolute_3_1", "Convolute_3_0", "Convolute_5_1", "Convolute_5_0", "Convolute_7_1", "Convolute_7_0", "Convolute_9_1", "Convolute_9_0", "Convolute", "opaque", "weights", "side", "halfSide", "sw", "sh", "createImageData", "dst", "alphaFac", "dstOff", "scx", "scy", "srcOff", "wt", "uniform1fv", "uMatrix", "GAMMA", "Gamma", "gamma", "rInv", "gInv", "bInv", "rgbValues", "rgb", "uniform3fv", "uGamma", "lightness", "luminosity", "Grayscale", "uMode", "HueRotation", "rotation", "cosine", "sine", "aThird", "aThirdSqtSin", "OneMinusCos", "Invert", "invert", "uInvert", "uAlpha", "Noise", "noise", "rand", "uNoise", "uSeed", "Pixelate", "blocksize", "_i", "_j", "uBlocksize", "RemoveColor", "lowC", "highC", "uLow", "uHigh", "useAlpha", "Resize", "uTaps", "taps", "getFilterWindow", "tempScale", "lanczosLobes", "filterWindow", "generateShader", "getTaps", "lobeFunction", "lanczosCreate", "applyToForWebgl", "dW", "dH", "lobes", "xx", "rcpScaleX", "rcpScaleY", "oW", "oH", "newData", "resizeType", "sliceByTwo", "hermiteFastResize", "bilinearFiltering", "lanczosResize", "mult", "doneW", "doneH", "stepW", "stepH", "dX", "dY", "tmpCanvas", "srcData", "destImg", "destData", "lanczos", "ratioX", "ratioY", "rcpRatioX", "rcpRatioY", "range2X", "range2Y", "cacheLanc", "icenter", "process", "u", "weight", "fX", "fY", "xDiff", "yDiff", "chnl", "origPix", "w4", "pixels", "destImage", "destPixels", "ratioW", "ratioH", "ratioWHalf", "ratioHHalf", "img2", "data2", "weightsAlpha", "gxR", "gxG", "gxB", "gxA", "yy", "w0", "Saturation", "adjust", "saturation", "uSaturation", "Vibrance", "vibrance", "amt", "uVibrance"]
}
